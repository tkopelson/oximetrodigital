
ProyectoFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007830  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  080079c0  080079c0  000089c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f04  08007f04  000091e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007f04  08007f04  00008f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f0c  08007f0c  000091e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f0c  08007f0c  00008f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f10  08007f10  00008f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08007f14  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  200001e0  080080f4  000091e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  080080f4  0000946c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd8c  00000000  00000000  00009210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e94  00000000  00000000  00016f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  00018e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009af  00000000  00000000  00019aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020f86  00000000  00000000  0001a44f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f473  00000000  00000000  0003b3d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3d6b  00000000  00000000  0004a848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010e5b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004498  00000000  00000000  0010e5f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00112a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080079a8 	.word	0x080079a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	080079a8 	.word	0x080079a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed4:	b5b0      	push	{r4, r5, r7, lr}
 8000ed6:	b0b6      	sub	sp, #216	@ 0xd8
 8000ed8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eda:	f000 ff54 	bl	8001d86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ede:	f000 fb5b 	bl	8001598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee2:	f000 fc1b 	bl	800171c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ee6:	f000 fba9 	bl	800163c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000eea:	f000 fbe7 	bl	80016bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //ConfigurarBluetooth();

  if (InicializacionSensor() != HAL_OK) {
 8000eee:	f000 fc83 	bl	80017f8 <InicializacionSensor>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <main+0x28>
      Error_Handler();
 8000ef8:	f000 fd3a 	bl	8001970 <Error_Handler>
  }

 char start_msg[] = "Sensor MAX30102 inicializado.\r\n";
 8000efc:	4ba7      	ldr	r3, [pc, #668]	@ (800119c <main+0x2c8>)
 8000efe:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8000f02:	461d      	mov	r5, r3
 8000f04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f08:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000f0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  HAL_UART_Transmit(&huart2, (uint8_t*)start_msg, strlen(start_msg), 100);
 8000f10:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff f9ab 	bl	8000270 <strlen>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 8000f22:	2364      	movs	r3, #100	@ 0x64
 8000f24:	489e      	ldr	r0, [pc, #632]	@ (80011a0 <main+0x2cc>)
 8000f26:	f003 fa25 	bl	8004374 <HAL_UART_Transmit>
  uint32_t tiempo_inicio = HAL_GetTick();
 8000f2a:	f000 ff95 	bl	8001e58 <HAL_GetTick>
 8000f2e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t estado_boton_actual = HAL_GPIO_ReadPin(GPIOA, BOTON_Pin);
 8000f32:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f3a:	f001 fa0d 	bl	8002358 <HAL_GPIO_ReadPin>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb

	    if (estado_boton_actual == 0)  // BOTÓN APRETADO
 8000f44:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	f040 82b3 	bne.w	80014b4 <main+0x5e0>
	    {
	        if (HAL_GetTick() - tiempo_boton_liberado < 3000) {
 8000f4e:	f000 ff83 	bl	8001e58 <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	4b93      	ldr	r3, [pc, #588]	@ (80011a4 <main+0x2d0>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	f240 82f5 	bls.w	800154e <main+0x67a>
	            continue;  // Esperar estabilización después de encender
	        }

	        uint32_t tiempo_actual = HAL_GetTick();
 8000f64:	f000 ff78 	bl	8001e58 <HAL_GetTick>
 8000f68:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
	        uint32_t tiempo_transcurrido_ms = tiempo_actual - tiempo_inicio;
 8000f6c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000f70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	        int segundos_restantes = 10 - (tiempo_transcurrido_ms / 1000);
 8000f7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000f7e:	4a8a      	ldr	r2, [pc, #552]	@ (80011a8 <main+0x2d4>)
 8000f80:	fba2 2303 	umull	r2, r3, r2, r3
 8000f84:	099b      	lsrs	r3, r3, #6
 8000f86:	f1c3 030a 	rsb	r3, r3, #10
 8000f8a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

	        if (LeerMuestra(&ir_data, &red_data) != HAL_OK) {
 8000f8e:	4987      	ldr	r1, [pc, #540]	@ (80011ac <main+0x2d8>)
 8000f90:	4887      	ldr	r0, [pc, #540]	@ (80011b0 <main+0x2dc>)
 8000f92:	f000 fc6b 	bl	800186c <LeerMuestra>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d01b      	beq.n	8000fd4 <main+0x100>
	            char msg[] = "Error leyendo sensor\r\n";
 8000f9c:	4b85      	ldr	r3, [pc, #532]	@ (80011b4 <main+0x2e0>)
 8000f9e:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 8000fa2:	461d      	mov	r5, r3
 8000fa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fac:	6020      	str	r0, [r4, #0]
 8000fae:	3404      	adds	r4, #4
 8000fb0:	8021      	strh	r1, [r4, #0]
 8000fb2:	3402      	adds	r4, #2
 8000fb4:	0c0b      	lsrs	r3, r1, #16
 8000fb6:	7023      	strb	r3, [r4, #0]
	            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
 8000fb8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff f957 	bl	8000270 <strlen>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8000fca:	2364      	movs	r3, #100	@ 0x64
 8000fcc:	4874      	ldr	r0, [pc, #464]	@ (80011a0 <main+0x2cc>)
 8000fce:	f003 f9d1 	bl	8004374 <HAL_UART_Transmit>
	            continue;
 8000fd2:	e2bd      	b.n	8001550 <main+0x67c>
	        }

	        int dedo_presente = (ir_data > 45000 && red_data > 45000);
 8000fd4:	4b76      	ldr	r3, [pc, #472]	@ (80011b0 <main+0x2dc>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f64a 72c8 	movw	r2, #45000	@ 0xafc8
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d907      	bls.n	8000ff0 <main+0x11c>
 8000fe0:	4b72      	ldr	r3, [pc, #456]	@ (80011ac <main+0x2d8>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f64a 72c8 	movw	r2, #45000	@ 0xafc8
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d901      	bls.n	8000ff0 <main+0x11c>
 8000fec:	2301      	movs	r3, #1
 8000fee:	e000      	b.n	8000ff2 <main+0x11e>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

	        switch (estado)
 8000ff6:	4b70      	ldr	r3, [pc, #448]	@ (80011b8 <main+0x2e4>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	f000 81ca 	beq.w	8001394 <main+0x4c0>
 8001000:	2b02      	cmp	r3, #2
 8001002:	f300 8228 	bgt.w	8001456 <main+0x582>
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <main+0x13e>
 800100a:	2b01      	cmp	r3, #1
 800100c:	f000 80a1 	beq.w	8001152 <main+0x27e>
 8001010:	e221      	b.n	8001456 <main+0x582>
	        {
	            case ESPERANDO_DEDO:
	                if (dedo_presente)
 8001012:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001016:	2b00      	cmp	r3, #0
 8001018:	d05c      	beq.n	80010d4 <main+0x200>
	                {
	                    muestras_dedo_detectadas++;
 800101a:	4b68      	ldr	r3, [pc, #416]	@ (80011bc <main+0x2e8>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	3301      	adds	r3, #1
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4b66      	ldr	r3, [pc, #408]	@ (80011bc <main+0x2e8>)
 8001024:	701a      	strb	r2, [r3, #0]

	                    if (muestras_dedo_detectadas >= MUESTRAS_CONSECUTIVAS_DEDO)
 8001026:	4b65      	ldr	r3, [pc, #404]	@ (80011bc <main+0x2e8>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b04      	cmp	r3, #4
 800102c:	f240 8210 	bls.w	8001450 <main+0x57c>
	                    {
	                        if (dedo_estable == 0)
 8001030:	4b63      	ldr	r3, [pc, #396]	@ (80011c0 <main+0x2ec>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d107      	bne.n	8001048 <main+0x174>
	                        {
	                            tiempo_dedo_detectado = tiempo_actual;
 8001038:	4a62      	ldr	r2, [pc, #392]	@ (80011c4 <main+0x2f0>)
 800103a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800103e:	6013      	str	r3, [r2, #0]
	                            dedo_estable = 1;
 8001040:	4b5f      	ldr	r3, [pc, #380]	@ (80011c0 <main+0x2ec>)
 8001042:	2201      	movs	r2, #1
 8001044:	701a      	strb	r2, [r3, #0]
	                            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
	                            msg_esperando_enviado = 1;
	                        }
	                    }
	                }
	                break;
 8001046:	e203      	b.n	8001450 <main+0x57c>
	                        else if ((tiempo_actual - tiempo_dedo_detectado) >= 3000)
 8001048:	4b5e      	ldr	r3, [pc, #376]	@ (80011c4 <main+0x2f0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001056:	4293      	cmp	r3, r2
 8001058:	f240 81fa 	bls.w	8001450 <main+0x57c>
	                            char msg[] = "Dedo detectado, iniciando medicion...\r\n";
 800105c:	4b5a      	ldr	r3, [pc, #360]	@ (80011c8 <main+0x2f4>)
 800105e:	463c      	mov	r4, r7
 8001060:	461d      	mov	r5, r3
 8001062:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001064:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001066:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001068:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800106a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800106e:	e884 0003 	stmia.w	r4, {r0, r1}
	                            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
 8001072:	463b      	mov	r3, r7
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff f8fb 	bl	8000270 <strlen>
 800107a:	4603      	mov	r3, r0
 800107c:	b29a      	uxth	r2, r3
 800107e:	4639      	mov	r1, r7
 8001080:	2364      	movs	r3, #100	@ 0x64
 8001082:	4847      	ldr	r0, [pc, #284]	@ (80011a0 <main+0x2cc>)
 8001084:	f003 f976 	bl	8004374 <HAL_UART_Transmit>
	                            tiempo_inicio = tiempo_actual;
 8001088:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800108c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	                            suma_spo2 = 0.0f;
 8001090:	4b4e      	ldr	r3, [pc, #312]	@ (80011cc <main+0x2f8>)
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
	                            contador_muestras = 0;
 8001098:	4b4d      	ldr	r3, [pc, #308]	@ (80011d0 <main+0x2fc>)
 800109a:	2200      	movs	r2, #0
 800109c:	801a      	strh	r2, [r3, #0]
	                            latidos_detectados = 0;
 800109e:	4b4d      	ldr	r3, [pc, #308]	@ (80011d4 <main+0x300>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
	                            pulso_anterior = 0;
 80010a4:	4b4c      	ldr	r3, [pc, #304]	@ (80011d8 <main+0x304>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
	                            ultimo_segundo_mostrado = 11;
 80010aa:	4b4c      	ldr	r3, [pc, #304]	@ (80011dc <main+0x308>)
 80010ac:	220b      	movs	r2, #11
 80010ae:	601a      	str	r2, [r3, #0]
	                            valor_ir_min = ir_data;
 80010b0:	4b3f      	ldr	r3, [pc, #252]	@ (80011b0 <main+0x2dc>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a4a      	ldr	r2, [pc, #296]	@ (80011e0 <main+0x30c>)
 80010b6:	6013      	str	r3, [r2, #0]
	                            valor_ir_max = ir_data;
 80010b8:	4b3d      	ldr	r3, [pc, #244]	@ (80011b0 <main+0x2dc>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a49      	ldr	r2, [pc, #292]	@ (80011e4 <main+0x310>)
 80010be:	6013      	str	r3, [r2, #0]
	                            tiempo_ultimo_latido = 0;
 80010c0:	4b49      	ldr	r3, [pc, #292]	@ (80011e8 <main+0x314>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
	                            estado = MEDICION_EN_CURSO;
 80010c6:	4b3c      	ldr	r3, [pc, #240]	@ (80011b8 <main+0x2e4>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	701a      	strb	r2, [r3, #0]
	                            muestras_dedo_detectadas = 0;
 80010cc:	4b3b      	ldr	r3, [pc, #236]	@ (80011bc <main+0x2e8>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
	                break;
 80010d2:	e1bd      	b.n	8001450 <main+0x57c>
	                    muestras_dedo_detectadas = 0;
 80010d4:	4b39      	ldr	r3, [pc, #228]	@ (80011bc <main+0x2e8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
	                    if (dedo_estable == 1)
 80010da:	4b39      	ldr	r3, [pc, #228]	@ (80011c0 <main+0x2ec>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d119      	bne.n	8001116 <main+0x242>
	                        char msg[] = "Dedo perdido antes de iniciar medicion\r\n";
 80010e2:	4b42      	ldr	r3, [pc, #264]	@ (80011ec <main+0x318>)
 80010e4:	463c      	mov	r4, r7
 80010e6:	461d      	mov	r5, r3
 80010e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010f4:	c403      	stmia	r4!, {r0, r1}
 80010f6:	7022      	strb	r2, [r4, #0]
	                        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
 80010f8:	463b      	mov	r3, r7
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff f8b8 	bl	8000270 <strlen>
 8001100:	4603      	mov	r3, r0
 8001102:	b29a      	uxth	r2, r3
 8001104:	4639      	mov	r1, r7
 8001106:	2364      	movs	r3, #100	@ 0x64
 8001108:	4825      	ldr	r0, [pc, #148]	@ (80011a0 <main+0x2cc>)
 800110a:	f003 f933 	bl	8004374 <HAL_UART_Transmit>
	                        dedo_estable = 0;
 800110e:	4b2c      	ldr	r3, [pc, #176]	@ (80011c0 <main+0x2ec>)
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
	                break;
 8001114:	e19c      	b.n	8001450 <main+0x57c>
	                        if (!msg_esperando_enviado)
 8001116:	4b36      	ldr	r3, [pc, #216]	@ (80011f0 <main+0x31c>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	f040 8198 	bne.w	8001450 <main+0x57c>
	                            char msg[] = "Esperando dedo...\r\n";
 8001120:	4b34      	ldr	r3, [pc, #208]	@ (80011f4 <main+0x320>)
 8001122:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8001126:	461d      	mov	r5, r3
 8001128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800112a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800112c:	682b      	ldr	r3, [r5, #0]
 800112e:	6023      	str	r3, [r4, #0]
	                            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
 8001130:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff f89b 	bl	8000270 <strlen>
 800113a:	4603      	mov	r3, r0
 800113c:	b29a      	uxth	r2, r3
 800113e:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8001142:	2364      	movs	r3, #100	@ 0x64
 8001144:	4816      	ldr	r0, [pc, #88]	@ (80011a0 <main+0x2cc>)
 8001146:	f003 f915 	bl	8004374 <HAL_UART_Transmit>
	                            msg_esperando_enviado = 1;
 800114a:	4b29      	ldr	r3, [pc, #164]	@ (80011f0 <main+0x31c>)
 800114c:	2201      	movs	r2, #1
 800114e:	701a      	strb	r2, [r3, #0]
	                break;
 8001150:	e17e      	b.n	8001450 <main+0x57c>

	            case MEDICION_EN_CURSO:
	                if (!dedo_presente) {
 8001152:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001156:	2b00      	cmp	r3, #0
 8001158:	d150      	bne.n	80011fc <main+0x328>
	                    char msg[] = "Dedo perdido, cancelando medicion.\r\n";
 800115a:	4b27      	ldr	r3, [pc, #156]	@ (80011f8 <main+0x324>)
 800115c:	463c      	mov	r4, r7
 800115e:	461d      	mov	r5, r3
 8001160:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001164:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001166:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001168:	e895 0003 	ldmia.w	r5, {r0, r1}
 800116c:	6020      	str	r0, [r4, #0]
 800116e:	3404      	adds	r4, #4
 8001170:	7021      	strb	r1, [r4, #0]
	                    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
 8001172:	463b      	mov	r3, r7
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff f87b 	bl	8000270 <strlen>
 800117a:	4603      	mov	r3, r0
 800117c:	b29a      	uxth	r2, r3
 800117e:	4639      	mov	r1, r7
 8001180:	2364      	movs	r3, #100	@ 0x64
 8001182:	4807      	ldr	r0, [pc, #28]	@ (80011a0 <main+0x2cc>)
 8001184:	f003 f8f6 	bl	8004374 <HAL_UART_Transmit>
	                    estado = ESPERANDO_DEDO;
 8001188:	4b0b      	ldr	r3, [pc, #44]	@ (80011b8 <main+0x2e4>)
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
	                    dedo_estable = 0;
 800118e:	4b0c      	ldr	r3, [pc, #48]	@ (80011c0 <main+0x2ec>)
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
	                    msg_esperando_enviado = 0;
 8001194:	4b16      	ldr	r3, [pc, #88]	@ (80011f0 <main+0x31c>)
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]

	                    if (tiempo_transcurrido_ms >= 10000) {
	                        estado = RESULTADO_MOSTRADO;
	                    }
	                }
	                break;
 800119a:	e15b      	b.n	8001454 <main+0x580>
 800119c:	08007a1c 	.word	0x08007a1c
 80011a0:	2000028c 	.word	0x2000028c
 80011a4:	20000234 	.word	0x20000234
 80011a8:	10624dd3 	.word	0x10624dd3
 80011ac:	2000020c 	.word	0x2000020c
 80011b0:	20000208 	.word	0x20000208
 80011b4:	08007a3c 	.word	0x08007a3c
 80011b8:	200001fc 	.word	0x200001fc
 80011bc:	20000231 	.word	0x20000231
 80011c0:	20000224 	.word	0x20000224
 80011c4:	20000220 	.word	0x20000220
 80011c8:	08007a54 	.word	0x08007a54
 80011cc:	20000210 	.word	0x20000210
 80011d0:	20000214 	.word	0x20000214
 80011d4:	20000218 	.word	0x20000218
 80011d8:	2000021c 	.word	0x2000021c
 80011dc:	20000000 	.word	0x20000000
 80011e0:	20000004 	.word	0x20000004
 80011e4:	2000022c 	.word	0x2000022c
 80011e8:	20000228 	.word	0x20000228
 80011ec:	08007a7c 	.word	0x08007a7c
 80011f0:	20000230 	.word	0x20000230
 80011f4:	08007aa8 	.word	0x08007aa8
 80011f8:	08007abc 	.word	0x08007abc
	                    if (segundos_restantes > 0 && segundos_restantes != ultimo_segundo_mostrado) {
 80011fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001200:	2b00      	cmp	r3, #0
 8001202:	dd1a      	ble.n	800123a <main+0x366>
 8001204:	4b96      	ldr	r3, [pc, #600]	@ (8001460 <main+0x58c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800120c:	429a      	cmp	r2, r3
 800120e:	d014      	beq.n	800123a <main+0x366>
	                        int len = sprintf(msg, "Mantenga el dedo durante %d segundos...\r\n", segundos_restantes);
 8001210:	463b      	mov	r3, r7
 8001212:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001216:	4993      	ldr	r1, [pc, #588]	@ (8001464 <main+0x590>)
 8001218:	4618      	mov	r0, r3
 800121a:	f004 fa93 	bl	8005744 <siprintf>
 800121e:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
	                        HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, 100);
 8001222:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001226:	b29a      	uxth	r2, r3
 8001228:	4639      	mov	r1, r7
 800122a:	2364      	movs	r3, #100	@ 0x64
 800122c:	488e      	ldr	r0, [pc, #568]	@ (8001468 <main+0x594>)
 800122e:	f003 f8a1 	bl	8004374 <HAL_UART_Transmit>
	                        ultimo_segundo_mostrado = segundos_restantes;
 8001232:	4a8b      	ldr	r2, [pc, #556]	@ (8001460 <main+0x58c>)
 8001234:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001238:	6013      	str	r3, [r2, #0]
	                    float spo2_temp = CalcularSp02(ir_data, red_data);
 800123a:	4b8c      	ldr	r3, [pc, #560]	@ (800146c <main+0x598>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a8c      	ldr	r2, [pc, #560]	@ (8001470 <main+0x59c>)
 8001240:	6812      	ldr	r2, [r2, #0]
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f000 fb4f 	bl	80018e8 <CalcularSp02>
 800124a:	ed87 0a29 	vstr	s0, [r7, #164]	@ 0xa4
	                    if (spo2_temp >= 50.0f && spo2_temp <= 100.0f) {
 800124e:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8001252:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8001474 <main+0x5a0>
 8001256:	eef4 7ac7 	vcmpe.f32	s15, s14
 800125a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125e:	db18      	blt.n	8001292 <main+0x3be>
 8001260:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8001264:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 8001478 <main+0x5a4>
 8001268:	eef4 7ac7 	vcmpe.f32	s15, s14
 800126c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001270:	d80f      	bhi.n	8001292 <main+0x3be>
	                        suma_spo2 += spo2_temp;
 8001272:	4b82      	ldr	r3, [pc, #520]	@ (800147c <main+0x5a8>)
 8001274:	ed93 7a00 	vldr	s14, [r3]
 8001278:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800127c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001280:	4b7e      	ldr	r3, [pc, #504]	@ (800147c <main+0x5a8>)
 8001282:	edc3 7a00 	vstr	s15, [r3]
	                        contador_muestras++;
 8001286:	4b7e      	ldr	r3, [pc, #504]	@ (8001480 <main+0x5ac>)
 8001288:	881b      	ldrh	r3, [r3, #0]
 800128a:	3301      	adds	r3, #1
 800128c:	b29a      	uxth	r2, r3
 800128e:	4b7c      	ldr	r3, [pc, #496]	@ (8001480 <main+0x5ac>)
 8001290:	801a      	strh	r2, [r3, #0]
	                    valor_ir_min = (0.9f * valor_ir_min) + (0.1f * ir_data);
 8001292:	4b7c      	ldr	r3, [pc, #496]	@ (8001484 <main+0x5b0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	ee07 3a90 	vmov	s15, r3
 800129a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800129e:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8001488 <main+0x5b4>
 80012a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012a6:	4b71      	ldr	r3, [pc, #452]	@ (800146c <main+0x598>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	ee07 3a90 	vmov	s15, r3
 80012ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012b2:	eddf 6a76 	vldr	s13, [pc, #472]	@ 800148c <main+0x5b8>
 80012b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80012ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012c2:	ee17 2a90 	vmov	r2, s15
 80012c6:	4b6f      	ldr	r3, [pc, #444]	@ (8001484 <main+0x5b0>)
 80012c8:	601a      	str	r2, [r3, #0]
	                    valor_ir_max = (0.9f * valor_ir_max) + (0.1f * ir_data);
 80012ca:	4b71      	ldr	r3, [pc, #452]	@ (8001490 <main+0x5bc>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	ee07 3a90 	vmov	s15, r3
 80012d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012d6:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8001488 <main+0x5b4>
 80012da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012de:	4b63      	ldr	r3, [pc, #396]	@ (800146c <main+0x598>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	ee07 3a90 	vmov	s15, r3
 80012e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ea:	eddf 6a68 	vldr	s13, [pc, #416]	@ 800148c <main+0x5b8>
 80012ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80012f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012fa:	ee17 2a90 	vmov	r2, s15
 80012fe:	4b64      	ldr	r3, [pc, #400]	@ (8001490 <main+0x5bc>)
 8001300:	601a      	str	r2, [r3, #0]
	                    uint32_t umbral = (valor_ir_min + valor_ir_max) / 2;
 8001302:	4b60      	ldr	r3, [pc, #384]	@ (8001484 <main+0x5b0>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	4b62      	ldr	r3, [pc, #392]	@ (8001490 <main+0x5bc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4413      	add	r3, r2
 800130c:	085b      	lsrs	r3, r3, #1
 800130e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	                    if (!pulso_detectado && ir_data > umbral && umbral > UMBRAL_MINIMO) {
 8001312:	4b60      	ldr	r3, [pc, #384]	@ (8001494 <main+0x5c0>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d123      	bne.n	8001362 <main+0x48e>
 800131a:	4b54      	ldr	r3, [pc, #336]	@ (800146c <main+0x598>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8001322:	429a      	cmp	r2, r3
 8001324:	d21d      	bcs.n	8001362 <main+0x48e>
 8001326:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800132a:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 800132e:	4293      	cmp	r3, r2
 8001330:	d917      	bls.n	8001362 <main+0x48e>
	                        uint32_t tiempo_actual_latido = HAL_GetTick();
 8001332:	f000 fd91 	bl	8001e58 <HAL_GetTick>
 8001336:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
	                        if (tiempo_actual_latido - tiempo_ultimo_latido > TIEMPO_MIN_LATIDO) {
 800133a:	4b57      	ldr	r3, [pc, #348]	@ (8001498 <main+0x5c4>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2bfa      	cmp	r3, #250	@ 0xfa
 8001346:	d91a      	bls.n	800137e <main+0x4aa>
	                            latidos_detectados++;
 8001348:	4b54      	ldr	r3, [pc, #336]	@ (800149c <main+0x5c8>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	3301      	adds	r3, #1
 800134e:	4a53      	ldr	r2, [pc, #332]	@ (800149c <main+0x5c8>)
 8001350:	6013      	str	r3, [r2, #0]
	                            tiempo_ultimo_latido = tiempo_actual_latido;
 8001352:	4a51      	ldr	r2, [pc, #324]	@ (8001498 <main+0x5c4>)
 8001354:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001358:	6013      	str	r3, [r2, #0]
	                            pulso_detectado = 1;
 800135a:	4b4e      	ldr	r3, [pc, #312]	@ (8001494 <main+0x5c0>)
 800135c:	2201      	movs	r2, #1
 800135e:	701a      	strb	r2, [r3, #0]
	                    if (!pulso_detectado && ir_data > umbral && umbral > UMBRAL_MINIMO) {
 8001360:	e00d      	b.n	800137e <main+0x4aa>
	                    else if (pulso_detectado && ir_data < umbral) {
 8001362:	4b4c      	ldr	r3, [pc, #304]	@ (8001494 <main+0x5c0>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d00a      	beq.n	8001380 <main+0x4ac>
 800136a:	4b40      	ldr	r3, [pc, #256]	@ (800146c <main+0x598>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8001372:	429a      	cmp	r2, r3
 8001374:	d904      	bls.n	8001380 <main+0x4ac>
	                        pulso_detectado = 0;
 8001376:	4b47      	ldr	r3, [pc, #284]	@ (8001494 <main+0x5c0>)
 8001378:	2200      	movs	r2, #0
 800137a:	701a      	strb	r2, [r3, #0]
 800137c:	e000      	b.n	8001380 <main+0x4ac>
	                    if (!pulso_detectado && ir_data > umbral && umbral > UMBRAL_MINIMO) {
 800137e:	bf00      	nop
	                    if (tiempo_transcurrido_ms >= 10000) {
 8001380:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001384:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001388:	4293      	cmp	r3, r2
 800138a:	d963      	bls.n	8001454 <main+0x580>
	                        estado = RESULTADO_MOSTRADO;
 800138c:	4b44      	ldr	r3, [pc, #272]	@ (80014a0 <main+0x5cc>)
 800138e:	2202      	movs	r2, #2
 8001390:	701a      	strb	r2, [r3, #0]
	                break;
 8001392:	e05f      	b.n	8001454 <main+0x580>

	            case RESULTADO_MOSTRADO:
	                if (contador_muestras > 0) {
 8001394:	4b3a      	ldr	r3, [pc, #232]	@ (8001480 <main+0x5ac>)
 8001396:	881b      	ldrh	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d03b      	beq.n	8001414 <main+0x540>
	                    float promedio_spo2 = suma_spo2 / contador_muestras;
 800139c:	4b37      	ldr	r3, [pc, #220]	@ (800147c <main+0x5a8>)
 800139e:	edd3 6a00 	vldr	s13, [r3]
 80013a2:	4b37      	ldr	r3, [pc, #220]	@ (8001480 <main+0x5ac>)
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	ee07 3a90 	vmov	s15, r3
 80013aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013b2:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
	                    float bpm = (latidos_detectados * 60.0f) / 10.0f;
 80013b6:	4b39      	ldr	r3, [pc, #228]	@ (800149c <main+0x5c8>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	ee07 3a90 	vmov	s15, r3
 80013be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013c2:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80014a4 <main+0x5d0>
 80013c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013ca:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80013ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013d2:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0

	                    char buffer[80];
	                    int len = sprintf(buffer, "Promedio SpO2: %.1f%% | Pulsaciones: %.1f BPM\r\n", promedio_spo2, bpm);
 80013d6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 80013da:	f7ff f8b5 	bl	8000548 <__aeabi_f2d>
 80013de:	4604      	mov	r4, r0
 80013e0:	460d      	mov	r5, r1
 80013e2:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80013e6:	f7ff f8af 	bl	8000548 <__aeabi_f2d>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4638      	mov	r0, r7
 80013f0:	e9cd 2300 	strd	r2, r3, [sp]
 80013f4:	4622      	mov	r2, r4
 80013f6:	462b      	mov	r3, r5
 80013f8:	492b      	ldr	r1, [pc, #172]	@ (80014a8 <main+0x5d4>)
 80013fa:	f004 f9a3 	bl	8005744 <siprintf>
 80013fe:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
	                    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, 100);
 8001402:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001406:	b29a      	uxth	r2, r3
 8001408:	4639      	mov	r1, r7
 800140a:	2364      	movs	r3, #100	@ 0x64
 800140c:	4816      	ldr	r0, [pc, #88]	@ (8001468 <main+0x594>)
 800140e:	f002 ffb1 	bl	8004374 <HAL_UART_Transmit>
 8001412:	e016      	b.n	8001442 <main+0x56e>
	                }
	                else {
	                    char msg[] = "No se obtuvieron muestras validas.\r\n";
 8001414:	4b25      	ldr	r3, [pc, #148]	@ (80014ac <main+0x5d8>)
 8001416:	463c      	mov	r4, r7
 8001418:	461d      	mov	r5, r3
 800141a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800141c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800141e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001420:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001422:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001426:	6020      	str	r0, [r4, #0]
 8001428:	3404      	adds	r4, #4
 800142a:	7021      	strb	r1, [r4, #0]
	                    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
 800142c:	463b      	mov	r3, r7
 800142e:	4618      	mov	r0, r3
 8001430:	f7fe ff1e 	bl	8000270 <strlen>
 8001434:	4603      	mov	r3, r0
 8001436:	b29a      	uxth	r2, r3
 8001438:	4639      	mov	r1, r7
 800143a:	2364      	movs	r3, #100	@ 0x64
 800143c:	480a      	ldr	r0, [pc, #40]	@ (8001468 <main+0x594>)
 800143e:	f002 ff99 	bl	8004374 <HAL_UART_Transmit>
	                }
	                estado = ESPERANDO_DEDO;
 8001442:	4b17      	ldr	r3, [pc, #92]	@ (80014a0 <main+0x5cc>)
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]
	                dedo_estable = 0;
 8001448:	4b19      	ldr	r3, [pc, #100]	@ (80014b0 <main+0x5dc>)
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
	                break;
 800144e:	e002      	b.n	8001456 <main+0x582>
	                break;
 8001450:	bf00      	nop
 8001452:	e000      	b.n	8001456 <main+0x582>
	                break;
 8001454:	bf00      	nop
	        }

	        HAL_Delay(100);
 8001456:	2064      	movs	r0, #100	@ 0x64
 8001458:	f000 fd0a 	bl	8001e70 <HAL_Delay>
 800145c:	e569      	b.n	8000f32 <main+0x5e>
 800145e:	bf00      	nop
 8001460:	20000000 	.word	0x20000000
 8001464:	080079c0 	.word	0x080079c0
 8001468:	2000028c 	.word	0x2000028c
 800146c:	20000208 	.word	0x20000208
 8001470:	2000020c 	.word	0x2000020c
 8001474:	42480000 	.word	0x42480000
 8001478:	42c80000 	.word	0x42c80000
 800147c:	20000210 	.word	0x20000210
 8001480:	20000214 	.word	0x20000214
 8001484:	20000004 	.word	0x20000004
 8001488:	3f666666 	.word	0x3f666666
 800148c:	3dcccccd 	.word	0x3dcccccd
 8001490:	2000022c 	.word	0x2000022c
 8001494:	20000314 	.word	0x20000314
 8001498:	20000228 	.word	0x20000228
 800149c:	20000218 	.word	0x20000218
 80014a0:	200001fc 	.word	0x200001fc
 80014a4:	42700000 	.word	0x42700000
 80014a8:	080079ec 	.word	0x080079ec
 80014ac:	08007ae4 	.word	0x08007ae4
 80014b0:	20000224 	.word	0x20000224
	    }
	    else // BOTÓN LIBERADO
	    {
	        if (estado != ESPERANDO_DEDO)
 80014b4:	4b27      	ldr	r3, [pc, #156]	@ (8001554 <main+0x680>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d042      	beq.n	8001542 <main+0x66e>
	        {
	            estado = ESPERANDO_DEDO;
 80014bc:	4b25      	ldr	r3, [pc, #148]	@ (8001554 <main+0x680>)
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]

	            dedo_estable = 0;
 80014c2:	4b25      	ldr	r3, [pc, #148]	@ (8001558 <main+0x684>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
	            suma_spo2 = 0.0f;
 80014c8:	4b24      	ldr	r3, [pc, #144]	@ (800155c <main+0x688>)
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
	            contador_muestras = 0;
 80014d0:	4b23      	ldr	r3, [pc, #140]	@ (8001560 <main+0x68c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	801a      	strh	r2, [r3, #0]
	            latidos_detectados = 0;
 80014d6:	4b23      	ldr	r3, [pc, #140]	@ (8001564 <main+0x690>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
	            pulso_anterior = 0;
 80014dc:	4b22      	ldr	r3, [pc, #136]	@ (8001568 <main+0x694>)
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
	            ultimo_segundo_mostrado = 11;
 80014e2:	4b22      	ldr	r3, [pc, #136]	@ (800156c <main+0x698>)
 80014e4:	220b      	movs	r2, #11
 80014e6:	601a      	str	r2, [r3, #0]
	            valor_ir_min = 0xFFFFFFFF;
 80014e8:	4b21      	ldr	r3, [pc, #132]	@ (8001570 <main+0x69c>)
 80014ea:	f04f 32ff 	mov.w	r2, #4294967295
 80014ee:	601a      	str	r2, [r3, #0]
	            valor_ir_max = 0;
 80014f0:	4b20      	ldr	r3, [pc, #128]	@ (8001574 <main+0x6a0>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
	            ir_data = 0;
 80014f6:	4b20      	ldr	r3, [pc, #128]	@ (8001578 <main+0x6a4>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
	            red_data = 0;
 80014fc:	4b1f      	ldr	r3, [pc, #124]	@ (800157c <main+0x6a8>)
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
	            tiempo_ultimo_latido = 0;
 8001502:	4b1f      	ldr	r3, [pc, #124]	@ (8001580 <main+0x6ac>)
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
	            msg_esperando_enviado = 0;
 8001508:	4b1e      	ldr	r3, [pc, #120]	@ (8001584 <main+0x6b0>)
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
	            primera_muestra = 1;
 800150e:	4b1e      	ldr	r3, [pc, #120]	@ (8001588 <main+0x6b4>)
 8001510:	2201      	movs	r2, #1
 8001512:	701a      	strb	r2, [r3, #0]
	            char msg[] = "Boton liberado, medicion reiniciada\r\n";
 8001514:	4b1d      	ldr	r3, [pc, #116]	@ (800158c <main+0x6b8>)
 8001516:	463c      	mov	r4, r7
 8001518:	461d      	mov	r5, r3
 800151a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800151c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800151e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001520:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001522:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001526:	6020      	str	r0, [r4, #0]
 8001528:	3404      	adds	r4, #4
 800152a:	8021      	strh	r1, [r4, #0]
	            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
 800152c:	463b      	mov	r3, r7
 800152e:	4618      	mov	r0, r3
 8001530:	f7fe fe9e 	bl	8000270 <strlen>
 8001534:	4603      	mov	r3, r0
 8001536:	b29a      	uxth	r2, r3
 8001538:	4639      	mov	r1, r7
 800153a:	2364      	movs	r3, #100	@ 0x64
 800153c:	4814      	ldr	r0, [pc, #80]	@ (8001590 <main+0x6bc>)
 800153e:	f002 ff19 	bl	8004374 <HAL_UART_Transmit>
	        }
	        tiempo_boton_liberado = HAL_GetTick();
 8001542:	f000 fc89 	bl	8001e58 <HAL_GetTick>
 8001546:	4603      	mov	r3, r0
 8001548:	4a12      	ldr	r2, [pc, #72]	@ (8001594 <main+0x6c0>)
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	e4f1      	b.n	8000f32 <main+0x5e>
	            continue;  // Esperar estabilización después de encender
 800154e:	bf00      	nop
  {
 8001550:	e4ef      	b.n	8000f32 <main+0x5e>
 8001552:	bf00      	nop
 8001554:	200001fc 	.word	0x200001fc
 8001558:	20000224 	.word	0x20000224
 800155c:	20000210 	.word	0x20000210
 8001560:	20000214 	.word	0x20000214
 8001564:	20000218 	.word	0x20000218
 8001568:	2000021c 	.word	0x2000021c
 800156c:	20000000 	.word	0x20000000
 8001570:	20000004 	.word	0x20000004
 8001574:	2000022c 	.word	0x2000022c
 8001578:	20000208 	.word	0x20000208
 800157c:	2000020c 	.word	0x2000020c
 8001580:	20000228 	.word	0x20000228
 8001584:	20000230 	.word	0x20000230
 8001588:	20000008 	.word	0x20000008
 800158c:	08007b0c 	.word	0x08007b0c
 8001590:	2000028c 	.word	0x2000028c
 8001594:	20000234 	.word	0x20000234

08001598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b096      	sub	sp, #88	@ 0x58
 800159c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	2244      	movs	r2, #68	@ 0x44
 80015a4:	2100      	movs	r1, #0
 80015a6:	4618      	mov	r0, r3
 80015a8:	f004 f931 	bl	800580e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015ac:	463b      	mov	r3, r7
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]
 80015b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015ba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80015be:	f001 fd15 	bl	8002fec <HAL_PWREx_ControlVoltageScaling>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80015c8:	f000 f9d2 	bl	8001970 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80015cc:	2310      	movs	r3, #16
 80015ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015d0:	2301      	movs	r3, #1
 80015d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80015d8:	2360      	movs	r3, #96	@ 0x60
 80015da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015dc:	2302      	movs	r3, #2
 80015de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80015e0:	2301      	movs	r3, #1
 80015e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015e4:	2301      	movs	r3, #1
 80015e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80015e8:	2328      	movs	r3, #40	@ 0x28
 80015ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015ec:	2307      	movs	r3, #7
 80015ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015f0:	2302      	movs	r3, #2
 80015f2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015f4:	2302      	movs	r3, #2
 80015f6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	4618      	mov	r0, r3
 80015fe:	f001 fd4b 	bl	8003098 <HAL_RCC_OscConfig>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001608:	f000 f9b2 	bl	8001970 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800160c:	230f      	movs	r3, #15
 800160e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001610:	2303      	movs	r3, #3
 8001612:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001614:	2300      	movs	r3, #0
 8001616:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800161c:	2300      	movs	r3, #0
 800161e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001620:	463b      	mov	r3, r7
 8001622:	2104      	movs	r1, #4
 8001624:	4618      	mov	r0, r3
 8001626:	f002 f94b 	bl	80038c0 <HAL_RCC_ClockConfig>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001630:	f000 f99e 	bl	8001970 <Error_Handler>
  }
}
 8001634:	bf00      	nop
 8001636:	3758      	adds	r7, #88	@ 0x58
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001640:	4b1b      	ldr	r3, [pc, #108]	@ (80016b0 <MX_I2C1_Init+0x74>)
 8001642:	4a1c      	ldr	r2, [pc, #112]	@ (80016b4 <MX_I2C1_Init+0x78>)
 8001644:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8001646:	4b1a      	ldr	r3, [pc, #104]	@ (80016b0 <MX_I2C1_Init+0x74>)
 8001648:	4a1b      	ldr	r2, [pc, #108]	@ (80016b8 <MX_I2C1_Init+0x7c>)
 800164a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800164c:	4b18      	ldr	r3, [pc, #96]	@ (80016b0 <MX_I2C1_Init+0x74>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001652:	4b17      	ldr	r3, [pc, #92]	@ (80016b0 <MX_I2C1_Init+0x74>)
 8001654:	2201      	movs	r2, #1
 8001656:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001658:	4b15      	ldr	r3, [pc, #84]	@ (80016b0 <MX_I2C1_Init+0x74>)
 800165a:	2200      	movs	r2, #0
 800165c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800165e:	4b14      	ldr	r3, [pc, #80]	@ (80016b0 <MX_I2C1_Init+0x74>)
 8001660:	2200      	movs	r2, #0
 8001662:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001664:	4b12      	ldr	r3, [pc, #72]	@ (80016b0 <MX_I2C1_Init+0x74>)
 8001666:	2200      	movs	r2, #0
 8001668:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800166a:	4b11      	ldr	r3, [pc, #68]	@ (80016b0 <MX_I2C1_Init+0x74>)
 800166c:	2200      	movs	r2, #0
 800166e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001670:	4b0f      	ldr	r3, [pc, #60]	@ (80016b0 <MX_I2C1_Init+0x74>)
 8001672:	2200      	movs	r2, #0
 8001674:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001676:	480e      	ldr	r0, [pc, #56]	@ (80016b0 <MX_I2C1_Init+0x74>)
 8001678:	f000 fe86 	bl	8002388 <HAL_I2C_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001682:	f000 f975 	bl	8001970 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001686:	2100      	movs	r1, #0
 8001688:	4809      	ldr	r0, [pc, #36]	@ (80016b0 <MX_I2C1_Init+0x74>)
 800168a:	f001 fc09 	bl	8002ea0 <HAL_I2CEx_ConfigAnalogFilter>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001694:	f000 f96c 	bl	8001970 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001698:	2100      	movs	r1, #0
 800169a:	4805      	ldr	r0, [pc, #20]	@ (80016b0 <MX_I2C1_Init+0x74>)
 800169c:	f001 fc4b 	bl	8002f36 <HAL_I2CEx_ConfigDigitalFilter>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016a6:	f000 f963 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000238 	.word	0x20000238
 80016b4:	40005400 	.word	0x40005400
 80016b8:	10d19ce4 	.word	0x10d19ce4

080016bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016c0:	4b14      	ldr	r3, [pc, #80]	@ (8001714 <MX_USART2_UART_Init+0x58>)
 80016c2:	4a15      	ldr	r2, [pc, #84]	@ (8001718 <MX_USART2_UART_Init+0x5c>)
 80016c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80016c6:	4b13      	ldr	r3, [pc, #76]	@ (8001714 <MX_USART2_UART_Init+0x58>)
 80016c8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80016cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ce:	4b11      	ldr	r3, [pc, #68]	@ (8001714 <MX_USART2_UART_Init+0x58>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001714 <MX_USART2_UART_Init+0x58>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016da:	4b0e      	ldr	r3, [pc, #56]	@ (8001714 <MX_USART2_UART_Init+0x58>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001714 <MX_USART2_UART_Init+0x58>)
 80016e2:	220c      	movs	r2, #12
 80016e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001714 <MX_USART2_UART_Init+0x58>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ec:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <MX_USART2_UART_Init+0x58>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016f2:	4b08      	ldr	r3, [pc, #32]	@ (8001714 <MX_USART2_UART_Init+0x58>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016f8:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <MX_USART2_UART_Init+0x58>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016fe:	4805      	ldr	r0, [pc, #20]	@ (8001714 <MX_USART2_UART_Init+0x58>)
 8001700:	f002 fdea 	bl	80042d8 <HAL_UART_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800170a:	f000 f931 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	2000028c 	.word	0x2000028c
 8001718:	40004400 	.word	0x40004400

0800171c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b088      	sub	sp, #32
 8001720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001722:	f107 030c 	add.w	r3, r7, #12
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	60da      	str	r2, [r3, #12]
 8001730:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001732:	4b15      	ldr	r3, [pc, #84]	@ (8001788 <MX_GPIO_Init+0x6c>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001736:	4a14      	ldr	r2, [pc, #80]	@ (8001788 <MX_GPIO_Init+0x6c>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800173e:	4b12      	ldr	r3, [pc, #72]	@ (8001788 <MX_GPIO_Init+0x6c>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800174a:	4b0f      	ldr	r3, [pc, #60]	@ (8001788 <MX_GPIO_Init+0x6c>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174e:	4a0e      	ldr	r2, [pc, #56]	@ (8001788 <MX_GPIO_Init+0x6c>)
 8001750:	f043 0302 	orr.w	r3, r3, #2
 8001754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001756:	4b0c      	ldr	r3, [pc, #48]	@ (8001788 <MX_GPIO_Init+0x6c>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : BOTON_Pin */
  GPIO_InitStruct.Pin = BOTON_Pin;
 8001762:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001766:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001768:	2300      	movs	r3, #0
 800176a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800176c:	2301      	movs	r3, #1
 800176e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BOTON_GPIO_Port, &GPIO_InitStruct);
 8001770:	f107 030c 	add.w	r3, r7, #12
 8001774:	4619      	mov	r1, r3
 8001776:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800177a:	f000 fc83 	bl	8002084 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800177e:	bf00      	nop
 8001780:	3720      	adds	r7, #32
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40021000 	.word	0x40021000

0800178c <EscrituraSensor>:

/* USER CODE BEGIN 4 */
// Función para escribir un byte en un registro
HAL_StatusTypeDef EscrituraSensor(uint8_t reg, uint8_t value) {
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af04      	add	r7, sp, #16
 8001792:	4603      	mov	r3, r0
 8001794:	460a      	mov	r2, r1
 8001796:	71fb      	strb	r3, [r7, #7]
 8001798:	4613      	mov	r3, r2
 800179a:	71bb      	strb	r3, [r7, #6]
    return HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 100);
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	b29a      	uxth	r2, r3
 80017a0:	2364      	movs	r3, #100	@ 0x64
 80017a2:	9302      	str	r3, [sp, #8]
 80017a4:	2301      	movs	r3, #1
 80017a6:	9301      	str	r3, [sp, #4]
 80017a8:	1dbb      	adds	r3, r7, #6
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	2301      	movs	r3, #1
 80017ae:	21ae      	movs	r1, #174	@ 0xae
 80017b0:	4803      	ldr	r0, [pc, #12]	@ (80017c0 <EscrituraSensor+0x34>)
 80017b2:	f000 fe85 	bl	80024c0 <HAL_I2C_Mem_Write>
 80017b6:	4603      	mov	r3, r0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000238 	.word	0x20000238

080017c4 <LecturaSensor>:

// Función para leer un byte de un registro
HAL_StatusTypeDef LecturaSensor(uint8_t reg, uint8_t *value) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af04      	add	r7, sp, #16
 80017ca:	4603      	mov	r3, r0
 80017cc:	6039      	str	r1, [r7, #0]
 80017ce:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR, reg, I2C_MEMADD_SIZE_8BIT, value, 1, 100);
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	2364      	movs	r3, #100	@ 0x64
 80017d6:	9302      	str	r3, [sp, #8]
 80017d8:	2301      	movs	r3, #1
 80017da:	9301      	str	r3, [sp, #4]
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	2301      	movs	r3, #1
 80017e2:	21ae      	movs	r1, #174	@ 0xae
 80017e4:	4803      	ldr	r0, [pc, #12]	@ (80017f4 <LecturaSensor+0x30>)
 80017e6:	f000 ff7f 	bl	80026e8 <HAL_I2C_Mem_Read>
 80017ea:	4603      	mov	r3, r0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000238 	.word	0x20000238

080017f8 <InicializacionSensor>:
// Inicialización básica del sensor
HAL_StatusTypeDef InicializacionSensor(void) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
    uint8_t part_id;
    HAL_StatusTypeDef status;

    // Leer PART_ID
    status = LecturaSensor(REG_PART_ID, &part_id);
 80017fe:	1dbb      	adds	r3, r7, #6
 8001800:	4619      	mov	r1, r3
 8001802:	20ff      	movs	r0, #255	@ 0xff
 8001804:	f7ff ffde 	bl	80017c4 <LecturaSensor>
 8001808:	4603      	mov	r3, r0
 800180a:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK || part_id != 0x15) return HAL_ERROR;
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d102      	bne.n	8001818 <InicializacionSensor+0x20>
 8001812:	79bb      	ldrb	r3, [r7, #6]
 8001814:	2b15      	cmp	r3, #21
 8001816:	d001      	beq.n	800181c <InicializacionSensor+0x24>
 8001818:	2301      	movs	r3, #1
 800181a:	e023      	b.n	8001864 <InicializacionSensor+0x6c>

    // Resetear sensor
    EscrituraSensor(REG_MODE_CONFIG, 0x40);
 800181c:	2140      	movs	r1, #64	@ 0x40
 800181e:	2009      	movs	r0, #9
 8001820:	f7ff ffb4 	bl	800178c <EscrituraSensor>
    HAL_Delay(10);
 8001824:	200a      	movs	r0, #10
 8001826:	f000 fb23 	bl	8001e70 <HAL_Delay>

    // Modo SpO2 (2 LEDs)
    EscrituraSensor(REG_MODE_CONFIG, 0x03);
 800182a:	2103      	movs	r1, #3
 800182c:	2009      	movs	r0, #9
 800182e:	f7ff ffad 	bl	800178c <EscrituraSensor>

    // Configurar SpO2: 100 Hz, ADC 18 bits
    EscrituraSensor(REG_SPO2_CONFIG, 0x27);
 8001832:	2127      	movs	r1, #39	@ 0x27
 8001834:	200a      	movs	r0, #10
 8001836:	f7ff ffa9 	bl	800178c <EscrituraSensor>

    // Limpiar punteros FIFO
    EscrituraSensor(REG_FIFO_WR_PTR, 0x00);
 800183a:	2100      	movs	r1, #0
 800183c:	2004      	movs	r0, #4
 800183e:	f7ff ffa5 	bl	800178c <EscrituraSensor>
    EscrituraSensor(REG_FIFO_RD_PTR, 0x00);
 8001842:	2100      	movs	r1, #0
 8001844:	2006      	movs	r0, #6
 8001846:	f7ff ffa1 	bl	800178c <EscrituraSensor>
    EscrituraSensor(REG_FIFO_OVERFLOW, 0x00);
 800184a:	2100      	movs	r1, #0
 800184c:	2005      	movs	r0, #5
 800184e:	f7ff ff9d 	bl	800178c <EscrituraSensor>
    EscrituraSensor(REG_LED1_PA, 0x24);
 8001852:	2124      	movs	r1, #36	@ 0x24
 8001854:	200c      	movs	r0, #12
 8001856:	f7ff ff99 	bl	800178c <EscrituraSensor>
    EscrituraSensor(REG_LED2_PA, 0x24);
 800185a:	2124      	movs	r1, #36	@ 0x24
 800185c:	200d      	movs	r0, #13
 800185e:	f7ff ff95 	bl	800178c <EscrituraSensor>


    return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <LeerMuestra>:
HAL_StatusTypeDef LeerMuestra(uint32_t *ir, uint32_t *red) {
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af04      	add	r7, sp, #16
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef status;

    status = HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR, REG_FIFO_DATA, I2C_MEMADD_SIZE_8BIT, fifo_data, 6, 100);
 8001876:	2364      	movs	r3, #100	@ 0x64
 8001878:	9302      	str	r3, [sp, #8]
 800187a:	2306      	movs	r3, #6
 800187c:	9301      	str	r3, [sp, #4]
 800187e:	4b18      	ldr	r3, [pc, #96]	@ (80018e0 <LeerMuestra+0x74>)
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	2301      	movs	r3, #1
 8001884:	2207      	movs	r2, #7
 8001886:	21ae      	movs	r1, #174	@ 0xae
 8001888:	4816      	ldr	r0, [pc, #88]	@ (80018e4 <LeerMuestra+0x78>)
 800188a:	f000 ff2d 	bl	80026e8 <HAL_I2C_Mem_Read>
 800188e:	4603      	mov	r3, r0
 8001890:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <LeerMuestra+0x30>
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	e01c      	b.n	80018d6 <LeerMuestra+0x6a>

    *ir = ((uint32_t)(fifo_data[0] & 0x03) << 16) | (fifo_data[1] << 8) | fifo_data[2];
 800189c:	4b10      	ldr	r3, [pc, #64]	@ (80018e0 <LeerMuestra+0x74>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	041b      	lsls	r3, r3, #16
 80018a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80018a6:	4b0e      	ldr	r3, [pc, #56]	@ (80018e0 <LeerMuestra+0x74>)
 80018a8:	785b      	ldrb	r3, [r3, #1]
 80018aa:	021b      	lsls	r3, r3, #8
 80018ac:	4313      	orrs	r3, r2
 80018ae:	4a0c      	ldr	r2, [pc, #48]	@ (80018e0 <LeerMuestra+0x74>)
 80018b0:	7892      	ldrb	r2, [r2, #2]
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	601a      	str	r2, [r3, #0]
    *red = ((uint32_t)(fifo_data[3] & 0x03) << 16) | (fifo_data[4] << 8) | fifo_data[5];
 80018b8:	4b09      	ldr	r3, [pc, #36]	@ (80018e0 <LeerMuestra+0x74>)
 80018ba:	78db      	ldrb	r3, [r3, #3]
 80018bc:	041b      	lsls	r3, r3, #16
 80018be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80018c2:	4b07      	ldr	r3, [pc, #28]	@ (80018e0 <LeerMuestra+0x74>)
 80018c4:	791b      	ldrb	r3, [r3, #4]
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	4313      	orrs	r3, r2
 80018ca:	4a05      	ldr	r2, [pc, #20]	@ (80018e0 <LeerMuestra+0x74>)
 80018cc:	7952      	ldrb	r2, [r2, #5]
 80018ce:	431a      	orrs	r2, r3
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000200 	.word	0x20000200
 80018e4:	20000238 	.word	0x20000238

080018e8 <CalcularSp02>:

float CalcularSp02(uint32_t ir, uint32_t red) {
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
    if (ir == 0) return 0.0f;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d102      	bne.n	80018fe <CalcularSp02+0x16>
 80018f8:	f04f 0300 	mov.w	r3, #0
 80018fc:	e02b      	b.n	8001956 <CalcularSp02+0x6e>
    float ratio = ((float)ir) / ((float)red); //CHUSMEAR LA CONDICION
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	ee07 3a90 	vmov	s15, r3
 8001904:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	ee07 3a90 	vmov	s15, r3
 800190e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001912:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001916:	edc7 7a02 	vstr	s15, [r7, #8]
    float spo2 = 100.0f * ratio;
 800191a:	edd7 7a02 	vldr	s15, [r7, #8]
 800191e:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001968 <CalcularSp02+0x80>
 8001922:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001926:	edc7 7a03 	vstr	s15, [r7, #12]

    if (spo2 > 100.0f) spo2 = 100.0f;
 800192a:	edd7 7a03 	vldr	s15, [r7, #12]
 800192e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001968 <CalcularSp02+0x80>
 8001932:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193a:	dd01      	ble.n	8001940 <CalcularSp02+0x58>
 800193c:	4b0b      	ldr	r3, [pc, #44]	@ (800196c <CalcularSp02+0x84>)
 800193e:	60fb      	str	r3, [r7, #12]
    if (spo2 < 0.0f) spo2 = 0.0f;
 8001940:	edd7 7a03 	vldr	s15, [r7, #12]
 8001944:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194c:	d502      	bpl.n	8001954 <CalcularSp02+0x6c>
 800194e:	f04f 0300 	mov.w	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]

    return spo2;
 8001954:	68fb      	ldr	r3, [r7, #12]
}
 8001956:	ee07 3a90 	vmov	s15, r3
 800195a:	eeb0 0a67 	vmov.f32	s0, s15
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	42c80000 	.word	0x42c80000
 800196c:	42c80000 	.word	0x42c80000

08001970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001974:	b672      	cpsid	i
}
 8001976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001978:	bf00      	nop
 800197a:	e7fd      	b.n	8001978 <Error_Handler+0x8>

0800197c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001982:	4b0f      	ldr	r3, [pc, #60]	@ (80019c0 <HAL_MspInit+0x44>)
 8001984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001986:	4a0e      	ldr	r2, [pc, #56]	@ (80019c0 <HAL_MspInit+0x44>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6613      	str	r3, [r2, #96]	@ 0x60
 800198e:	4b0c      	ldr	r3, [pc, #48]	@ (80019c0 <HAL_MspInit+0x44>)
 8001990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	4b09      	ldr	r3, [pc, #36]	@ (80019c0 <HAL_MspInit+0x44>)
 800199c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800199e:	4a08      	ldr	r2, [pc, #32]	@ (80019c0 <HAL_MspInit+0x44>)
 80019a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80019a6:	4b06      	ldr	r3, [pc, #24]	@ (80019c0 <HAL_MspInit+0x44>)
 80019a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ae:	603b      	str	r3, [r7, #0]
 80019b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40021000 	.word	0x40021000

080019c4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b09e      	sub	sp, #120	@ 0x78
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019dc:	f107 0310 	add.w	r3, r7, #16
 80019e0:	2254      	movs	r2, #84	@ 0x54
 80019e2:	2100      	movs	r1, #0
 80019e4:	4618      	mov	r0, r3
 80019e6:	f003 ff12 	bl	800580e <memset>
  if(hi2c->Instance==I2C1)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001a68 <HAL_I2C_MspInit+0xa4>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d135      	bne.n	8001a60 <HAL_I2C_MspInit+0x9c>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80019f4:	2340      	movs	r3, #64	@ 0x40
 80019f6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80019f8:	2300      	movs	r3, #0
 80019fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019fc:	f107 0310 	add.w	r3, r7, #16
 8001a00:	4618      	mov	r0, r3
 8001a02:	f002 f981 	bl	8003d08 <HAL_RCCEx_PeriphCLKConfig>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001a0c:	f7ff ffb0 	bl	8001970 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a10:	4b16      	ldr	r3, [pc, #88]	@ (8001a6c <HAL_I2C_MspInit+0xa8>)
 8001a12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a14:	4a15      	ldr	r2, [pc, #84]	@ (8001a6c <HAL_I2C_MspInit+0xa8>)
 8001a16:	f043 0302 	orr.w	r3, r3, #2
 8001a1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a1c:	4b13      	ldr	r3, [pc, #76]	@ (8001a6c <HAL_I2C_MspInit+0xa8>)
 8001a1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a28:	23c0      	movs	r3, #192	@ 0xc0
 8001a2a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a2c:	2312      	movs	r3, #18
 8001a2e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a34:	2303      	movs	r3, #3
 8001a36:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a38:	2304      	movs	r3, #4
 8001a3a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a40:	4619      	mov	r1, r3
 8001a42:	480b      	ldr	r0, [pc, #44]	@ (8001a70 <HAL_I2C_MspInit+0xac>)
 8001a44:	f000 fb1e 	bl	8002084 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a48:	4b08      	ldr	r3, [pc, #32]	@ (8001a6c <HAL_I2C_MspInit+0xa8>)
 8001a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a4c:	4a07      	ldr	r2, [pc, #28]	@ (8001a6c <HAL_I2C_MspInit+0xa8>)
 8001a4e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a52:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a54:	4b05      	ldr	r3, [pc, #20]	@ (8001a6c <HAL_I2C_MspInit+0xa8>)
 8001a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001a60:	bf00      	nop
 8001a62:	3778      	adds	r7, #120	@ 0x78
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40005400 	.word	0x40005400
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	48000400 	.word	0x48000400

08001a74 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b09e      	sub	sp, #120	@ 0x78
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a8c:	f107 0310 	add.w	r3, r7, #16
 8001a90:	2254      	movs	r2, #84	@ 0x54
 8001a92:	2100      	movs	r1, #0
 8001a94:	4618      	mov	r0, r3
 8001a96:	f003 feba 	bl	800580e <memset>
  if(huart->Instance==USART2)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a1f      	ldr	r2, [pc, #124]	@ (8001b1c <HAL_UART_MspInit+0xa8>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d136      	bne.n	8001b12 <HAL_UART_MspInit+0x9e>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aac:	f107 0310 	add.w	r3, r7, #16
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f002 f929 	bl	8003d08 <HAL_RCCEx_PeriphCLKConfig>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001abc:	f7ff ff58 	bl	8001970 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ac0:	4b17      	ldr	r3, [pc, #92]	@ (8001b20 <HAL_UART_MspInit+0xac>)
 8001ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac4:	4a16      	ldr	r2, [pc, #88]	@ (8001b20 <HAL_UART_MspInit+0xac>)
 8001ac6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001aca:	6593      	str	r3, [r2, #88]	@ 0x58
 8001acc:	4b14      	ldr	r3, [pc, #80]	@ (8001b20 <HAL_UART_MspInit+0xac>)
 8001ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad8:	4b11      	ldr	r3, [pc, #68]	@ (8001b20 <HAL_UART_MspInit+0xac>)
 8001ada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001adc:	4a10      	ldr	r2, [pc, #64]	@ (8001b20 <HAL_UART_MspInit+0xac>)
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b20 <HAL_UART_MspInit+0xac>)
 8001ae6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001af0:	230c      	movs	r3, #12
 8001af2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af4:	2302      	movs	r3, #2
 8001af6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afc:	2303      	movs	r3, #3
 8001afe:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b00:	2307      	movs	r3, #7
 8001b02:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b04:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b0e:	f000 fab9 	bl	8002084 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001b12:	bf00      	nop
 8001b14:	3778      	adds	r7, #120	@ 0x78
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40004400 	.word	0x40004400
 8001b20:	40021000 	.word	0x40021000

08001b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b28:	bf00      	nop
 8001b2a:	e7fd      	b.n	8001b28 <NMI_Handler+0x4>

08001b2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b30:	bf00      	nop
 8001b32:	e7fd      	b.n	8001b30 <HardFault_Handler+0x4>

08001b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b38:	bf00      	nop
 8001b3a:	e7fd      	b.n	8001b38 <MemManage_Handler+0x4>

08001b3c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b40:	bf00      	nop
 8001b42:	e7fd      	b.n	8001b40 <BusFault_Handler+0x4>

08001b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b48:	bf00      	nop
 8001b4a:	e7fd      	b.n	8001b48 <UsageFault_Handler+0x4>

08001b4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b7a:	f000 f959 	bl	8001e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0
  return 1;
 8001b86:	2301      	movs	r3, #1
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <_kill>:

int _kill(int pid, int sig)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b9c:	f003 fe8a 	bl	80058b4 <__errno>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2216      	movs	r2, #22
 8001ba4:	601a      	str	r2, [r3, #0]
  return -1;
 8001ba6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <_exit>:

void _exit (int status)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bba:	f04f 31ff 	mov.w	r1, #4294967295
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff ffe7 	bl	8001b92 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bc4:	bf00      	nop
 8001bc6:	e7fd      	b.n	8001bc4 <_exit+0x12>

08001bc8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	e00a      	b.n	8001bf0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bda:	f3af 8000 	nop.w
 8001bde:	4601      	mov	r1, r0
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	60ba      	str	r2, [r7, #8]
 8001be6:	b2ca      	uxtb	r2, r1
 8001be8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	3301      	adds	r3, #1
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	dbf0      	blt.n	8001bda <_read+0x12>
  }

  return len;
 8001bf8:	687b      	ldr	r3, [r7, #4]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b086      	sub	sp, #24
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	60f8      	str	r0, [r7, #12]
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	e009      	b.n	8001c28 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	1c5a      	adds	r2, r3, #1
 8001c18:	60ba      	str	r2, [r7, #8]
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	3301      	adds	r3, #1
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	dbf1      	blt.n	8001c14 <_write+0x12>
  }
  return len;
 8001c30:	687b      	ldr	r3, [r7, #4]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <_close>:

int _close(int file)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c62:	605a      	str	r2, [r3, #4]
  return 0;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <_isatty>:

int _isatty(int file)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c7a:	2301      	movs	r3, #1
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
	...

08001ca4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cac:	4a14      	ldr	r2, [pc, #80]	@ (8001d00 <_sbrk+0x5c>)
 8001cae:	4b15      	ldr	r3, [pc, #84]	@ (8001d04 <_sbrk+0x60>)
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cb8:	4b13      	ldr	r3, [pc, #76]	@ (8001d08 <_sbrk+0x64>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d102      	bne.n	8001cc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cc0:	4b11      	ldr	r3, [pc, #68]	@ (8001d08 <_sbrk+0x64>)
 8001cc2:	4a12      	ldr	r2, [pc, #72]	@ (8001d0c <_sbrk+0x68>)
 8001cc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cc6:	4b10      	ldr	r3, [pc, #64]	@ (8001d08 <_sbrk+0x64>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4413      	add	r3, r2
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d207      	bcs.n	8001ce4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cd4:	f003 fdee 	bl	80058b4 <__errno>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	220c      	movs	r2, #12
 8001cdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cde:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce2:	e009      	b.n	8001cf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ce4:	4b08      	ldr	r3, [pc, #32]	@ (8001d08 <_sbrk+0x64>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cea:	4b07      	ldr	r3, [pc, #28]	@ (8001d08 <_sbrk+0x64>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	4a05      	ldr	r2, [pc, #20]	@ (8001d08 <_sbrk+0x64>)
 8001cf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	2000c000 	.word	0x2000c000
 8001d04:	00000400 	.word	0x00000400
 8001d08:	20000318 	.word	0x20000318
 8001d0c:	20000470 	.word	0x20000470

08001d10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d14:	4b06      	ldr	r3, [pc, #24]	@ (8001d30 <SystemInit+0x20>)
 8001d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d1a:	4a05      	ldr	r2, [pc, #20]	@ (8001d30 <SystemInit+0x20>)
 8001d1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d6c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d38:	f7ff ffea 	bl	8001d10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d3c:	480c      	ldr	r0, [pc, #48]	@ (8001d70 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d3e:	490d      	ldr	r1, [pc, #52]	@ (8001d74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d40:	4a0d      	ldr	r2, [pc, #52]	@ (8001d78 <LoopForever+0xe>)
  movs r3, #0
 8001d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d44:	e002      	b.n	8001d4c <LoopCopyDataInit>

08001d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d4a:	3304      	adds	r3, #4

08001d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d50:	d3f9      	bcc.n	8001d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d52:	4a0a      	ldr	r2, [pc, #40]	@ (8001d7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d54:	4c0a      	ldr	r4, [pc, #40]	@ (8001d80 <LoopForever+0x16>)
  movs r3, #0
 8001d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d58:	e001      	b.n	8001d5e <LoopFillZerobss>

08001d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d5c:	3204      	adds	r2, #4

08001d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d60:	d3fb      	bcc.n	8001d5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d62:	f003 fdad 	bl	80058c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d66:	f7ff f8b5 	bl	8000ed4 <main>

08001d6a <LoopForever>:

LoopForever:
    b LoopForever
 8001d6a:	e7fe      	b.n	8001d6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d6c:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d74:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001d78:	08007f14 	.word	0x08007f14
  ldr r2, =_sbss
 8001d7c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001d80:	2000046c 	.word	0x2000046c

08001d84 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d84:	e7fe      	b.n	8001d84 <ADC1_IRQHandler>

08001d86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d90:	2003      	movs	r0, #3
 8001d92:	f000 f943 	bl	800201c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d96:	200f      	movs	r0, #15
 8001d98:	f000 f80e 	bl	8001db8 <HAL_InitTick>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d002      	beq.n	8001da8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	71fb      	strb	r3, [r7, #7]
 8001da6:	e001      	b.n	8001dac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001da8:	f7ff fde8 	bl	800197c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dac:	79fb      	ldrb	r3, [r7, #7]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001dc4:	4b17      	ldr	r3, [pc, #92]	@ (8001e24 <HAL_InitTick+0x6c>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d023      	beq.n	8001e14 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001dcc:	4b16      	ldr	r3, [pc, #88]	@ (8001e28 <HAL_InitTick+0x70>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b14      	ldr	r3, [pc, #80]	@ (8001e24 <HAL_InitTick+0x6c>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de2:	4618      	mov	r0, r3
 8001de4:	f000 f941 	bl	800206a <HAL_SYSTICK_Config>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10f      	bne.n	8001e0e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b0f      	cmp	r3, #15
 8001df2:	d809      	bhi.n	8001e08 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df4:	2200      	movs	r2, #0
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfc:	f000 f919 	bl	8002032 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e00:	4a0a      	ldr	r2, [pc, #40]	@ (8001e2c <HAL_InitTick+0x74>)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	e007      	b.n	8001e18 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
 8001e0c:	e004      	b.n	8001e18 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	73fb      	strb	r3, [r7, #15]
 8001e12:	e001      	b.n	8001e18 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000014 	.word	0x20000014
 8001e28:	2000000c 	.word	0x2000000c
 8001e2c:	20000010 	.word	0x20000010

08001e30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e34:	4b06      	ldr	r3, [pc, #24]	@ (8001e50 <HAL_IncTick+0x20>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b06      	ldr	r3, [pc, #24]	@ (8001e54 <HAL_IncTick+0x24>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4413      	add	r3, r2
 8001e40:	4a04      	ldr	r2, [pc, #16]	@ (8001e54 <HAL_IncTick+0x24>)
 8001e42:	6013      	str	r3, [r2, #0]
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	20000014 	.word	0x20000014
 8001e54:	2000031c 	.word	0x2000031c

08001e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e5c:	4b03      	ldr	r3, [pc, #12]	@ (8001e6c <HAL_GetTick+0x14>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	2000031c 	.word	0x2000031c

08001e70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e78:	f7ff ffee 	bl	8001e58 <HAL_GetTick>
 8001e7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e88:	d005      	beq.n	8001e96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb4 <HAL_Delay+0x44>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4413      	add	r3, r2
 8001e94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e96:	bf00      	nop
 8001e98:	f7ff ffde 	bl	8001e58 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d8f7      	bhi.n	8001e98 <HAL_Delay+0x28>
  {
  }
}
 8001ea8:	bf00      	nop
 8001eaa:	bf00      	nop
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000014 	.word	0x20000014

08001eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8001efc <__NVIC_SetPriorityGrouping+0x44>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ece:	68ba      	ldr	r2, [r7, #8]
 8001ed0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ee4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eea:	4a04      	ldr	r2, [pc, #16]	@ (8001efc <__NVIC_SetPriorityGrouping+0x44>)
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	60d3      	str	r3, [r2, #12]
}
 8001ef0:	bf00      	nop
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f04:	4b04      	ldr	r3, [pc, #16]	@ (8001f18 <__NVIC_GetPriorityGrouping+0x18>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	0a1b      	lsrs	r3, r3, #8
 8001f0a:	f003 0307 	and.w	r3, r3, #7
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	6039      	str	r1, [r7, #0]
 8001f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	db0a      	blt.n	8001f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	490c      	ldr	r1, [pc, #48]	@ (8001f68 <__NVIC_SetPriority+0x4c>)
 8001f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3a:	0112      	lsls	r2, r2, #4
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	440b      	add	r3, r1
 8001f40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f44:	e00a      	b.n	8001f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	4908      	ldr	r1, [pc, #32]	@ (8001f6c <__NVIC_SetPriority+0x50>)
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	3b04      	subs	r3, #4
 8001f54:	0112      	lsls	r2, r2, #4
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	440b      	add	r3, r1
 8001f5a:	761a      	strb	r2, [r3, #24]
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	e000e100 	.word	0xe000e100
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b089      	sub	sp, #36	@ 0x24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f1c3 0307 	rsb	r3, r3, #7
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	bf28      	it	cs
 8001f8e:	2304      	movcs	r3, #4
 8001f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	3304      	adds	r3, #4
 8001f96:	2b06      	cmp	r3, #6
 8001f98:	d902      	bls.n	8001fa0 <NVIC_EncodePriority+0x30>
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3b03      	subs	r3, #3
 8001f9e:	e000      	b.n	8001fa2 <NVIC_EncodePriority+0x32>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43da      	mvns	r2, r3
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	401a      	ands	r2, r3
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc2:	43d9      	mvns	r1, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc8:	4313      	orrs	r3, r2
         );
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3724      	adds	r7, #36	@ 0x24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fe8:	d301      	bcc.n	8001fee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fea:	2301      	movs	r3, #1
 8001fec:	e00f      	b.n	800200e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fee:	4a0a      	ldr	r2, [pc, #40]	@ (8002018 <SysTick_Config+0x40>)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ff6:	210f      	movs	r1, #15
 8001ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ffc:	f7ff ff8e 	bl	8001f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002000:	4b05      	ldr	r3, [pc, #20]	@ (8002018 <SysTick_Config+0x40>)
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002006:	4b04      	ldr	r3, [pc, #16]	@ (8002018 <SysTick_Config+0x40>)
 8002008:	2207      	movs	r2, #7
 800200a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	e000e010 	.word	0xe000e010

0800201c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff ff47 	bl	8001eb8 <__NVIC_SetPriorityGrouping>
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b086      	sub	sp, #24
 8002036:	af00      	add	r7, sp, #0
 8002038:	4603      	mov	r3, r0
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
 800203e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002044:	f7ff ff5c 	bl	8001f00 <__NVIC_GetPriorityGrouping>
 8002048:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	68b9      	ldr	r1, [r7, #8]
 800204e:	6978      	ldr	r0, [r7, #20]
 8002050:	f7ff ff8e 	bl	8001f70 <NVIC_EncodePriority>
 8002054:	4602      	mov	r2, r0
 8002056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800205a:	4611      	mov	r1, r2
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff ff5d 	bl	8001f1c <__NVIC_SetPriority>
}
 8002062:	bf00      	nop
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff ffb0 	bl	8001fd8 <SysTick_Config>
 8002078:	4603      	mov	r3, r0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002084:	b480      	push	{r7}
 8002086:	b087      	sub	sp, #28
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002092:	e148      	b.n	8002326 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	2101      	movs	r1, #1
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	fa01 f303 	lsl.w	r3, r1, r3
 80020a0:	4013      	ands	r3, r2
 80020a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 813a 	beq.w	8002320 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 0303 	and.w	r3, r3, #3
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d005      	beq.n	80020c4 <HAL_GPIO_Init+0x40>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 0303 	and.w	r3, r3, #3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d130      	bne.n	8002126 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	2203      	movs	r2, #3
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	4013      	ands	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	68da      	ldr	r2, [r3, #12]
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020fa:	2201      	movs	r2, #1
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43db      	mvns	r3, r3
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	4013      	ands	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	091b      	lsrs	r3, r3, #4
 8002110:	f003 0201 	and.w	r2, r3, #1
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	2b03      	cmp	r3, #3
 8002130:	d017      	beq.n	8002162 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	2203      	movs	r2, #3
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	4013      	ands	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f003 0303 	and.w	r3, r3, #3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d123      	bne.n	80021b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	08da      	lsrs	r2, r3, #3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3208      	adds	r2, #8
 8002176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800217a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	220f      	movs	r2, #15
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43db      	mvns	r3, r3
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	4013      	ands	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	691a      	ldr	r2, [r3, #16]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	08da      	lsrs	r2, r3, #3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3208      	adds	r2, #8
 80021b0:	6939      	ldr	r1, [r7, #16]
 80021b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	2203      	movs	r2, #3
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4013      	ands	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 0203 	and.w	r2, r3, #3
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 8094 	beq.w	8002320 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f8:	4b52      	ldr	r3, [pc, #328]	@ (8002344 <HAL_GPIO_Init+0x2c0>)
 80021fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021fc:	4a51      	ldr	r2, [pc, #324]	@ (8002344 <HAL_GPIO_Init+0x2c0>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6613      	str	r3, [r2, #96]	@ 0x60
 8002204:	4b4f      	ldr	r3, [pc, #316]	@ (8002344 <HAL_GPIO_Init+0x2c0>)
 8002206:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002210:	4a4d      	ldr	r2, [pc, #308]	@ (8002348 <HAL_GPIO_Init+0x2c4>)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	089b      	lsrs	r3, r3, #2
 8002216:	3302      	adds	r3, #2
 8002218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800221c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f003 0303 	and.w	r3, r3, #3
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	220f      	movs	r2, #15
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4013      	ands	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800223a:	d00d      	beq.n	8002258 <HAL_GPIO_Init+0x1d4>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a43      	ldr	r2, [pc, #268]	@ (800234c <HAL_GPIO_Init+0x2c8>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d007      	beq.n	8002254 <HAL_GPIO_Init+0x1d0>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a42      	ldr	r2, [pc, #264]	@ (8002350 <HAL_GPIO_Init+0x2cc>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d101      	bne.n	8002250 <HAL_GPIO_Init+0x1cc>
 800224c:	2302      	movs	r3, #2
 800224e:	e004      	b.n	800225a <HAL_GPIO_Init+0x1d6>
 8002250:	2307      	movs	r3, #7
 8002252:	e002      	b.n	800225a <HAL_GPIO_Init+0x1d6>
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <HAL_GPIO_Init+0x1d6>
 8002258:	2300      	movs	r3, #0
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	f002 0203 	and.w	r2, r2, #3
 8002260:	0092      	lsls	r2, r2, #2
 8002262:	4093      	lsls	r3, r2
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800226a:	4937      	ldr	r1, [pc, #220]	@ (8002348 <HAL_GPIO_Init+0x2c4>)
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	089b      	lsrs	r3, r3, #2
 8002270:	3302      	adds	r3, #2
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002278:	4b36      	ldr	r3, [pc, #216]	@ (8002354 <HAL_GPIO_Init+0x2d0>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	43db      	mvns	r3, r3
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	4013      	ands	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800229c:	4a2d      	ldr	r2, [pc, #180]	@ (8002354 <HAL_GPIO_Init+0x2d0>)
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022a2:	4b2c      	ldr	r3, [pc, #176]	@ (8002354 <HAL_GPIO_Init+0x2d0>)
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	43db      	mvns	r3, r3
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4013      	ands	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022c6:	4a23      	ldr	r2, [pc, #140]	@ (8002354 <HAL_GPIO_Init+0x2d0>)
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022cc:	4b21      	ldr	r3, [pc, #132]	@ (8002354 <HAL_GPIO_Init+0x2d0>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	43db      	mvns	r3, r3
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4013      	ands	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022f0:	4a18      	ldr	r2, [pc, #96]	@ (8002354 <HAL_GPIO_Init+0x2d0>)
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80022f6:	4b17      	ldr	r3, [pc, #92]	@ (8002354 <HAL_GPIO_Init+0x2d0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	43db      	mvns	r3, r3
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4013      	ands	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	4313      	orrs	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800231a:	4a0e      	ldr	r2, [pc, #56]	@ (8002354 <HAL_GPIO_Init+0x2d0>)
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	3301      	adds	r3, #1
 8002324:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	fa22 f303 	lsr.w	r3, r2, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	f47f aeaf 	bne.w	8002094 <HAL_GPIO_Init+0x10>
  }
}
 8002336:	bf00      	nop
 8002338:	bf00      	nop
 800233a:	371c      	adds	r7, #28
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	40021000 	.word	0x40021000
 8002348:	40010000 	.word	0x40010000
 800234c:	48000400 	.word	0x48000400
 8002350:	48000800 	.word	0x48000800
 8002354:	40010400 	.word	0x40010400

08002358 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691a      	ldr	r2, [r3, #16]
 8002368:	887b      	ldrh	r3, [r7, #2]
 800236a:	4013      	ands	r3, r2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d002      	beq.n	8002376 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002370:	2301      	movs	r3, #1
 8002372:	73fb      	strb	r3, [r7, #15]
 8002374:	e001      	b.n	800237a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002376:	2300      	movs	r3, #0
 8002378:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800237a:	7bfb      	ldrb	r3, [r7, #15]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e08d      	b.n	80024b6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d106      	bne.n	80023b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff fb08 	bl	80019c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2224      	movs	r2, #36	@ 0x24
 80023b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0201 	bic.w	r2, r2, #1
 80023ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d107      	bne.n	8002402 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	e006      	b.n	8002410 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800240e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	2b02      	cmp	r3, #2
 8002416:	d108      	bne.n	800242a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002426:	605a      	str	r2, [r3, #4]
 8002428:	e007      	b.n	800243a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002438:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	6812      	ldr	r2, [r2, #0]
 8002444:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002448:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800244c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68da      	ldr	r2, [r3, #12]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800245c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691a      	ldr	r2, [r3, #16]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	69d9      	ldr	r1, [r3, #28]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a1a      	ldr	r2, [r3, #32]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	430a      	orrs	r2, r1
 8002486:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0201 	orr.w	r2, r2, #1
 8002496:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2220      	movs	r2, #32
 80024a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
	...

080024c0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b088      	sub	sp, #32
 80024c4:	af02      	add	r7, sp, #8
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	4608      	mov	r0, r1
 80024ca:	4611      	mov	r1, r2
 80024cc:	461a      	mov	r2, r3
 80024ce:	4603      	mov	r3, r0
 80024d0:	817b      	strh	r3, [r7, #10]
 80024d2:	460b      	mov	r3, r1
 80024d4:	813b      	strh	r3, [r7, #8]
 80024d6:	4613      	mov	r3, r2
 80024d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b20      	cmp	r3, #32
 80024e4:	f040 80f9 	bne.w	80026da <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024e8:	6a3b      	ldr	r3, [r7, #32]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d002      	beq.n	80024f4 <HAL_I2C_Mem_Write+0x34>
 80024ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d105      	bne.n	8002500 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024fa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e0ed      	b.n	80026dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002506:	2b01      	cmp	r3, #1
 8002508:	d101      	bne.n	800250e <HAL_I2C_Mem_Write+0x4e>
 800250a:	2302      	movs	r3, #2
 800250c:	e0e6      	b.n	80026dc <HAL_I2C_Mem_Write+0x21c>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002516:	f7ff fc9f 	bl	8001e58 <HAL_GetTick>
 800251a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	2319      	movs	r3, #25
 8002522:	2201      	movs	r2, #1
 8002524:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 fac3 	bl	8002ab4 <I2C_WaitOnFlagUntilTimeout>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e0d1      	b.n	80026dc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2221      	movs	r2, #33	@ 0x21
 800253c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2240      	movs	r2, #64	@ 0x40
 8002544:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6a3a      	ldr	r2, [r7, #32]
 8002552:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002558:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002560:	88f8      	ldrh	r0, [r7, #6]
 8002562:	893a      	ldrh	r2, [r7, #8]
 8002564:	8979      	ldrh	r1, [r7, #10]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	9301      	str	r3, [sp, #4]
 800256a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	4603      	mov	r3, r0
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f000 f9d3 	bl	800291c <I2C_RequestMemoryWrite>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d005      	beq.n	8002588 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e0a9      	b.n	80026dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800258c:	b29b      	uxth	r3, r3
 800258e:	2bff      	cmp	r3, #255	@ 0xff
 8002590:	d90e      	bls.n	80025b0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	22ff      	movs	r2, #255	@ 0xff
 8002596:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800259c:	b2da      	uxtb	r2, r3
 800259e:	8979      	ldrh	r1, [r7, #10]
 80025a0:	2300      	movs	r3, #0
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 fc47 	bl	8002e3c <I2C_TransferConfig>
 80025ae:	e00f      	b.n	80025d0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	8979      	ldrh	r1, [r7, #10]
 80025c2:	2300      	movs	r3, #0
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 fc36 	bl	8002e3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f000 fac6 	bl	8002b66 <I2C_WaitOnTXISFlagUntilTimeout>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e07b      	b.n	80026dc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e8:	781a      	ldrb	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025fe:	b29b      	uxth	r3, r3
 8002600:	3b01      	subs	r3, #1
 8002602:	b29a      	uxth	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002618:	b29b      	uxth	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d034      	beq.n	8002688 <HAL_I2C_Mem_Write+0x1c8>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002622:	2b00      	cmp	r3, #0
 8002624:	d130      	bne.n	8002688 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800262c:	2200      	movs	r2, #0
 800262e:	2180      	movs	r1, #128	@ 0x80
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 fa3f 	bl	8002ab4 <I2C_WaitOnFlagUntilTimeout>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e04d      	b.n	80026dc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002644:	b29b      	uxth	r3, r3
 8002646:	2bff      	cmp	r3, #255	@ 0xff
 8002648:	d90e      	bls.n	8002668 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	22ff      	movs	r2, #255	@ 0xff
 800264e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002654:	b2da      	uxtb	r2, r3
 8002656:	8979      	ldrh	r1, [r7, #10]
 8002658:	2300      	movs	r3, #0
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f000 fbeb 	bl	8002e3c <I2C_TransferConfig>
 8002666:	e00f      	b.n	8002688 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800266c:	b29a      	uxth	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002676:	b2da      	uxtb	r2, r3
 8002678:	8979      	ldrh	r1, [r7, #10]
 800267a:	2300      	movs	r3, #0
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 fbda 	bl	8002e3c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800268c:	b29b      	uxth	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d19e      	bne.n	80025d0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 faac 	bl	8002bf4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e01a      	b.n	80026dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2220      	movs	r2, #32
 80026ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6859      	ldr	r1, [r3, #4]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	4b0a      	ldr	r3, [pc, #40]	@ (80026e4 <HAL_I2C_Mem_Write+0x224>)
 80026ba:	400b      	ands	r3, r1
 80026bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2220      	movs	r2, #32
 80026c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80026d6:	2300      	movs	r3, #0
 80026d8:	e000      	b.n	80026dc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80026da:	2302      	movs	r3, #2
  }
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	fe00e800 	.word	0xfe00e800

080026e8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af02      	add	r7, sp, #8
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	4608      	mov	r0, r1
 80026f2:	4611      	mov	r1, r2
 80026f4:	461a      	mov	r2, r3
 80026f6:	4603      	mov	r3, r0
 80026f8:	817b      	strh	r3, [r7, #10]
 80026fa:	460b      	mov	r3, r1
 80026fc:	813b      	strh	r3, [r7, #8]
 80026fe:	4613      	mov	r3, r2
 8002700:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b20      	cmp	r3, #32
 800270c:	f040 80fd 	bne.w	800290a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d002      	beq.n	800271c <HAL_I2C_Mem_Read+0x34>
 8002716:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002718:	2b00      	cmp	r3, #0
 800271a:	d105      	bne.n	8002728 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002722:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0f1      	b.n	800290c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800272e:	2b01      	cmp	r3, #1
 8002730:	d101      	bne.n	8002736 <HAL_I2C_Mem_Read+0x4e>
 8002732:	2302      	movs	r3, #2
 8002734:	e0ea      	b.n	800290c <HAL_I2C_Mem_Read+0x224>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800273e:	f7ff fb8b 	bl	8001e58 <HAL_GetTick>
 8002742:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	2319      	movs	r3, #25
 800274a:	2201      	movs	r2, #1
 800274c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 f9af 	bl	8002ab4 <I2C_WaitOnFlagUntilTimeout>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e0d5      	b.n	800290c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2222      	movs	r2, #34	@ 0x22
 8002764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2240      	movs	r2, #64	@ 0x40
 800276c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6a3a      	ldr	r2, [r7, #32]
 800277a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002780:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002788:	88f8      	ldrh	r0, [r7, #6]
 800278a:	893a      	ldrh	r2, [r7, #8]
 800278c:	8979      	ldrh	r1, [r7, #10]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	9301      	str	r3, [sp, #4]
 8002792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	4603      	mov	r3, r0
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 f913 	bl	80029c4 <I2C_RequestMemoryRead>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d005      	beq.n	80027b0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e0ad      	b.n	800290c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	2bff      	cmp	r3, #255	@ 0xff
 80027b8:	d90e      	bls.n	80027d8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2201      	movs	r2, #1
 80027be:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	8979      	ldrh	r1, [r7, #10]
 80027c8:	4b52      	ldr	r3, [pc, #328]	@ (8002914 <HAL_I2C_Mem_Read+0x22c>)
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f000 fb33 	bl	8002e3c <I2C_TransferConfig>
 80027d6:	e00f      	b.n	80027f8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	8979      	ldrh	r1, [r7, #10]
 80027ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002914 <HAL_I2C_Mem_Read+0x22c>)
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f000 fb22 	bl	8002e3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027fe:	2200      	movs	r2, #0
 8002800:	2104      	movs	r1, #4
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 f956 	bl	8002ab4 <I2C_WaitOnFlagUntilTimeout>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e07c      	b.n	800290c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800282e:	3b01      	subs	r3, #1
 8002830:	b29a      	uxth	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800283a:	b29b      	uxth	r3, r3
 800283c:	3b01      	subs	r3, #1
 800283e:	b29a      	uxth	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002848:	b29b      	uxth	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d034      	beq.n	80028b8 <HAL_I2C_Mem_Read+0x1d0>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002852:	2b00      	cmp	r3, #0
 8002854:	d130      	bne.n	80028b8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800285c:	2200      	movs	r2, #0
 800285e:	2180      	movs	r1, #128	@ 0x80
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 f927 	bl	8002ab4 <I2C_WaitOnFlagUntilTimeout>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e04d      	b.n	800290c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002874:	b29b      	uxth	r3, r3
 8002876:	2bff      	cmp	r3, #255	@ 0xff
 8002878:	d90e      	bls.n	8002898 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2201      	movs	r2, #1
 800287e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002884:	b2da      	uxtb	r2, r3
 8002886:	8979      	ldrh	r1, [r7, #10]
 8002888:	2300      	movs	r3, #0
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 fad3 	bl	8002e3c <I2C_TransferConfig>
 8002896:	e00f      	b.n	80028b8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800289c:	b29a      	uxth	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	8979      	ldrh	r1, [r7, #10]
 80028aa:	2300      	movs	r3, #0
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 fac2 	bl	8002e3c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028bc:	b29b      	uxth	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d19a      	bne.n	80027f8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 f994 	bl	8002bf4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e01a      	b.n	800290c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2220      	movs	r2, #32
 80028dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6859      	ldr	r1, [r3, #4]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002918 <HAL_I2C_Mem_Read+0x230>)
 80028ea:	400b      	ands	r3, r1
 80028ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2220      	movs	r2, #32
 80028f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	e000      	b.n	800290c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800290a:	2302      	movs	r3, #2
  }
}
 800290c:	4618      	mov	r0, r3
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	80002400 	.word	0x80002400
 8002918:	fe00e800 	.word	0xfe00e800

0800291c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af02      	add	r7, sp, #8
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	4608      	mov	r0, r1
 8002926:	4611      	mov	r1, r2
 8002928:	461a      	mov	r2, r3
 800292a:	4603      	mov	r3, r0
 800292c:	817b      	strh	r3, [r7, #10]
 800292e:	460b      	mov	r3, r1
 8002930:	813b      	strh	r3, [r7, #8]
 8002932:	4613      	mov	r3, r2
 8002934:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002936:	88fb      	ldrh	r3, [r7, #6]
 8002938:	b2da      	uxtb	r2, r3
 800293a:	8979      	ldrh	r1, [r7, #10]
 800293c:	4b20      	ldr	r3, [pc, #128]	@ (80029c0 <I2C_RequestMemoryWrite+0xa4>)
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 fa79 	bl	8002e3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800294a:	69fa      	ldr	r2, [r7, #28]
 800294c:	69b9      	ldr	r1, [r7, #24]
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 f909 	bl	8002b66 <I2C_WaitOnTXISFlagUntilTimeout>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e02c      	b.n	80029b8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800295e:	88fb      	ldrh	r3, [r7, #6]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d105      	bne.n	8002970 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002964:	893b      	ldrh	r3, [r7, #8]
 8002966:	b2da      	uxtb	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	629a      	str	r2, [r3, #40]	@ 0x28
 800296e:	e015      	b.n	800299c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002970:	893b      	ldrh	r3, [r7, #8]
 8002972:	0a1b      	lsrs	r3, r3, #8
 8002974:	b29b      	uxth	r3, r3
 8002976:	b2da      	uxtb	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800297e:	69fa      	ldr	r2, [r7, #28]
 8002980:	69b9      	ldr	r1, [r7, #24]
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 f8ef 	bl	8002b66 <I2C_WaitOnTXISFlagUntilTimeout>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e012      	b.n	80029b8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002992:	893b      	ldrh	r3, [r7, #8]
 8002994:	b2da      	uxtb	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	2200      	movs	r2, #0
 80029a4:	2180      	movs	r1, #128	@ 0x80
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 f884 	bl	8002ab4 <I2C_WaitOnFlagUntilTimeout>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	80002000 	.word	0x80002000

080029c4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	4608      	mov	r0, r1
 80029ce:	4611      	mov	r1, r2
 80029d0:	461a      	mov	r2, r3
 80029d2:	4603      	mov	r3, r0
 80029d4:	817b      	strh	r3, [r7, #10]
 80029d6:	460b      	mov	r3, r1
 80029d8:	813b      	strh	r3, [r7, #8]
 80029da:	4613      	mov	r3, r2
 80029dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80029de:	88fb      	ldrh	r3, [r7, #6]
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	8979      	ldrh	r1, [r7, #10]
 80029e4:	4b20      	ldr	r3, [pc, #128]	@ (8002a68 <I2C_RequestMemoryRead+0xa4>)
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	2300      	movs	r3, #0
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 fa26 	bl	8002e3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029f0:	69fa      	ldr	r2, [r7, #28]
 80029f2:	69b9      	ldr	r1, [r7, #24]
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 f8b6 	bl	8002b66 <I2C_WaitOnTXISFlagUntilTimeout>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e02c      	b.n	8002a5e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a04:	88fb      	ldrh	r3, [r7, #6]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d105      	bne.n	8002a16 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a0a:	893b      	ldrh	r3, [r7, #8]
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a14:	e015      	b.n	8002a42 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a16:	893b      	ldrh	r3, [r7, #8]
 8002a18:	0a1b      	lsrs	r3, r3, #8
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a24:	69fa      	ldr	r2, [r7, #28]
 8002a26:	69b9      	ldr	r1, [r7, #24]
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f000 f89c 	bl	8002b66 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e012      	b.n	8002a5e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a38:	893b      	ldrh	r3, [r7, #8]
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	2140      	movs	r1, #64	@ 0x40
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 f831 	bl	8002ab4 <I2C_WaitOnFlagUntilTimeout>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	80002000 	.word	0x80002000

08002a6c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d103      	bne.n	8002a8a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2200      	movs	r2, #0
 8002a88:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d007      	beq.n	8002aa8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	699a      	ldr	r2, [r3, #24]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0201 	orr.w	r2, r2, #1
 8002aa6:	619a      	str	r2, [r3, #24]
  }
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	603b      	str	r3, [r7, #0]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ac4:	e03b      	b.n	8002b3e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	6839      	ldr	r1, [r7, #0]
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 f8d6 	bl	8002c7c <I2C_IsErrorOccurred>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e041      	b.n	8002b5e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae0:	d02d      	beq.n	8002b3e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ae2:	f7ff f9b9 	bl	8001e58 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d302      	bcc.n	8002af8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d122      	bne.n	8002b3e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699a      	ldr	r2, [r3, #24]
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	4013      	ands	r3, r2
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	bf0c      	ite	eq
 8002b08:	2301      	moveq	r3, #1
 8002b0a:	2300      	movne	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	461a      	mov	r2, r3
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d113      	bne.n	8002b3e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1a:	f043 0220 	orr.w	r2, r3, #32
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2220      	movs	r2, #32
 8002b26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e00f      	b.n	8002b5e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	699a      	ldr	r2, [r3, #24]
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	4013      	ands	r3, r2
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	bf0c      	ite	eq
 8002b4e:	2301      	moveq	r3, #1
 8002b50:	2300      	movne	r3, #0
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	461a      	mov	r2, r3
 8002b56:	79fb      	ldrb	r3, [r7, #7]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d0b4      	beq.n	8002ac6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b084      	sub	sp, #16
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b72:	e033      	b.n	8002bdc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	68b9      	ldr	r1, [r7, #8]
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 f87f 	bl	8002c7c <I2C_IsErrorOccurred>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e031      	b.n	8002bec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8e:	d025      	beq.n	8002bdc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b90:	f7ff f962 	bl	8001e58 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d302      	bcc.n	8002ba6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d11a      	bne.n	8002bdc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d013      	beq.n	8002bdc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb8:	f043 0220 	orr.w	r2, r3, #32
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e007      	b.n	8002bec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d1c4      	bne.n	8002b74 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c00:	e02f      	b.n	8002c62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	68b9      	ldr	r1, [r7, #8]
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 f838 	bl	8002c7c <I2C_IsErrorOccurred>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e02d      	b.n	8002c72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c16:	f7ff f91f 	bl	8001e58 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d302      	bcc.n	8002c2c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d11a      	bne.n	8002c62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	f003 0320 	and.w	r3, r3, #32
 8002c36:	2b20      	cmp	r3, #32
 8002c38:	d013      	beq.n	8002c62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c3e:	f043 0220 	orr.w	r2, r3, #32
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e007      	b.n	8002c72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	f003 0320 	and.w	r3, r3, #32
 8002c6c:	2b20      	cmp	r3, #32
 8002c6e:	d1c8      	bne.n	8002c02 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
	...

08002c7c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b08a      	sub	sp, #40	@ 0x28
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c96:	2300      	movs	r3, #0
 8002c98:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	f003 0310 	and.w	r3, r3, #16
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d068      	beq.n	8002d7a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2210      	movs	r2, #16
 8002cae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cb0:	e049      	b.n	8002d46 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb8:	d045      	beq.n	8002d46 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002cba:	f7ff f8cd 	bl	8001e58 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d302      	bcc.n	8002cd0 <I2C_IsErrorOccurred+0x54>
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d13a      	bne.n	8002d46 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cda:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ce2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cf2:	d121      	bne.n	8002d38 <I2C_IsErrorOccurred+0xbc>
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cfa:	d01d      	beq.n	8002d38 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002cfc:	7cfb      	ldrb	r3, [r7, #19]
 8002cfe:	2b20      	cmp	r3, #32
 8002d00:	d01a      	beq.n	8002d38 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d10:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d12:	f7ff f8a1 	bl	8001e58 <HAL_GetTick>
 8002d16:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d18:	e00e      	b.n	8002d38 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d1a:	f7ff f89d 	bl	8001e58 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b19      	cmp	r3, #25
 8002d26:	d907      	bls.n	8002d38 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	f043 0320 	orr.w	r3, r3, #32
 8002d2e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002d36:	e006      	b.n	8002d46 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	f003 0320 	and.w	r3, r3, #32
 8002d42:	2b20      	cmp	r3, #32
 8002d44:	d1e9      	bne.n	8002d1a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	f003 0320 	and.w	r3, r3, #32
 8002d50:	2b20      	cmp	r3, #32
 8002d52:	d003      	beq.n	8002d5c <I2C_IsErrorOccurred+0xe0>
 8002d54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0aa      	beq.n	8002cb2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d103      	bne.n	8002d6c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2220      	movs	r2, #32
 8002d6a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	f043 0304 	orr.w	r3, r3, #4
 8002d72:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00b      	beq.n	8002da4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00b      	beq.n	8002dc6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	f043 0308 	orr.w	r3, r3, #8
 8002db4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002dbe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00b      	beq.n	8002de8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002dd0:	6a3b      	ldr	r3, [r7, #32]
 8002dd2:	f043 0302 	orr.w	r3, r3, #2
 8002dd6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002de0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002de8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d01c      	beq.n	8002e2a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f7ff fe3b 	bl	8002a6c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6859      	ldr	r1, [r3, #4]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	4b0d      	ldr	r3, [pc, #52]	@ (8002e38 <I2C_IsErrorOccurred+0x1bc>)
 8002e02:	400b      	ands	r3, r1
 8002e04:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2220      	movs	r2, #32
 8002e16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002e2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3728      	adds	r7, #40	@ 0x28
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	fe00e800 	.word	0xfe00e800

08002e3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	607b      	str	r3, [r7, #4]
 8002e46:	460b      	mov	r3, r1
 8002e48:	817b      	strh	r3, [r7, #10]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e4e:	897b      	ldrh	r3, [r7, #10]
 8002e50:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e54:	7a7b      	ldrb	r3, [r7, #9]
 8002e56:	041b      	lsls	r3, r3, #16
 8002e58:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e5c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e6a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	0d5b      	lsrs	r3, r3, #21
 8002e76:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002e7a:	4b08      	ldr	r3, [pc, #32]	@ (8002e9c <I2C_TransferConfig+0x60>)
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	ea02 0103 	and.w	r1, r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e8e:	bf00      	nop
 8002e90:	371c      	adds	r7, #28
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	03ff63ff 	.word	0x03ff63ff

08002ea0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b20      	cmp	r3, #32
 8002eb4:	d138      	bne.n	8002f28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d101      	bne.n	8002ec4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	e032      	b.n	8002f2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2224      	movs	r2, #36	@ 0x24
 8002ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0201 	bic.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002ef2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6819      	ldr	r1, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0201 	orr.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f24:	2300      	movs	r3, #0
 8002f26:	e000      	b.n	8002f2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f28:	2302      	movs	r3, #2
  }
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b085      	sub	sp, #20
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
 8002f3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b20      	cmp	r3, #32
 8002f4a:	d139      	bne.n	8002fc0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d101      	bne.n	8002f5a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f56:	2302      	movs	r3, #2
 8002f58:	e033      	b.n	8002fc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2224      	movs	r2, #36	@ 0x24
 8002f66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0201 	bic.w	r2, r2, #1
 8002f78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002f88:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	021b      	lsls	r3, r3, #8
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0201 	orr.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	e000      	b.n	8002fc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002fc0:	2302      	movs	r3, #2
  }
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
	...

08002fd0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002fd4:	4b04      	ldr	r3, [pc, #16]	@ (8002fe8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40007000 	.word	0x40007000

08002fec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ffa:	d130      	bne.n	800305e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ffc:	4b23      	ldr	r3, [pc, #140]	@ (800308c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003008:	d038      	beq.n	800307c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800300a:	4b20      	ldr	r3, [pc, #128]	@ (800308c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003012:	4a1e      	ldr	r2, [pc, #120]	@ (800308c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003014:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003018:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800301a:	4b1d      	ldr	r3, [pc, #116]	@ (8003090 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2232      	movs	r2, #50	@ 0x32
 8003020:	fb02 f303 	mul.w	r3, r2, r3
 8003024:	4a1b      	ldr	r2, [pc, #108]	@ (8003094 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003026:	fba2 2303 	umull	r2, r3, r2, r3
 800302a:	0c9b      	lsrs	r3, r3, #18
 800302c:	3301      	adds	r3, #1
 800302e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003030:	e002      	b.n	8003038 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	3b01      	subs	r3, #1
 8003036:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003038:	4b14      	ldr	r3, [pc, #80]	@ (800308c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003040:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003044:	d102      	bne.n	800304c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1f2      	bne.n	8003032 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800304c:	4b0f      	ldr	r3, [pc, #60]	@ (800308c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003054:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003058:	d110      	bne.n	800307c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e00f      	b.n	800307e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800305e:	4b0b      	ldr	r3, [pc, #44]	@ (800308c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003066:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800306a:	d007      	beq.n	800307c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800306c:	4b07      	ldr	r3, [pc, #28]	@ (800308c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003074:	4a05      	ldr	r2, [pc, #20]	@ (800308c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003076:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800307a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40007000 	.word	0x40007000
 8003090:	2000000c 	.word	0x2000000c
 8003094:	431bde83 	.word	0x431bde83

08003098 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d102      	bne.n	80030ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	f000 bc02 	b.w	80038b0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030ac:	4b96      	ldr	r3, [pc, #600]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f003 030c 	and.w	r3, r3, #12
 80030b4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030b6:	4b94      	ldr	r3, [pc, #592]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0310 	and.w	r3, r3, #16
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 80e4 	beq.w	8003296 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d007      	beq.n	80030e4 <HAL_RCC_OscConfig+0x4c>
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	2b0c      	cmp	r3, #12
 80030d8:	f040 808b 	bne.w	80031f2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	f040 8087 	bne.w	80031f2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030e4:	4b88      	ldr	r3, [pc, #544]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <HAL_RCC_OscConfig+0x64>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e3d9      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1a      	ldr	r2, [r3, #32]
 8003100:	4b81      	ldr	r3, [pc, #516]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b00      	cmp	r3, #0
 800310a:	d004      	beq.n	8003116 <HAL_RCC_OscConfig+0x7e>
 800310c:	4b7e      	ldr	r3, [pc, #504]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003114:	e005      	b.n	8003122 <HAL_RCC_OscConfig+0x8a>
 8003116:	4b7c      	ldr	r3, [pc, #496]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003118:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800311c:	091b      	lsrs	r3, r3, #4
 800311e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003122:	4293      	cmp	r3, r2
 8003124:	d223      	bcs.n	800316e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	4618      	mov	r0, r3
 800312c:	f000 fd8c 	bl	8003c48 <RCC_SetFlashLatencyFromMSIRange>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e3ba      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800313a:	4b73      	ldr	r3, [pc, #460]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a72      	ldr	r2, [pc, #456]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003140:	f043 0308 	orr.w	r3, r3, #8
 8003144:	6013      	str	r3, [r2, #0]
 8003146:	4b70      	ldr	r3, [pc, #448]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	496d      	ldr	r1, [pc, #436]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003154:	4313      	orrs	r3, r2
 8003156:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003158:	4b6b      	ldr	r3, [pc, #428]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	021b      	lsls	r3, r3, #8
 8003166:	4968      	ldr	r1, [pc, #416]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003168:	4313      	orrs	r3, r2
 800316a:	604b      	str	r3, [r1, #4]
 800316c:	e025      	b.n	80031ba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800316e:	4b66      	ldr	r3, [pc, #408]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a65      	ldr	r2, [pc, #404]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003174:	f043 0308 	orr.w	r3, r3, #8
 8003178:	6013      	str	r3, [r2, #0]
 800317a:	4b63      	ldr	r3, [pc, #396]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	4960      	ldr	r1, [pc, #384]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003188:	4313      	orrs	r3, r2
 800318a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800318c:	4b5e      	ldr	r3, [pc, #376]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	021b      	lsls	r3, r3, #8
 800319a:	495b      	ldr	r1, [pc, #364]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 800319c:	4313      	orrs	r3, r2
 800319e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d109      	bne.n	80031ba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 fd4c 	bl	8003c48 <RCC_SetFlashLatencyFromMSIRange>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e37a      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031ba:	f000 fc81 	bl	8003ac0 <HAL_RCC_GetSysClockFreq>
 80031be:	4602      	mov	r2, r0
 80031c0:	4b51      	ldr	r3, [pc, #324]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	091b      	lsrs	r3, r3, #4
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	4950      	ldr	r1, [pc, #320]	@ (800330c <HAL_RCC_OscConfig+0x274>)
 80031cc:	5ccb      	ldrb	r3, [r1, r3]
 80031ce:	f003 031f 	and.w	r3, r3, #31
 80031d2:	fa22 f303 	lsr.w	r3, r2, r3
 80031d6:	4a4e      	ldr	r2, [pc, #312]	@ (8003310 <HAL_RCC_OscConfig+0x278>)
 80031d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80031da:	4b4e      	ldr	r3, [pc, #312]	@ (8003314 <HAL_RCC_OscConfig+0x27c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fe fdea 	bl	8001db8 <HAL_InitTick>
 80031e4:	4603      	mov	r3, r0
 80031e6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d052      	beq.n	8003294 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80031ee:	7bfb      	ldrb	r3, [r7, #15]
 80031f0:	e35e      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d032      	beq.n	8003260 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031fa:	4b43      	ldr	r3, [pc, #268]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a42      	ldr	r2, [pc, #264]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003200:	f043 0301 	orr.w	r3, r3, #1
 8003204:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003206:	f7fe fe27 	bl	8001e58 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800320c:	e008      	b.n	8003220 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800320e:	f7fe fe23 	bl	8001e58 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e347      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003220:	4b39      	ldr	r3, [pc, #228]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0f0      	beq.n	800320e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800322c:	4b36      	ldr	r3, [pc, #216]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a35      	ldr	r2, [pc, #212]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003232:	f043 0308 	orr.w	r3, r3, #8
 8003236:	6013      	str	r3, [r2, #0]
 8003238:	4b33      	ldr	r3, [pc, #204]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	4930      	ldr	r1, [pc, #192]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003246:	4313      	orrs	r3, r2
 8003248:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800324a:	4b2f      	ldr	r3, [pc, #188]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	021b      	lsls	r3, r3, #8
 8003258:	492b      	ldr	r1, [pc, #172]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 800325a:	4313      	orrs	r3, r2
 800325c:	604b      	str	r3, [r1, #4]
 800325e:	e01a      	b.n	8003296 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003260:	4b29      	ldr	r3, [pc, #164]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a28      	ldr	r2, [pc, #160]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003266:	f023 0301 	bic.w	r3, r3, #1
 800326a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800326c:	f7fe fdf4 	bl	8001e58 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003274:	f7fe fdf0 	bl	8001e58 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e314      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003286:	4b20      	ldr	r3, [pc, #128]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0x1dc>
 8003292:	e000      	b.n	8003296 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003294:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d073      	beq.n	800338a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d005      	beq.n	80032b4 <HAL_RCC_OscConfig+0x21c>
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	2b0c      	cmp	r3, #12
 80032ac:	d10e      	bne.n	80032cc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2b03      	cmp	r3, #3
 80032b2:	d10b      	bne.n	80032cc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b4:	4b14      	ldr	r3, [pc, #80]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d063      	beq.n	8003388 <HAL_RCC_OscConfig+0x2f0>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d15f      	bne.n	8003388 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e2f1      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032d4:	d106      	bne.n	80032e4 <HAL_RCC_OscConfig+0x24c>
 80032d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a0b      	ldr	r2, [pc, #44]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 80032dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	e025      	b.n	8003330 <HAL_RCC_OscConfig+0x298>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032ec:	d114      	bne.n	8003318 <HAL_RCC_OscConfig+0x280>
 80032ee:	4b06      	ldr	r3, [pc, #24]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a05      	ldr	r2, [pc, #20]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 80032f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	4b03      	ldr	r3, [pc, #12]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a02      	ldr	r2, [pc, #8]	@ (8003308 <HAL_RCC_OscConfig+0x270>)
 8003300:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	e013      	b.n	8003330 <HAL_RCC_OscConfig+0x298>
 8003308:	40021000 	.word	0x40021000
 800330c:	08007b44 	.word	0x08007b44
 8003310:	2000000c 	.word	0x2000000c
 8003314:	20000010 	.word	0x20000010
 8003318:	4ba0      	ldr	r3, [pc, #640]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a9f      	ldr	r2, [pc, #636]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 800331e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	4b9d      	ldr	r3, [pc, #628]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a9c      	ldr	r2, [pc, #624]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 800332a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800332e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d013      	beq.n	8003360 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003338:	f7fe fd8e 	bl	8001e58 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003340:	f7fe fd8a 	bl	8001e58 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b64      	cmp	r3, #100	@ 0x64
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e2ae      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003352:	4b92      	ldr	r3, [pc, #584]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCC_OscConfig+0x2a8>
 800335e:	e014      	b.n	800338a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003360:	f7fe fd7a 	bl	8001e58 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003368:	f7fe fd76 	bl	8001e58 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b64      	cmp	r3, #100	@ 0x64
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e29a      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800337a:	4b88      	ldr	r3, [pc, #544]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0x2d0>
 8003386:	e000      	b.n	800338a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d060      	beq.n	8003458 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	2b04      	cmp	r3, #4
 800339a:	d005      	beq.n	80033a8 <HAL_RCC_OscConfig+0x310>
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	2b0c      	cmp	r3, #12
 80033a0:	d119      	bne.n	80033d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d116      	bne.n	80033d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033a8:	4b7c      	ldr	r3, [pc, #496]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <HAL_RCC_OscConfig+0x328>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e277      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c0:	4b76      	ldr	r3, [pc, #472]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	061b      	lsls	r3, r3, #24
 80033ce:	4973      	ldr	r1, [pc, #460]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033d4:	e040      	b.n	8003458 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d023      	beq.n	8003426 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033de:	4b6f      	ldr	r3, [pc, #444]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a6e      	ldr	r2, [pc, #440]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 80033e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ea:	f7fe fd35 	bl	8001e58 <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f2:	f7fe fd31 	bl	8001e58 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e255      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003404:	4b65      	ldr	r3, [pc, #404]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0f0      	beq.n	80033f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003410:	4b62      	ldr	r3, [pc, #392]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	061b      	lsls	r3, r3, #24
 800341e:	495f      	ldr	r1, [pc, #380]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003420:	4313      	orrs	r3, r2
 8003422:	604b      	str	r3, [r1, #4]
 8003424:	e018      	b.n	8003458 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003426:	4b5d      	ldr	r3, [pc, #372]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a5c      	ldr	r2, [pc, #368]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 800342c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003430:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003432:	f7fe fd11 	bl	8001e58 <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003438:	e008      	b.n	800344c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800343a:	f7fe fd0d 	bl	8001e58 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d901      	bls.n	800344c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e231      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800344c:	4b53      	ldr	r3, [pc, #332]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1f0      	bne.n	800343a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0308 	and.w	r3, r3, #8
 8003460:	2b00      	cmp	r3, #0
 8003462:	d03c      	beq.n	80034de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d01c      	beq.n	80034a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800346c:	4b4b      	ldr	r3, [pc, #300]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 800346e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003472:	4a4a      	ldr	r2, [pc, #296]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003474:	f043 0301 	orr.w	r3, r3, #1
 8003478:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347c:	f7fe fcec 	bl	8001e58 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003484:	f7fe fce8 	bl	8001e58 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e20c      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003496:	4b41      	ldr	r3, [pc, #260]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003498:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0ef      	beq.n	8003484 <HAL_RCC_OscConfig+0x3ec>
 80034a4:	e01b      	b.n	80034de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034a6:	4b3d      	ldr	r3, [pc, #244]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 80034a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034ac:	4a3b      	ldr	r2, [pc, #236]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 80034ae:	f023 0301 	bic.w	r3, r3, #1
 80034b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b6:	f7fe fccf 	bl	8001e58 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034be:	f7fe fccb 	bl	8001e58 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e1ef      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034d0:	4b32      	ldr	r3, [pc, #200]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 80034d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1ef      	bne.n	80034be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0304 	and.w	r3, r3, #4
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 80a6 	beq.w	8003638 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ec:	2300      	movs	r3, #0
 80034ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80034f0:	4b2a      	ldr	r3, [pc, #168]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 80034f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10d      	bne.n	8003518 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034fc:	4b27      	ldr	r3, [pc, #156]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 80034fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003500:	4a26      	ldr	r2, [pc, #152]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003502:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003506:	6593      	str	r3, [r2, #88]	@ 0x58
 8003508:	4b24      	ldr	r3, [pc, #144]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 800350a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800350c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003510:	60bb      	str	r3, [r7, #8]
 8003512:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003514:	2301      	movs	r3, #1
 8003516:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003518:	4b21      	ldr	r3, [pc, #132]	@ (80035a0 <HAL_RCC_OscConfig+0x508>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003520:	2b00      	cmp	r3, #0
 8003522:	d118      	bne.n	8003556 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003524:	4b1e      	ldr	r3, [pc, #120]	@ (80035a0 <HAL_RCC_OscConfig+0x508>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a1d      	ldr	r2, [pc, #116]	@ (80035a0 <HAL_RCC_OscConfig+0x508>)
 800352a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800352e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003530:	f7fe fc92 	bl	8001e58 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003538:	f7fe fc8e 	bl	8001e58 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e1b2      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800354a:	4b15      	ldr	r3, [pc, #84]	@ (80035a0 <HAL_RCC_OscConfig+0x508>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0f0      	beq.n	8003538 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d108      	bne.n	8003570 <HAL_RCC_OscConfig+0x4d8>
 800355e:	4b0f      	ldr	r3, [pc, #60]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003560:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003564:	4a0d      	ldr	r2, [pc, #52]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003566:	f043 0301 	orr.w	r3, r3, #1
 800356a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800356e:	e029      	b.n	80035c4 <HAL_RCC_OscConfig+0x52c>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2b05      	cmp	r3, #5
 8003576:	d115      	bne.n	80035a4 <HAL_RCC_OscConfig+0x50c>
 8003578:	4b08      	ldr	r3, [pc, #32]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 800357a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800357e:	4a07      	ldr	r2, [pc, #28]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003580:	f043 0304 	orr.w	r3, r3, #4
 8003584:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003588:	4b04      	ldr	r3, [pc, #16]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 800358a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800358e:	4a03      	ldr	r2, [pc, #12]	@ (800359c <HAL_RCC_OscConfig+0x504>)
 8003590:	f043 0301 	orr.w	r3, r3, #1
 8003594:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003598:	e014      	b.n	80035c4 <HAL_RCC_OscConfig+0x52c>
 800359a:	bf00      	nop
 800359c:	40021000 	.word	0x40021000
 80035a0:	40007000 	.word	0x40007000
 80035a4:	4b9a      	ldr	r3, [pc, #616]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 80035a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035aa:	4a99      	ldr	r2, [pc, #612]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 80035ac:	f023 0301 	bic.w	r3, r3, #1
 80035b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035b4:	4b96      	ldr	r3, [pc, #600]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 80035b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ba:	4a95      	ldr	r2, [pc, #596]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 80035bc:	f023 0304 	bic.w	r3, r3, #4
 80035c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d016      	beq.n	80035fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035cc:	f7fe fc44 	bl	8001e58 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035d2:	e00a      	b.n	80035ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035d4:	f7fe fc40 	bl	8001e58 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e162      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035ea:	4b89      	ldr	r3, [pc, #548]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 80035ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0ed      	beq.n	80035d4 <HAL_RCC_OscConfig+0x53c>
 80035f8:	e015      	b.n	8003626 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035fa:	f7fe fc2d 	bl	8001e58 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003600:	e00a      	b.n	8003618 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003602:	f7fe fc29 	bl	8001e58 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003610:	4293      	cmp	r3, r2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e14b      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003618:	4b7d      	ldr	r3, [pc, #500]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 800361a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1ed      	bne.n	8003602 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003626:	7ffb      	ldrb	r3, [r7, #31]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d105      	bne.n	8003638 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800362c:	4b78      	ldr	r3, [pc, #480]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 800362e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003630:	4a77      	ldr	r2, [pc, #476]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 8003632:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003636:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0320 	and.w	r3, r3, #32
 8003640:	2b00      	cmp	r3, #0
 8003642:	d03c      	beq.n	80036be <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003648:	2b00      	cmp	r3, #0
 800364a:	d01c      	beq.n	8003686 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800364c:	4b70      	ldr	r3, [pc, #448]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 800364e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003652:	4a6f      	ldr	r2, [pc, #444]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 8003654:	f043 0301 	orr.w	r3, r3, #1
 8003658:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800365c:	f7fe fbfc 	bl	8001e58 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003664:	f7fe fbf8 	bl	8001e58 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e11c      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003676:	4b66      	ldr	r3, [pc, #408]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 8003678:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0ef      	beq.n	8003664 <HAL_RCC_OscConfig+0x5cc>
 8003684:	e01b      	b.n	80036be <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003686:	4b62      	ldr	r3, [pc, #392]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 8003688:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800368c:	4a60      	ldr	r2, [pc, #384]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 800368e:	f023 0301 	bic.w	r3, r3, #1
 8003692:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003696:	f7fe fbdf 	bl	8001e58 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800369e:	f7fe fbdb 	bl	8001e58 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e0ff      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036b0:	4b57      	ldr	r3, [pc, #348]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 80036b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1ef      	bne.n	800369e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 80f3 	beq.w	80038ae <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	f040 80c9 	bne.w	8003864 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80036d2:	4b4f      	ldr	r3, [pc, #316]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f003 0203 	and.w	r2, r3, #3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d12c      	bne.n	8003740 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f0:	3b01      	subs	r3, #1
 80036f2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d123      	bne.n	8003740 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003702:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003704:	429a      	cmp	r2, r3
 8003706:	d11b      	bne.n	8003740 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003712:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003714:	429a      	cmp	r2, r3
 8003716:	d113      	bne.n	8003740 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003722:	085b      	lsrs	r3, r3, #1
 8003724:	3b01      	subs	r3, #1
 8003726:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003728:	429a      	cmp	r2, r3
 800372a:	d109      	bne.n	8003740 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003736:	085b      	lsrs	r3, r3, #1
 8003738:	3b01      	subs	r3, #1
 800373a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800373c:	429a      	cmp	r2, r3
 800373e:	d06b      	beq.n	8003818 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	2b0c      	cmp	r3, #12
 8003744:	d062      	beq.n	800380c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003746:	4b32      	ldr	r3, [pc, #200]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e0ac      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003756:	4b2e      	ldr	r3, [pc, #184]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a2d      	ldr	r2, [pc, #180]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 800375c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003760:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003762:	f7fe fb79 	bl	8001e58 <HAL_GetTick>
 8003766:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003768:	e008      	b.n	800377c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800376a:	f7fe fb75 	bl	8001e58 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e099      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800377c:	4b24      	ldr	r3, [pc, #144]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1f0      	bne.n	800376a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003788:	4b21      	ldr	r3, [pc, #132]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	4b21      	ldr	r3, [pc, #132]	@ (8003814 <HAL_RCC_OscConfig+0x77c>)
 800378e:	4013      	ands	r3, r2
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003798:	3a01      	subs	r2, #1
 800379a:	0112      	lsls	r2, r2, #4
 800379c:	4311      	orrs	r1, r2
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80037a2:	0212      	lsls	r2, r2, #8
 80037a4:	4311      	orrs	r1, r2
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80037aa:	0852      	lsrs	r2, r2, #1
 80037ac:	3a01      	subs	r2, #1
 80037ae:	0552      	lsls	r2, r2, #21
 80037b0:	4311      	orrs	r1, r2
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80037b6:	0852      	lsrs	r2, r2, #1
 80037b8:	3a01      	subs	r2, #1
 80037ba:	0652      	lsls	r2, r2, #25
 80037bc:	4311      	orrs	r1, r2
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80037c2:	06d2      	lsls	r2, r2, #27
 80037c4:	430a      	orrs	r2, r1
 80037c6:	4912      	ldr	r1, [pc, #72]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80037cc:	4b10      	ldr	r3, [pc, #64]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a0f      	ldr	r2, [pc, #60]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 80037d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	4a0c      	ldr	r2, [pc, #48]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 80037de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037e4:	f7fe fb38 	bl	8001e58 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ec:	f7fe fb34 	bl	8001e58 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e058      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037fe:	4b04      	ldr	r3, [pc, #16]	@ (8003810 <HAL_RCC_OscConfig+0x778>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0f0      	beq.n	80037ec <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800380a:	e050      	b.n	80038ae <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e04f      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
 8003810:	40021000 	.word	0x40021000
 8003814:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003818:	4b27      	ldr	r3, [pc, #156]	@ (80038b8 <HAL_RCC_OscConfig+0x820>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d144      	bne.n	80038ae <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003824:	4b24      	ldr	r3, [pc, #144]	@ (80038b8 <HAL_RCC_OscConfig+0x820>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a23      	ldr	r2, [pc, #140]	@ (80038b8 <HAL_RCC_OscConfig+0x820>)
 800382a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800382e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003830:	4b21      	ldr	r3, [pc, #132]	@ (80038b8 <HAL_RCC_OscConfig+0x820>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	4a20      	ldr	r2, [pc, #128]	@ (80038b8 <HAL_RCC_OscConfig+0x820>)
 8003836:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800383a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800383c:	f7fe fb0c 	bl	8001e58 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003844:	f7fe fb08 	bl	8001e58 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e02c      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003856:	4b18      	ldr	r3, [pc, #96]	@ (80038b8 <HAL_RCC_OscConfig+0x820>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0f0      	beq.n	8003844 <HAL_RCC_OscConfig+0x7ac>
 8003862:	e024      	b.n	80038ae <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	2b0c      	cmp	r3, #12
 8003868:	d01f      	beq.n	80038aa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800386a:	4b13      	ldr	r3, [pc, #76]	@ (80038b8 <HAL_RCC_OscConfig+0x820>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a12      	ldr	r2, [pc, #72]	@ (80038b8 <HAL_RCC_OscConfig+0x820>)
 8003870:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003876:	f7fe faef 	bl	8001e58 <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800387c:	e008      	b.n	8003890 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800387e:	f7fe faeb 	bl	8001e58 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e00f      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003890:	4b09      	ldr	r3, [pc, #36]	@ (80038b8 <HAL_RCC_OscConfig+0x820>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1f0      	bne.n	800387e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800389c:	4b06      	ldr	r3, [pc, #24]	@ (80038b8 <HAL_RCC_OscConfig+0x820>)
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	4905      	ldr	r1, [pc, #20]	@ (80038b8 <HAL_RCC_OscConfig+0x820>)
 80038a2:	4b06      	ldr	r3, [pc, #24]	@ (80038bc <HAL_RCC_OscConfig+0x824>)
 80038a4:	4013      	ands	r3, r2
 80038a6:	60cb      	str	r3, [r1, #12]
 80038a8:	e001      	b.n	80038ae <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e000      	b.n	80038b0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3720      	adds	r7, #32
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40021000 	.word	0x40021000
 80038bc:	feeefffc 	.word	0xfeeefffc

080038c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e0e7      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038d4:	4b75      	ldr	r3, [pc, #468]	@ (8003aac <HAL_RCC_ClockConfig+0x1ec>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d910      	bls.n	8003904 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e2:	4b72      	ldr	r3, [pc, #456]	@ (8003aac <HAL_RCC_ClockConfig+0x1ec>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f023 0207 	bic.w	r2, r3, #7
 80038ea:	4970      	ldr	r1, [pc, #448]	@ (8003aac <HAL_RCC_ClockConfig+0x1ec>)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f2:	4b6e      	ldr	r3, [pc, #440]	@ (8003aac <HAL_RCC_ClockConfig+0x1ec>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d001      	beq.n	8003904 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e0cf      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d010      	beq.n	8003932 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	4b66      	ldr	r3, [pc, #408]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800391c:	429a      	cmp	r2, r3
 800391e:	d908      	bls.n	8003932 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003920:	4b63      	ldr	r3, [pc, #396]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	4960      	ldr	r1, [pc, #384]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 800392e:	4313      	orrs	r3, r2
 8003930:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d04c      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b03      	cmp	r3, #3
 8003944:	d107      	bne.n	8003956 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003946:	4b5a      	ldr	r3, [pc, #360]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d121      	bne.n	8003996 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e0a6      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b02      	cmp	r3, #2
 800395c:	d107      	bne.n	800396e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800395e:	4b54      	ldr	r3, [pc, #336]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d115      	bne.n	8003996 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e09a      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d107      	bne.n	8003986 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003976:	4b4e      	ldr	r3, [pc, #312]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d109      	bne.n	8003996 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e08e      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003986:	4b4a      	ldr	r3, [pc, #296]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e086      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003996:	4b46      	ldr	r3, [pc, #280]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f023 0203 	bic.w	r2, r3, #3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	4943      	ldr	r1, [pc, #268]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039a8:	f7fe fa56 	bl	8001e58 <HAL_GetTick>
 80039ac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ae:	e00a      	b.n	80039c6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b0:	f7fe fa52 	bl	8001e58 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039be:	4293      	cmp	r3, r2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e06e      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c6:	4b3a      	ldr	r3, [pc, #232]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 020c 	and.w	r2, r3, #12
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d1eb      	bne.n	80039b0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d010      	beq.n	8003a06 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	4b31      	ldr	r3, [pc, #196]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d208      	bcs.n	8003a06 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f4:	4b2e      	ldr	r3, [pc, #184]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	492b      	ldr	r1, [pc, #172]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a06:	4b29      	ldr	r3, [pc, #164]	@ (8003aac <HAL_RCC_ClockConfig+0x1ec>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d210      	bcs.n	8003a36 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a14:	4b25      	ldr	r3, [pc, #148]	@ (8003aac <HAL_RCC_ClockConfig+0x1ec>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f023 0207 	bic.w	r2, r3, #7
 8003a1c:	4923      	ldr	r1, [pc, #140]	@ (8003aac <HAL_RCC_ClockConfig+0x1ec>)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a24:	4b21      	ldr	r3, [pc, #132]	@ (8003aac <HAL_RCC_ClockConfig+0x1ec>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d001      	beq.n	8003a36 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e036      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0304 	and.w	r3, r3, #4
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d008      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a42:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	4918      	ldr	r1, [pc, #96]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0308 	and.w	r3, r3, #8
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d009      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a60:	4b13      	ldr	r3, [pc, #76]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	4910      	ldr	r1, [pc, #64]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a74:	f000 f824 	bl	8003ac0 <HAL_RCC_GetSysClockFreq>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	091b      	lsrs	r3, r3, #4
 8003a80:	f003 030f 	and.w	r3, r3, #15
 8003a84:	490b      	ldr	r1, [pc, #44]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1f4>)
 8003a86:	5ccb      	ldrb	r3, [r1, r3]
 8003a88:	f003 031f 	and.w	r3, r3, #31
 8003a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a90:	4a09      	ldr	r2, [pc, #36]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1f8>)
 8003a92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a94:	4b09      	ldr	r3, [pc, #36]	@ (8003abc <HAL_RCC_ClockConfig+0x1fc>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fe f98d 	bl	8001db8 <HAL_InitTick>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	72fb      	strb	r3, [r7, #11]

  return status;
 8003aa2:	7afb      	ldrb	r3, [r7, #11]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40022000 	.word	0x40022000
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	08007b44 	.word	0x08007b44
 8003ab8:	2000000c 	.word	0x2000000c
 8003abc:	20000010 	.word	0x20000010

08003ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b089      	sub	sp, #36	@ 0x24
 8003ac4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61fb      	str	r3, [r7, #28]
 8003aca:	2300      	movs	r3, #0
 8003acc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ace:	4b3e      	ldr	r3, [pc, #248]	@ (8003bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 030c 	and.w	r3, r3, #12
 8003ad6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ad8:	4b3b      	ldr	r3, [pc, #236]	@ (8003bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	f003 0303 	and.w	r3, r3, #3
 8003ae0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <HAL_RCC_GetSysClockFreq+0x34>
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	2b0c      	cmp	r3, #12
 8003aec:	d121      	bne.n	8003b32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d11e      	bne.n	8003b32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003af4:	4b34      	ldr	r3, [pc, #208]	@ (8003bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0308 	and.w	r3, r3, #8
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d107      	bne.n	8003b10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b00:	4b31      	ldr	r3, [pc, #196]	@ (8003bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b06:	0a1b      	lsrs	r3, r3, #8
 8003b08:	f003 030f 	and.w	r3, r3, #15
 8003b0c:	61fb      	str	r3, [r7, #28]
 8003b0e:	e005      	b.n	8003b1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b10:	4b2d      	ldr	r3, [pc, #180]	@ (8003bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	091b      	lsrs	r3, r3, #4
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b1c:	4a2b      	ldr	r2, [pc, #172]	@ (8003bcc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10d      	bne.n	8003b48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b30:	e00a      	b.n	8003b48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	2b04      	cmp	r3, #4
 8003b36:	d102      	bne.n	8003b3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b38:	4b25      	ldr	r3, [pc, #148]	@ (8003bd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b3a:	61bb      	str	r3, [r7, #24]
 8003b3c:	e004      	b.n	8003b48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d101      	bne.n	8003b48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b44:	4b23      	ldr	r3, [pc, #140]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	2b0c      	cmp	r3, #12
 8003b4c:	d134      	bne.n	8003bb8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8003bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d003      	beq.n	8003b66 <HAL_RCC_GetSysClockFreq+0xa6>
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	2b03      	cmp	r3, #3
 8003b62:	d003      	beq.n	8003b6c <HAL_RCC_GetSysClockFreq+0xac>
 8003b64:	e005      	b.n	8003b72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b66:	4b1a      	ldr	r3, [pc, #104]	@ (8003bd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b68:	617b      	str	r3, [r7, #20]
      break;
 8003b6a:	e005      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b6c:	4b19      	ldr	r3, [pc, #100]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b6e:	617b      	str	r3, [r7, #20]
      break;
 8003b70:	e002      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	617b      	str	r3, [r7, #20]
      break;
 8003b76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b78:	4b13      	ldr	r3, [pc, #76]	@ (8003bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	091b      	lsrs	r3, r3, #4
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	3301      	adds	r3, #1
 8003b84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b86:	4b10      	ldr	r3, [pc, #64]	@ (8003bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	0a1b      	lsrs	r3, r3, #8
 8003b8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	fb03 f202 	mul.w	r2, r3, r2
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	0e5b      	lsrs	r3, r3, #25
 8003ba4:	f003 0303 	and.w	r3, r3, #3
 8003ba8:	3301      	adds	r3, #1
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003bb8:	69bb      	ldr	r3, [r7, #24]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3724      	adds	r7, #36	@ 0x24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	08007b5c 	.word	0x08007b5c
 8003bd0:	00f42400 	.word	0x00f42400
 8003bd4:	007a1200 	.word	0x007a1200

08003bd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bdc:	4b03      	ldr	r3, [pc, #12]	@ (8003bec <HAL_RCC_GetHCLKFreq+0x14>)
 8003bde:	681b      	ldr	r3, [r3, #0]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	2000000c 	.word	0x2000000c

08003bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003bf4:	f7ff fff0 	bl	8003bd8 <HAL_RCC_GetHCLKFreq>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	4b06      	ldr	r3, [pc, #24]	@ (8003c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	0a1b      	lsrs	r3, r3, #8
 8003c00:	f003 0307 	and.w	r3, r3, #7
 8003c04:	4904      	ldr	r1, [pc, #16]	@ (8003c18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c06:	5ccb      	ldrb	r3, [r1, r3]
 8003c08:	f003 031f 	and.w	r3, r3, #31
 8003c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40021000 	.word	0x40021000
 8003c18:	08007b54 	.word	0x08007b54

08003c1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c20:	f7ff ffda 	bl	8003bd8 <HAL_RCC_GetHCLKFreq>
 8003c24:	4602      	mov	r2, r0
 8003c26:	4b06      	ldr	r3, [pc, #24]	@ (8003c40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	0adb      	lsrs	r3, r3, #11
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	4904      	ldr	r1, [pc, #16]	@ (8003c44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c32:	5ccb      	ldrb	r3, [r1, r3]
 8003c34:	f003 031f 	and.w	r3, r3, #31
 8003c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40021000 	.word	0x40021000
 8003c44:	08007b54 	.word	0x08007b54

08003c48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c50:	2300      	movs	r3, #0
 8003c52:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c54:	4b2a      	ldr	r3, [pc, #168]	@ (8003d00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d003      	beq.n	8003c68 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c60:	f7ff f9b6 	bl	8002fd0 <HAL_PWREx_GetVoltageRange>
 8003c64:	6178      	str	r0, [r7, #20]
 8003c66:	e014      	b.n	8003c92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c68:	4b25      	ldr	r3, [pc, #148]	@ (8003d00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c6c:	4a24      	ldr	r2, [pc, #144]	@ (8003d00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c72:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c74:	4b22      	ldr	r3, [pc, #136]	@ (8003d00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c80:	f7ff f9a6 	bl	8002fd0 <HAL_PWREx_GetVoltageRange>
 8003c84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c86:	4b1e      	ldr	r3, [pc, #120]	@ (8003d00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c8a:	4a1d      	ldr	r2, [pc, #116]	@ (8003d00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c90:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c98:	d10b      	bne.n	8003cb2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b80      	cmp	r3, #128	@ 0x80
 8003c9e:	d919      	bls.n	8003cd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2ba0      	cmp	r3, #160	@ 0xa0
 8003ca4:	d902      	bls.n	8003cac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	613b      	str	r3, [r7, #16]
 8003caa:	e013      	b.n	8003cd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cac:	2301      	movs	r3, #1
 8003cae:	613b      	str	r3, [r7, #16]
 8003cb0:	e010      	b.n	8003cd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b80      	cmp	r3, #128	@ 0x80
 8003cb6:	d902      	bls.n	8003cbe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003cb8:	2303      	movs	r3, #3
 8003cba:	613b      	str	r3, [r7, #16]
 8003cbc:	e00a      	b.n	8003cd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b80      	cmp	r3, #128	@ 0x80
 8003cc2:	d102      	bne.n	8003cca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	613b      	str	r3, [r7, #16]
 8003cc8:	e004      	b.n	8003cd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b70      	cmp	r3, #112	@ 0x70
 8003cce:	d101      	bne.n	8003cd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003d04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f023 0207 	bic.w	r2, r3, #7
 8003cdc:	4909      	ldr	r1, [pc, #36]	@ (8003d04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ce4:	4b07      	ldr	r3, [pc, #28]	@ (8003d04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0307 	and.w	r3, r3, #7
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d001      	beq.n	8003cf6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e000      	b.n	8003cf8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3718      	adds	r7, #24
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	40021000 	.word	0x40021000
 8003d04:	40022000 	.word	0x40022000

08003d08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d10:	2300      	movs	r3, #0
 8003d12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d14:	2300      	movs	r3, #0
 8003d16:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d031      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d28:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d2c:	d01a      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003d2e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d32:	d814      	bhi.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d009      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d38:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d3c:	d10f      	bne.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003d3e:	4b5d      	ldr	r3, [pc, #372]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	4a5c      	ldr	r2, [pc, #368]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d48:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d4a:	e00c      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3304      	adds	r3, #4
 8003d50:	2100      	movs	r1, #0
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 f9ce 	bl	80040f4 <RCCEx_PLLSAI1_Config>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d5c:	e003      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	74fb      	strb	r3, [r7, #19]
      break;
 8003d62:	e000      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003d64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d66:	7cfb      	ldrb	r3, [r7, #19]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10b      	bne.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d6c:	4b51      	ldr	r3, [pc, #324]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d72:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d7a:	494e      	ldr	r1, [pc, #312]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003d82:	e001      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d84:	7cfb      	ldrb	r3, [r7, #19]
 8003d86:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 809e 	beq.w	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d96:	2300      	movs	r3, #0
 8003d98:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d9a:	4b46      	ldr	r3, [pc, #280]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003daa:	2300      	movs	r3, #0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00d      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003db0:	4b40      	ldr	r3, [pc, #256]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db4:	4a3f      	ldr	r2, [pc, #252]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003db6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dba:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dbc:	4b3d      	ldr	r3, [pc, #244]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dc4:	60bb      	str	r3, [r7, #8]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dcc:	4b3a      	ldr	r3, [pc, #232]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a39      	ldr	r2, [pc, #228]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003dd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dd8:	f7fe f83e 	bl	8001e58 <HAL_GetTick>
 8003ddc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dde:	e009      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003de0:	f7fe f83a 	bl	8001e58 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d902      	bls.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	74fb      	strb	r3, [r7, #19]
        break;
 8003df2:	e005      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003df4:	4b30      	ldr	r3, [pc, #192]	@ (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0ef      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003e00:	7cfb      	ldrb	r3, [r7, #19]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d15a      	bne.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e06:	4b2b      	ldr	r3, [pc, #172]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e10:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d01e      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d019      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e22:	4b24      	ldr	r3, [pc, #144]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e2c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e2e:	4b21      	ldr	r3, [pc, #132]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e34:	4a1f      	ldr	r2, [pc, #124]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e44:	4a1b      	ldr	r2, [pc, #108]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e4e:	4a19      	ldr	r2, [pc, #100]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d016      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e60:	f7fd fffa 	bl	8001e58 <HAL_GetTick>
 8003e64:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e66:	e00b      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e68:	f7fd fff6 	bl	8001e58 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d902      	bls.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	74fb      	strb	r3, [r7, #19]
            break;
 8003e7e:	e006      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e80:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0ec      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003e8e:	7cfb      	ldrb	r3, [r7, #19]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10b      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e94:	4b07      	ldr	r3, [pc, #28]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e9a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ea2:	4904      	ldr	r1, [pc, #16]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003eaa:	e009      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003eac:	7cfb      	ldrb	r3, [r7, #19]
 8003eae:	74bb      	strb	r3, [r7, #18]
 8003eb0:	e006      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003eb2:	bf00      	nop
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ebc:	7cfb      	ldrb	r3, [r7, #19]
 8003ebe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ec0:	7c7b      	ldrb	r3, [r7, #17]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d105      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ec6:	4b8a      	ldr	r3, [pc, #552]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eca:	4a89      	ldr	r2, [pc, #548]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ecc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ed0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ede:	4b84      	ldr	r3, [pc, #528]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee4:	f023 0203 	bic.w	r2, r3, #3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	4980      	ldr	r1, [pc, #512]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00a      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f00:	4b7b      	ldr	r3, [pc, #492]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f06:	f023 020c 	bic.w	r2, r3, #12
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0e:	4978      	ldr	r1, [pc, #480]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0320 	and.w	r3, r3, #32
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f22:	4b73      	ldr	r3, [pc, #460]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f28:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f30:	496f      	ldr	r1, [pc, #444]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00a      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f44:	4b6a      	ldr	r3, [pc, #424]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f52:	4967      	ldr	r1, [pc, #412]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00a      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f66:	4b62      	ldr	r3, [pc, #392]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f6c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f74:	495e      	ldr	r1, [pc, #376]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00a      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f88:	4b59      	ldr	r3, [pc, #356]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f8e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f96:	4956      	ldr	r1, [pc, #344]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00a      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003faa:	4b51      	ldr	r3, [pc, #324]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb8:	494d      	ldr	r1, [pc, #308]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d028      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fcc:	4b48      	ldr	r3, [pc, #288]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fda:	4945      	ldr	r1, [pc, #276]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fea:	d106      	bne.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fec:	4b40      	ldr	r3, [pc, #256]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	4a3f      	ldr	r2, [pc, #252]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ff2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ff6:	60d3      	str	r3, [r2, #12]
 8003ff8:	e011      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004002:	d10c      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3304      	adds	r3, #4
 8004008:	2101      	movs	r1, #1
 800400a:	4618      	mov	r0, r3
 800400c:	f000 f872 	bl	80040f4 <RCCEx_PLLSAI1_Config>
 8004010:	4603      	mov	r3, r0
 8004012:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004014:	7cfb      	ldrb	r3, [r7, #19]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800401a:	7cfb      	ldrb	r3, [r7, #19]
 800401c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d028      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800402a:	4b31      	ldr	r3, [pc, #196]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800402c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004030:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004038:	492d      	ldr	r1, [pc, #180]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800403a:	4313      	orrs	r3, r2
 800403c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004044:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004048:	d106      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800404a:	4b29      	ldr	r3, [pc, #164]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	4a28      	ldr	r2, [pc, #160]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004050:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004054:	60d3      	str	r3, [r2, #12]
 8004056:	e011      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800405c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004060:	d10c      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	3304      	adds	r3, #4
 8004066:	2101      	movs	r1, #1
 8004068:	4618      	mov	r0, r3
 800406a:	f000 f843 	bl	80040f4 <RCCEx_PLLSAI1_Config>
 800406e:	4603      	mov	r3, r0
 8004070:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004072:	7cfb      	ldrb	r3, [r7, #19]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004078:	7cfb      	ldrb	r3, [r7, #19]
 800407a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d01c      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004088:	4b19      	ldr	r3, [pc, #100]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800408a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800408e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004096:	4916      	ldr	r1, [pc, #88]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004098:	4313      	orrs	r3, r2
 800409a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040a6:	d10c      	bne.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3304      	adds	r3, #4
 80040ac:	2102      	movs	r1, #2
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 f820 	bl	80040f4 <RCCEx_PLLSAI1_Config>
 80040b4:	4603      	mov	r3, r0
 80040b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040b8:	7cfb      	ldrb	r3, [r7, #19]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80040be:	7cfb      	ldrb	r3, [r7, #19]
 80040c0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00a      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040ce:	4b08      	ldr	r3, [pc, #32]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040dc:	4904      	ldr	r1, [pc, #16]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80040e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3718      	adds	r7, #24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40021000 	.word	0x40021000

080040f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004102:	4b74      	ldr	r3, [pc, #464]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d018      	beq.n	8004140 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800410e:	4b71      	ldr	r3, [pc, #452]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	f003 0203 	and.w	r2, r3, #3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d10d      	bne.n	800413a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
       ||
 8004122:	2b00      	cmp	r3, #0
 8004124:	d009      	beq.n	800413a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004126:	4b6b      	ldr	r3, [pc, #428]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	091b      	lsrs	r3, r3, #4
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
       ||
 8004136:	429a      	cmp	r2, r3
 8004138:	d047      	beq.n	80041ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	73fb      	strb	r3, [r7, #15]
 800413e:	e044      	b.n	80041ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2b03      	cmp	r3, #3
 8004146:	d018      	beq.n	800417a <RCCEx_PLLSAI1_Config+0x86>
 8004148:	2b03      	cmp	r3, #3
 800414a:	d825      	bhi.n	8004198 <RCCEx_PLLSAI1_Config+0xa4>
 800414c:	2b01      	cmp	r3, #1
 800414e:	d002      	beq.n	8004156 <RCCEx_PLLSAI1_Config+0x62>
 8004150:	2b02      	cmp	r3, #2
 8004152:	d009      	beq.n	8004168 <RCCEx_PLLSAI1_Config+0x74>
 8004154:	e020      	b.n	8004198 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004156:	4b5f      	ldr	r3, [pc, #380]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d11d      	bne.n	800419e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004166:	e01a      	b.n	800419e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004168:	4b5a      	ldr	r3, [pc, #360]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004170:	2b00      	cmp	r3, #0
 8004172:	d116      	bne.n	80041a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004178:	e013      	b.n	80041a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800417a:	4b56      	ldr	r3, [pc, #344]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10f      	bne.n	80041a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004186:	4b53      	ldr	r3, [pc, #332]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d109      	bne.n	80041a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004196:	e006      	b.n	80041a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	73fb      	strb	r3, [r7, #15]
      break;
 800419c:	e004      	b.n	80041a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800419e:	bf00      	nop
 80041a0:	e002      	b.n	80041a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041a2:	bf00      	nop
 80041a4:	e000      	b.n	80041a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10d      	bne.n	80041ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041ae:	4b49      	ldr	r3, [pc, #292]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6819      	ldr	r1, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	3b01      	subs	r3, #1
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	430b      	orrs	r3, r1
 80041c4:	4943      	ldr	r1, [pc, #268]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041ca:	7bfb      	ldrb	r3, [r7, #15]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d17c      	bne.n	80042ca <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80041d0:	4b40      	ldr	r3, [pc, #256]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a3f      	ldr	r2, [pc, #252]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80041da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041dc:	f7fd fe3c 	bl	8001e58 <HAL_GetTick>
 80041e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041e2:	e009      	b.n	80041f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041e4:	f7fd fe38 	bl	8001e58 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d902      	bls.n	80041f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	73fb      	strb	r3, [r7, #15]
        break;
 80041f6:	e005      	b.n	8004204 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041f8:	4b36      	ldr	r3, [pc, #216]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1ef      	bne.n	80041e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004204:	7bfb      	ldrb	r3, [r7, #15]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d15f      	bne.n	80042ca <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d110      	bne.n	8004232 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004210:	4b30      	ldr	r3, [pc, #192]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004218:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	6892      	ldr	r2, [r2, #8]
 8004220:	0211      	lsls	r1, r2, #8
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	68d2      	ldr	r2, [r2, #12]
 8004226:	06d2      	lsls	r2, r2, #27
 8004228:	430a      	orrs	r2, r1
 800422a:	492a      	ldr	r1, [pc, #168]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800422c:	4313      	orrs	r3, r2
 800422e:	610b      	str	r3, [r1, #16]
 8004230:	e027      	b.n	8004282 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d112      	bne.n	800425e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004238:	4b26      	ldr	r3, [pc, #152]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004240:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	6892      	ldr	r2, [r2, #8]
 8004248:	0211      	lsls	r1, r2, #8
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6912      	ldr	r2, [r2, #16]
 800424e:	0852      	lsrs	r2, r2, #1
 8004250:	3a01      	subs	r2, #1
 8004252:	0552      	lsls	r2, r2, #21
 8004254:	430a      	orrs	r2, r1
 8004256:	491f      	ldr	r1, [pc, #124]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004258:	4313      	orrs	r3, r2
 800425a:	610b      	str	r3, [r1, #16]
 800425c:	e011      	b.n	8004282 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800425e:	4b1d      	ldr	r3, [pc, #116]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004266:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6892      	ldr	r2, [r2, #8]
 800426e:	0211      	lsls	r1, r2, #8
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6952      	ldr	r2, [r2, #20]
 8004274:	0852      	lsrs	r2, r2, #1
 8004276:	3a01      	subs	r2, #1
 8004278:	0652      	lsls	r2, r2, #25
 800427a:	430a      	orrs	r2, r1
 800427c:	4915      	ldr	r1, [pc, #84]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800427e:	4313      	orrs	r3, r2
 8004280:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004282:	4b14      	ldr	r3, [pc, #80]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a13      	ldr	r2, [pc, #76]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004288:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800428c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428e:	f7fd fde3 	bl	8001e58 <HAL_GetTick>
 8004292:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004294:	e009      	b.n	80042aa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004296:	f7fd fddf 	bl	8001e58 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d902      	bls.n	80042aa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	73fb      	strb	r3, [r7, #15]
          break;
 80042a8:	e005      	b.n	80042b6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042aa:	4b0a      	ldr	r3, [pc, #40]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0ef      	beq.n	8004296 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80042b6:	7bfb      	ldrb	r3, [r7, #15]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d106      	bne.n	80042ca <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80042bc:	4b05      	ldr	r3, [pc, #20]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042be:	691a      	ldr	r2, [r3, #16]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	4903      	ldr	r1, [pc, #12]	@ (80042d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40021000 	.word	0x40021000

080042d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e040      	b.n	800436c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d106      	bne.n	8004300 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7fd fbba 	bl	8001a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2224      	movs	r2, #36	@ 0x24
 8004304:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0201 	bic.w	r2, r2, #1
 8004314:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431a:	2b00      	cmp	r3, #0
 800431c:	d002      	beq.n	8004324 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 fade 	bl	80048e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f8af 	bl	8004488 <UART_SetConfig>
 800432a:	4603      	mov	r3, r0
 800432c:	2b01      	cmp	r3, #1
 800432e:	d101      	bne.n	8004334 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e01b      	b.n	800436c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004342:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004352:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0201 	orr.w	r2, r2, #1
 8004362:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 fb5d 	bl	8004a24 <UART_CheckIdleState>
 800436a:	4603      	mov	r3, r0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b08a      	sub	sp, #40	@ 0x28
 8004378:	af02      	add	r7, sp, #8
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	603b      	str	r3, [r7, #0]
 8004380:	4613      	mov	r3, r2
 8004382:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004388:	2b20      	cmp	r3, #32
 800438a:	d177      	bne.n	800447c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d002      	beq.n	8004398 <HAL_UART_Transmit+0x24>
 8004392:	88fb      	ldrh	r3, [r7, #6]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e070      	b.n	800447e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2221      	movs	r2, #33	@ 0x21
 80043a8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043aa:	f7fd fd55 	bl	8001e58 <HAL_GetTick>
 80043ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	88fa      	ldrh	r2, [r7, #6]
 80043b4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	88fa      	ldrh	r2, [r7, #6]
 80043bc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043c8:	d108      	bne.n	80043dc <HAL_UART_Transmit+0x68>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d104      	bne.n	80043dc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80043d2:	2300      	movs	r3, #0
 80043d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	61bb      	str	r3, [r7, #24]
 80043da:	e003      	b.n	80043e4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043e0:	2300      	movs	r3, #0
 80043e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043e4:	e02f      	b.n	8004446 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2200      	movs	r2, #0
 80043ee:	2180      	movs	r1, #128	@ 0x80
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f000 fbbf 	bl	8004b74 <UART_WaitOnFlagUntilTimeout>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d004      	beq.n	8004406 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2220      	movs	r2, #32
 8004400:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e03b      	b.n	800447e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10b      	bne.n	8004424 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	881a      	ldrh	r2, [r3, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004418:	b292      	uxth	r2, r2
 800441a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	3302      	adds	r3, #2
 8004420:	61bb      	str	r3, [r7, #24]
 8004422:	e007      	b.n	8004434 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	781a      	ldrb	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	3301      	adds	r3, #1
 8004432:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800443a:	b29b      	uxth	r3, r3
 800443c:	3b01      	subs	r3, #1
 800443e:	b29a      	uxth	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800444c:	b29b      	uxth	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1c9      	bne.n	80043e6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	2200      	movs	r2, #0
 800445a:	2140      	movs	r1, #64	@ 0x40
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 fb89 	bl	8004b74 <UART_WaitOnFlagUntilTimeout>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d004      	beq.n	8004472 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2220      	movs	r2, #32
 800446c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e005      	b.n	800447e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2220      	movs	r2, #32
 8004476:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004478:	2300      	movs	r3, #0
 800447a:	e000      	b.n	800447e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800447c:	2302      	movs	r3, #2
  }
}
 800447e:	4618      	mov	r0, r3
 8004480:	3720      	adds	r7, #32
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
	...

08004488 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800448c:	b08a      	sub	sp, #40	@ 0x28
 800448e:	af00      	add	r7, sp, #0
 8004490:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004492:	2300      	movs	r3, #0
 8004494:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	689a      	ldr	r2, [r3, #8]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	431a      	orrs	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	431a      	orrs	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	69db      	ldr	r3, [r3, #28]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	4bb4      	ldr	r3, [pc, #720]	@ (8004788 <UART_SetConfig+0x300>)
 80044b8:	4013      	ands	r3, r2
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	6812      	ldr	r2, [r2, #0]
 80044be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044c0:	430b      	orrs	r3, r1
 80044c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	68da      	ldr	r2, [r3, #12]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4aa9      	ldr	r2, [pc, #676]	@ (800478c <UART_SetConfig+0x304>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d004      	beq.n	80044f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044f0:	4313      	orrs	r3, r2
 80044f2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004504:	430a      	orrs	r2, r1
 8004506:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4aa0      	ldr	r2, [pc, #640]	@ (8004790 <UART_SetConfig+0x308>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d126      	bne.n	8004560 <UART_SetConfig+0xd8>
 8004512:	4ba0      	ldr	r3, [pc, #640]	@ (8004794 <UART_SetConfig+0x30c>)
 8004514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004518:	f003 0303 	and.w	r3, r3, #3
 800451c:	2b03      	cmp	r3, #3
 800451e:	d81b      	bhi.n	8004558 <UART_SetConfig+0xd0>
 8004520:	a201      	add	r2, pc, #4	@ (adr r2, 8004528 <UART_SetConfig+0xa0>)
 8004522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004526:	bf00      	nop
 8004528:	08004539 	.word	0x08004539
 800452c:	08004549 	.word	0x08004549
 8004530:	08004541 	.word	0x08004541
 8004534:	08004551 	.word	0x08004551
 8004538:	2301      	movs	r3, #1
 800453a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800453e:	e080      	b.n	8004642 <UART_SetConfig+0x1ba>
 8004540:	2302      	movs	r3, #2
 8004542:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004546:	e07c      	b.n	8004642 <UART_SetConfig+0x1ba>
 8004548:	2304      	movs	r3, #4
 800454a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800454e:	e078      	b.n	8004642 <UART_SetConfig+0x1ba>
 8004550:	2308      	movs	r3, #8
 8004552:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004556:	e074      	b.n	8004642 <UART_SetConfig+0x1ba>
 8004558:	2310      	movs	r3, #16
 800455a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800455e:	e070      	b.n	8004642 <UART_SetConfig+0x1ba>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a8c      	ldr	r2, [pc, #560]	@ (8004798 <UART_SetConfig+0x310>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d138      	bne.n	80045dc <UART_SetConfig+0x154>
 800456a:	4b8a      	ldr	r3, [pc, #552]	@ (8004794 <UART_SetConfig+0x30c>)
 800456c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004570:	f003 030c 	and.w	r3, r3, #12
 8004574:	2b0c      	cmp	r3, #12
 8004576:	d82d      	bhi.n	80045d4 <UART_SetConfig+0x14c>
 8004578:	a201      	add	r2, pc, #4	@ (adr r2, 8004580 <UART_SetConfig+0xf8>)
 800457a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457e:	bf00      	nop
 8004580:	080045b5 	.word	0x080045b5
 8004584:	080045d5 	.word	0x080045d5
 8004588:	080045d5 	.word	0x080045d5
 800458c:	080045d5 	.word	0x080045d5
 8004590:	080045c5 	.word	0x080045c5
 8004594:	080045d5 	.word	0x080045d5
 8004598:	080045d5 	.word	0x080045d5
 800459c:	080045d5 	.word	0x080045d5
 80045a0:	080045bd 	.word	0x080045bd
 80045a4:	080045d5 	.word	0x080045d5
 80045a8:	080045d5 	.word	0x080045d5
 80045ac:	080045d5 	.word	0x080045d5
 80045b0:	080045cd 	.word	0x080045cd
 80045b4:	2300      	movs	r3, #0
 80045b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ba:	e042      	b.n	8004642 <UART_SetConfig+0x1ba>
 80045bc:	2302      	movs	r3, #2
 80045be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045c2:	e03e      	b.n	8004642 <UART_SetConfig+0x1ba>
 80045c4:	2304      	movs	r3, #4
 80045c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ca:	e03a      	b.n	8004642 <UART_SetConfig+0x1ba>
 80045cc:	2308      	movs	r3, #8
 80045ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045d2:	e036      	b.n	8004642 <UART_SetConfig+0x1ba>
 80045d4:	2310      	movs	r3, #16
 80045d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045da:	e032      	b.n	8004642 <UART_SetConfig+0x1ba>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a6a      	ldr	r2, [pc, #424]	@ (800478c <UART_SetConfig+0x304>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d12a      	bne.n	800463c <UART_SetConfig+0x1b4>
 80045e6:	4b6b      	ldr	r3, [pc, #428]	@ (8004794 <UART_SetConfig+0x30c>)
 80045e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80045f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045f4:	d01a      	beq.n	800462c <UART_SetConfig+0x1a4>
 80045f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045fa:	d81b      	bhi.n	8004634 <UART_SetConfig+0x1ac>
 80045fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004600:	d00c      	beq.n	800461c <UART_SetConfig+0x194>
 8004602:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004606:	d815      	bhi.n	8004634 <UART_SetConfig+0x1ac>
 8004608:	2b00      	cmp	r3, #0
 800460a:	d003      	beq.n	8004614 <UART_SetConfig+0x18c>
 800460c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004610:	d008      	beq.n	8004624 <UART_SetConfig+0x19c>
 8004612:	e00f      	b.n	8004634 <UART_SetConfig+0x1ac>
 8004614:	2300      	movs	r3, #0
 8004616:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800461a:	e012      	b.n	8004642 <UART_SetConfig+0x1ba>
 800461c:	2302      	movs	r3, #2
 800461e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004622:	e00e      	b.n	8004642 <UART_SetConfig+0x1ba>
 8004624:	2304      	movs	r3, #4
 8004626:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800462a:	e00a      	b.n	8004642 <UART_SetConfig+0x1ba>
 800462c:	2308      	movs	r3, #8
 800462e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004632:	e006      	b.n	8004642 <UART_SetConfig+0x1ba>
 8004634:	2310      	movs	r3, #16
 8004636:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800463a:	e002      	b.n	8004642 <UART_SetConfig+0x1ba>
 800463c:	2310      	movs	r3, #16
 800463e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a51      	ldr	r2, [pc, #324]	@ (800478c <UART_SetConfig+0x304>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d17a      	bne.n	8004742 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800464c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004650:	2b08      	cmp	r3, #8
 8004652:	d824      	bhi.n	800469e <UART_SetConfig+0x216>
 8004654:	a201      	add	r2, pc, #4	@ (adr r2, 800465c <UART_SetConfig+0x1d4>)
 8004656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465a:	bf00      	nop
 800465c:	08004681 	.word	0x08004681
 8004660:	0800469f 	.word	0x0800469f
 8004664:	08004689 	.word	0x08004689
 8004668:	0800469f 	.word	0x0800469f
 800466c:	0800468f 	.word	0x0800468f
 8004670:	0800469f 	.word	0x0800469f
 8004674:	0800469f 	.word	0x0800469f
 8004678:	0800469f 	.word	0x0800469f
 800467c:	08004697 	.word	0x08004697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004680:	f7ff fab6 	bl	8003bf0 <HAL_RCC_GetPCLK1Freq>
 8004684:	61f8      	str	r0, [r7, #28]
        break;
 8004686:	e010      	b.n	80046aa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004688:	4b44      	ldr	r3, [pc, #272]	@ (800479c <UART_SetConfig+0x314>)
 800468a:	61fb      	str	r3, [r7, #28]
        break;
 800468c:	e00d      	b.n	80046aa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800468e:	f7ff fa17 	bl	8003ac0 <HAL_RCC_GetSysClockFreq>
 8004692:	61f8      	str	r0, [r7, #28]
        break;
 8004694:	e009      	b.n	80046aa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004696:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800469a:	61fb      	str	r3, [r7, #28]
        break;
 800469c:	e005      	b.n	80046aa <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800469e:	2300      	movs	r3, #0
 80046a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80046a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 8107 	beq.w	80048c0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	4613      	mov	r3, r2
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	4413      	add	r3, r2
 80046bc:	69fa      	ldr	r2, [r7, #28]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d305      	bcc.n	80046ce <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046c8:	69fa      	ldr	r2, [r7, #28]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d903      	bls.n	80046d6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80046d4:	e0f4      	b.n	80048c0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	2200      	movs	r2, #0
 80046da:	461c      	mov	r4, r3
 80046dc:	4615      	mov	r5, r2
 80046de:	f04f 0200 	mov.w	r2, #0
 80046e2:	f04f 0300 	mov.w	r3, #0
 80046e6:	022b      	lsls	r3, r5, #8
 80046e8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80046ec:	0222      	lsls	r2, r4, #8
 80046ee:	68f9      	ldr	r1, [r7, #12]
 80046f0:	6849      	ldr	r1, [r1, #4]
 80046f2:	0849      	lsrs	r1, r1, #1
 80046f4:	2000      	movs	r0, #0
 80046f6:	4688      	mov	r8, r1
 80046f8:	4681      	mov	r9, r0
 80046fa:	eb12 0a08 	adds.w	sl, r2, r8
 80046fe:	eb43 0b09 	adc.w	fp, r3, r9
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	603b      	str	r3, [r7, #0]
 800470a:	607a      	str	r2, [r7, #4]
 800470c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004710:	4650      	mov	r0, sl
 8004712:	4659      	mov	r1, fp
 8004714:	f7fc fa48 	bl	8000ba8 <__aeabi_uldivmod>
 8004718:	4602      	mov	r2, r0
 800471a:	460b      	mov	r3, r1
 800471c:	4613      	mov	r3, r2
 800471e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004726:	d308      	bcc.n	800473a <UART_SetConfig+0x2b2>
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800472e:	d204      	bcs.n	800473a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	60da      	str	r2, [r3, #12]
 8004738:	e0c2      	b.n	80048c0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004740:	e0be      	b.n	80048c0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800474a:	d16a      	bne.n	8004822 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800474c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004750:	2b08      	cmp	r3, #8
 8004752:	d834      	bhi.n	80047be <UART_SetConfig+0x336>
 8004754:	a201      	add	r2, pc, #4	@ (adr r2, 800475c <UART_SetConfig+0x2d4>)
 8004756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475a:	bf00      	nop
 800475c:	08004781 	.word	0x08004781
 8004760:	080047a1 	.word	0x080047a1
 8004764:	080047a9 	.word	0x080047a9
 8004768:	080047bf 	.word	0x080047bf
 800476c:	080047af 	.word	0x080047af
 8004770:	080047bf 	.word	0x080047bf
 8004774:	080047bf 	.word	0x080047bf
 8004778:	080047bf 	.word	0x080047bf
 800477c:	080047b7 	.word	0x080047b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004780:	f7ff fa36 	bl	8003bf0 <HAL_RCC_GetPCLK1Freq>
 8004784:	61f8      	str	r0, [r7, #28]
        break;
 8004786:	e020      	b.n	80047ca <UART_SetConfig+0x342>
 8004788:	efff69f3 	.word	0xefff69f3
 800478c:	40008000 	.word	0x40008000
 8004790:	40013800 	.word	0x40013800
 8004794:	40021000 	.word	0x40021000
 8004798:	40004400 	.word	0x40004400
 800479c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047a0:	f7ff fa3c 	bl	8003c1c <HAL_RCC_GetPCLK2Freq>
 80047a4:	61f8      	str	r0, [r7, #28]
        break;
 80047a6:	e010      	b.n	80047ca <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047a8:	4b4c      	ldr	r3, [pc, #304]	@ (80048dc <UART_SetConfig+0x454>)
 80047aa:	61fb      	str	r3, [r7, #28]
        break;
 80047ac:	e00d      	b.n	80047ca <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ae:	f7ff f987 	bl	8003ac0 <HAL_RCC_GetSysClockFreq>
 80047b2:	61f8      	str	r0, [r7, #28]
        break;
 80047b4:	e009      	b.n	80047ca <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047ba:	61fb      	str	r3, [r7, #28]
        break;
 80047bc:	e005      	b.n	80047ca <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80047be:	2300      	movs	r3, #0
 80047c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80047c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d077      	beq.n	80048c0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	005a      	lsls	r2, r3, #1
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	085b      	lsrs	r3, r3, #1
 80047da:	441a      	add	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	2b0f      	cmp	r3, #15
 80047ea:	d916      	bls.n	800481a <UART_SetConfig+0x392>
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047f2:	d212      	bcs.n	800481a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	f023 030f 	bic.w	r3, r3, #15
 80047fc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	085b      	lsrs	r3, r3, #1
 8004802:	b29b      	uxth	r3, r3
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	b29a      	uxth	r2, r3
 800480a:	8afb      	ldrh	r3, [r7, #22]
 800480c:	4313      	orrs	r3, r2
 800480e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	8afa      	ldrh	r2, [r7, #22]
 8004816:	60da      	str	r2, [r3, #12]
 8004818:	e052      	b.n	80048c0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004820:	e04e      	b.n	80048c0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004822:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004826:	2b08      	cmp	r3, #8
 8004828:	d827      	bhi.n	800487a <UART_SetConfig+0x3f2>
 800482a:	a201      	add	r2, pc, #4	@ (adr r2, 8004830 <UART_SetConfig+0x3a8>)
 800482c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004830:	08004855 	.word	0x08004855
 8004834:	0800485d 	.word	0x0800485d
 8004838:	08004865 	.word	0x08004865
 800483c:	0800487b 	.word	0x0800487b
 8004840:	0800486b 	.word	0x0800486b
 8004844:	0800487b 	.word	0x0800487b
 8004848:	0800487b 	.word	0x0800487b
 800484c:	0800487b 	.word	0x0800487b
 8004850:	08004873 	.word	0x08004873
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004854:	f7ff f9cc 	bl	8003bf0 <HAL_RCC_GetPCLK1Freq>
 8004858:	61f8      	str	r0, [r7, #28]
        break;
 800485a:	e014      	b.n	8004886 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800485c:	f7ff f9de 	bl	8003c1c <HAL_RCC_GetPCLK2Freq>
 8004860:	61f8      	str	r0, [r7, #28]
        break;
 8004862:	e010      	b.n	8004886 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004864:	4b1d      	ldr	r3, [pc, #116]	@ (80048dc <UART_SetConfig+0x454>)
 8004866:	61fb      	str	r3, [r7, #28]
        break;
 8004868:	e00d      	b.n	8004886 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800486a:	f7ff f929 	bl	8003ac0 <HAL_RCC_GetSysClockFreq>
 800486e:	61f8      	str	r0, [r7, #28]
        break;
 8004870:	e009      	b.n	8004886 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004872:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004876:	61fb      	str	r3, [r7, #28]
        break;
 8004878:	e005      	b.n	8004886 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800487a:	2300      	movs	r3, #0
 800487c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004884:	bf00      	nop
    }

    if (pclk != 0U)
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d019      	beq.n	80048c0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	085a      	lsrs	r2, r3, #1
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	441a      	add	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	fbb2 f3f3 	udiv	r3, r2, r3
 800489e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	2b0f      	cmp	r3, #15
 80048a4:	d909      	bls.n	80048ba <UART_SetConfig+0x432>
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048ac:	d205      	bcs.n	80048ba <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	60da      	str	r2, [r3, #12]
 80048b8:	e002      	b.n	80048c0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80048cc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3728      	adds	r7, #40	@ 0x28
 80048d4:	46bd      	mov	sp, r7
 80048d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048da:	bf00      	nop
 80048dc:	00f42400 	.word	0x00f42400

080048e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ec:	f003 0308 	and.w	r3, r3, #8
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00a      	beq.n	800490a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	430a      	orrs	r2, r1
 8004908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00a      	beq.n	800492c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	430a      	orrs	r2, r1
 800492a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00a      	beq.n	800494e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004952:	f003 0304 	and.w	r3, r3, #4
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00a      	beq.n	8004970 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004974:	f003 0310 	and.w	r3, r3, #16
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00a      	beq.n	8004992 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004996:	f003 0320 	and.w	r3, r3, #32
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00a      	beq.n	80049b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d01a      	beq.n	80049f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049de:	d10a      	bne.n	80049f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00a      	beq.n	8004a18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	605a      	str	r2, [r3, #4]
  }
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b098      	sub	sp, #96	@ 0x60
 8004a28:	af02      	add	r7, sp, #8
 8004a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a34:	f7fd fa10 	bl	8001e58 <HAL_GetTick>
 8004a38:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0308 	and.w	r3, r3, #8
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d12e      	bne.n	8004aa6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a50:	2200      	movs	r2, #0
 8004a52:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f88c 	bl	8004b74 <UART_WaitOnFlagUntilTimeout>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d021      	beq.n	8004aa6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a6a:	e853 3f00 	ldrex	r3, [r3]
 8004a6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a76:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a80:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a82:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a88:	e841 2300 	strex	r3, r2, [r1]
 8004a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1e6      	bne.n	8004a62 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2220      	movs	r2, #32
 8004a98:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e062      	b.n	8004b6c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	2b04      	cmp	r3, #4
 8004ab2:	d149      	bne.n	8004b48 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ab4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004abc:	2200      	movs	r2, #0
 8004abe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f856 	bl	8004b74 <UART_WaitOnFlagUntilTimeout>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d03c      	beq.n	8004b48 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad6:	e853 3f00 	ldrex	r3, [r3]
 8004ada:	623b      	str	r3, [r7, #32]
   return(result);
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	461a      	mov	r2, r3
 8004aea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004aec:	633b      	str	r3, [r7, #48]	@ 0x30
 8004aee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004af2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004af4:	e841 2300 	strex	r3, r2, [r1]
 8004af8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1e6      	bne.n	8004ace <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	3308      	adds	r3, #8
 8004b06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	e853 3f00 	ldrex	r3, [r3]
 8004b0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f023 0301 	bic.w	r3, r3, #1
 8004b16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3308      	adds	r3, #8
 8004b1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b20:	61fa      	str	r2, [r7, #28]
 8004b22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b24:	69b9      	ldr	r1, [r7, #24]
 8004b26:	69fa      	ldr	r2, [r7, #28]
 8004b28:	e841 2300 	strex	r3, r2, [r1]
 8004b2c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1e5      	bne.n	8004b00 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2220      	movs	r2, #32
 8004b38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e011      	b.n	8004b6c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3758      	adds	r7, #88	@ 0x58
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	603b      	str	r3, [r7, #0]
 8004b80:	4613      	mov	r3, r2
 8004b82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b84:	e04f      	b.n	8004c26 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8c:	d04b      	beq.n	8004c26 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b8e:	f7fd f963 	bl	8001e58 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d302      	bcc.n	8004ba4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e04e      	b.n	8004c46 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0304 	and.w	r3, r3, #4
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d037      	beq.n	8004c26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	2b80      	cmp	r3, #128	@ 0x80
 8004bba:	d034      	beq.n	8004c26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	2b40      	cmp	r3, #64	@ 0x40
 8004bc0:	d031      	beq.n	8004c26 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69db      	ldr	r3, [r3, #28]
 8004bc8:	f003 0308 	and.w	r3, r3, #8
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	d110      	bne.n	8004bf2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2208      	movs	r2, #8
 8004bd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f000 f838 	bl	8004c4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2208      	movs	r2, #8
 8004be2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e029      	b.n	8004c46 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	69db      	ldr	r3, [r3, #28]
 8004bf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c00:	d111      	bne.n	8004c26 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f000 f81e 	bl	8004c4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2220      	movs	r2, #32
 8004c16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e00f      	b.n	8004c46 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	69da      	ldr	r2, [r3, #28]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	bf0c      	ite	eq
 8004c36:	2301      	moveq	r3, #1
 8004c38:	2300      	movne	r3, #0
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	79fb      	ldrb	r3, [r7, #7]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d0a0      	beq.n	8004b86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b095      	sub	sp, #84	@ 0x54
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c5e:	e853 3f00 	ldrex	r3, [r3]
 8004c62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	461a      	mov	r2, r3
 8004c72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c74:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c76:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c7c:	e841 2300 	strex	r3, r2, [r1]
 8004c80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1e6      	bne.n	8004c56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3308      	adds	r3, #8
 8004c8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c90:	6a3b      	ldr	r3, [r7, #32]
 8004c92:	e853 3f00 	ldrex	r3, [r3]
 8004c96:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	f023 0301 	bic.w	r3, r3, #1
 8004c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	3308      	adds	r3, #8
 8004ca6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ca8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004caa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cb0:	e841 2300 	strex	r3, r2, [r1]
 8004cb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1e5      	bne.n	8004c88 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d118      	bne.n	8004cf6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	e853 3f00 	ldrex	r3, [r3]
 8004cd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	f023 0310 	bic.w	r3, r3, #16
 8004cd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ce2:	61bb      	str	r3, [r7, #24]
 8004ce4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce6:	6979      	ldr	r1, [r7, #20]
 8004ce8:	69ba      	ldr	r2, [r7, #24]
 8004cea:	e841 2300 	strex	r3, r2, [r1]
 8004cee:	613b      	str	r3, [r7, #16]
   return(result);
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1e6      	bne.n	8004cc4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004d0a:	bf00      	nop
 8004d0c:	3754      	adds	r7, #84	@ 0x54
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <__cvt>:
 8004d16:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d1a:	ec57 6b10 	vmov	r6, r7, d0
 8004d1e:	2f00      	cmp	r7, #0
 8004d20:	460c      	mov	r4, r1
 8004d22:	4619      	mov	r1, r3
 8004d24:	463b      	mov	r3, r7
 8004d26:	bfbb      	ittet	lt
 8004d28:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004d2c:	461f      	movlt	r7, r3
 8004d2e:	2300      	movge	r3, #0
 8004d30:	232d      	movlt	r3, #45	@ 0x2d
 8004d32:	700b      	strb	r3, [r1, #0]
 8004d34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d36:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004d3a:	4691      	mov	r9, r2
 8004d3c:	f023 0820 	bic.w	r8, r3, #32
 8004d40:	bfbc      	itt	lt
 8004d42:	4632      	movlt	r2, r6
 8004d44:	4616      	movlt	r6, r2
 8004d46:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004d4a:	d005      	beq.n	8004d58 <__cvt+0x42>
 8004d4c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004d50:	d100      	bne.n	8004d54 <__cvt+0x3e>
 8004d52:	3401      	adds	r4, #1
 8004d54:	2102      	movs	r1, #2
 8004d56:	e000      	b.n	8004d5a <__cvt+0x44>
 8004d58:	2103      	movs	r1, #3
 8004d5a:	ab03      	add	r3, sp, #12
 8004d5c:	9301      	str	r3, [sp, #4]
 8004d5e:	ab02      	add	r3, sp, #8
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	ec47 6b10 	vmov	d0, r6, r7
 8004d66:	4653      	mov	r3, sl
 8004d68:	4622      	mov	r2, r4
 8004d6a:	f000 fe59 	bl	8005a20 <_dtoa_r>
 8004d6e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004d72:	4605      	mov	r5, r0
 8004d74:	d119      	bne.n	8004daa <__cvt+0x94>
 8004d76:	f019 0f01 	tst.w	r9, #1
 8004d7a:	d00e      	beq.n	8004d9a <__cvt+0x84>
 8004d7c:	eb00 0904 	add.w	r9, r0, r4
 8004d80:	2200      	movs	r2, #0
 8004d82:	2300      	movs	r3, #0
 8004d84:	4630      	mov	r0, r6
 8004d86:	4639      	mov	r1, r7
 8004d88:	f7fb fe9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d8c:	b108      	cbz	r0, 8004d92 <__cvt+0x7c>
 8004d8e:	f8cd 900c 	str.w	r9, [sp, #12]
 8004d92:	2230      	movs	r2, #48	@ 0x30
 8004d94:	9b03      	ldr	r3, [sp, #12]
 8004d96:	454b      	cmp	r3, r9
 8004d98:	d31e      	bcc.n	8004dd8 <__cvt+0xc2>
 8004d9a:	9b03      	ldr	r3, [sp, #12]
 8004d9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004d9e:	1b5b      	subs	r3, r3, r5
 8004da0:	4628      	mov	r0, r5
 8004da2:	6013      	str	r3, [r2, #0]
 8004da4:	b004      	add	sp, #16
 8004da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004daa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004dae:	eb00 0904 	add.w	r9, r0, r4
 8004db2:	d1e5      	bne.n	8004d80 <__cvt+0x6a>
 8004db4:	7803      	ldrb	r3, [r0, #0]
 8004db6:	2b30      	cmp	r3, #48	@ 0x30
 8004db8:	d10a      	bne.n	8004dd0 <__cvt+0xba>
 8004dba:	2200      	movs	r2, #0
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	4630      	mov	r0, r6
 8004dc0:	4639      	mov	r1, r7
 8004dc2:	f7fb fe81 	bl	8000ac8 <__aeabi_dcmpeq>
 8004dc6:	b918      	cbnz	r0, 8004dd0 <__cvt+0xba>
 8004dc8:	f1c4 0401 	rsb	r4, r4, #1
 8004dcc:	f8ca 4000 	str.w	r4, [sl]
 8004dd0:	f8da 3000 	ldr.w	r3, [sl]
 8004dd4:	4499      	add	r9, r3
 8004dd6:	e7d3      	b.n	8004d80 <__cvt+0x6a>
 8004dd8:	1c59      	adds	r1, r3, #1
 8004dda:	9103      	str	r1, [sp, #12]
 8004ddc:	701a      	strb	r2, [r3, #0]
 8004dde:	e7d9      	b.n	8004d94 <__cvt+0x7e>

08004de0 <__exponent>:
 8004de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004de2:	2900      	cmp	r1, #0
 8004de4:	bfba      	itte	lt
 8004de6:	4249      	neglt	r1, r1
 8004de8:	232d      	movlt	r3, #45	@ 0x2d
 8004dea:	232b      	movge	r3, #43	@ 0x2b
 8004dec:	2909      	cmp	r1, #9
 8004dee:	7002      	strb	r2, [r0, #0]
 8004df0:	7043      	strb	r3, [r0, #1]
 8004df2:	dd29      	ble.n	8004e48 <__exponent+0x68>
 8004df4:	f10d 0307 	add.w	r3, sp, #7
 8004df8:	461d      	mov	r5, r3
 8004dfa:	270a      	movs	r7, #10
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	fbb1 f6f7 	udiv	r6, r1, r7
 8004e02:	fb07 1416 	mls	r4, r7, r6, r1
 8004e06:	3430      	adds	r4, #48	@ 0x30
 8004e08:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004e0c:	460c      	mov	r4, r1
 8004e0e:	2c63      	cmp	r4, #99	@ 0x63
 8004e10:	f103 33ff 	add.w	r3, r3, #4294967295
 8004e14:	4631      	mov	r1, r6
 8004e16:	dcf1      	bgt.n	8004dfc <__exponent+0x1c>
 8004e18:	3130      	adds	r1, #48	@ 0x30
 8004e1a:	1e94      	subs	r4, r2, #2
 8004e1c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004e20:	1c41      	adds	r1, r0, #1
 8004e22:	4623      	mov	r3, r4
 8004e24:	42ab      	cmp	r3, r5
 8004e26:	d30a      	bcc.n	8004e3e <__exponent+0x5e>
 8004e28:	f10d 0309 	add.w	r3, sp, #9
 8004e2c:	1a9b      	subs	r3, r3, r2
 8004e2e:	42ac      	cmp	r4, r5
 8004e30:	bf88      	it	hi
 8004e32:	2300      	movhi	r3, #0
 8004e34:	3302      	adds	r3, #2
 8004e36:	4403      	add	r3, r0
 8004e38:	1a18      	subs	r0, r3, r0
 8004e3a:	b003      	add	sp, #12
 8004e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e3e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004e42:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004e46:	e7ed      	b.n	8004e24 <__exponent+0x44>
 8004e48:	2330      	movs	r3, #48	@ 0x30
 8004e4a:	3130      	adds	r1, #48	@ 0x30
 8004e4c:	7083      	strb	r3, [r0, #2]
 8004e4e:	70c1      	strb	r1, [r0, #3]
 8004e50:	1d03      	adds	r3, r0, #4
 8004e52:	e7f1      	b.n	8004e38 <__exponent+0x58>

08004e54 <_printf_float>:
 8004e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e58:	b08d      	sub	sp, #52	@ 0x34
 8004e5a:	460c      	mov	r4, r1
 8004e5c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004e60:	4616      	mov	r6, r2
 8004e62:	461f      	mov	r7, r3
 8004e64:	4605      	mov	r5, r0
 8004e66:	f000 fcdb 	bl	8005820 <_localeconv_r>
 8004e6a:	6803      	ldr	r3, [r0, #0]
 8004e6c:	9304      	str	r3, [sp, #16]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7fb f9fe 	bl	8000270 <strlen>
 8004e74:	2300      	movs	r3, #0
 8004e76:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e78:	f8d8 3000 	ldr.w	r3, [r8]
 8004e7c:	9005      	str	r0, [sp, #20]
 8004e7e:	3307      	adds	r3, #7
 8004e80:	f023 0307 	bic.w	r3, r3, #7
 8004e84:	f103 0208 	add.w	r2, r3, #8
 8004e88:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004e8c:	f8d4 b000 	ldr.w	fp, [r4]
 8004e90:	f8c8 2000 	str.w	r2, [r8]
 8004e94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004e98:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004e9c:	9307      	str	r3, [sp, #28]
 8004e9e:	f8cd 8018 	str.w	r8, [sp, #24]
 8004ea2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004ea6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004eaa:	4b9c      	ldr	r3, [pc, #624]	@ (800511c <_printf_float+0x2c8>)
 8004eac:	f04f 32ff 	mov.w	r2, #4294967295
 8004eb0:	f7fb fe3c 	bl	8000b2c <__aeabi_dcmpun>
 8004eb4:	bb70      	cbnz	r0, 8004f14 <_printf_float+0xc0>
 8004eb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004eba:	4b98      	ldr	r3, [pc, #608]	@ (800511c <_printf_float+0x2c8>)
 8004ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec0:	f7fb fe16 	bl	8000af0 <__aeabi_dcmple>
 8004ec4:	bb30      	cbnz	r0, 8004f14 <_printf_float+0xc0>
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	2300      	movs	r3, #0
 8004eca:	4640      	mov	r0, r8
 8004ecc:	4649      	mov	r1, r9
 8004ece:	f7fb fe05 	bl	8000adc <__aeabi_dcmplt>
 8004ed2:	b110      	cbz	r0, 8004eda <_printf_float+0x86>
 8004ed4:	232d      	movs	r3, #45	@ 0x2d
 8004ed6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004eda:	4a91      	ldr	r2, [pc, #580]	@ (8005120 <_printf_float+0x2cc>)
 8004edc:	4b91      	ldr	r3, [pc, #580]	@ (8005124 <_printf_float+0x2d0>)
 8004ede:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004ee2:	bf8c      	ite	hi
 8004ee4:	4690      	movhi	r8, r2
 8004ee6:	4698      	movls	r8, r3
 8004ee8:	2303      	movs	r3, #3
 8004eea:	6123      	str	r3, [r4, #16]
 8004eec:	f02b 0304 	bic.w	r3, fp, #4
 8004ef0:	6023      	str	r3, [r4, #0]
 8004ef2:	f04f 0900 	mov.w	r9, #0
 8004ef6:	9700      	str	r7, [sp, #0]
 8004ef8:	4633      	mov	r3, r6
 8004efa:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004efc:	4621      	mov	r1, r4
 8004efe:	4628      	mov	r0, r5
 8004f00:	f000 f9d2 	bl	80052a8 <_printf_common>
 8004f04:	3001      	adds	r0, #1
 8004f06:	f040 808d 	bne.w	8005024 <_printf_float+0x1d0>
 8004f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f0e:	b00d      	add	sp, #52	@ 0x34
 8004f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f14:	4642      	mov	r2, r8
 8004f16:	464b      	mov	r3, r9
 8004f18:	4640      	mov	r0, r8
 8004f1a:	4649      	mov	r1, r9
 8004f1c:	f7fb fe06 	bl	8000b2c <__aeabi_dcmpun>
 8004f20:	b140      	cbz	r0, 8004f34 <_printf_float+0xe0>
 8004f22:	464b      	mov	r3, r9
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	bfbc      	itt	lt
 8004f28:	232d      	movlt	r3, #45	@ 0x2d
 8004f2a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004f2e:	4a7e      	ldr	r2, [pc, #504]	@ (8005128 <_printf_float+0x2d4>)
 8004f30:	4b7e      	ldr	r3, [pc, #504]	@ (800512c <_printf_float+0x2d8>)
 8004f32:	e7d4      	b.n	8004ede <_printf_float+0x8a>
 8004f34:	6863      	ldr	r3, [r4, #4]
 8004f36:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004f3a:	9206      	str	r2, [sp, #24]
 8004f3c:	1c5a      	adds	r2, r3, #1
 8004f3e:	d13b      	bne.n	8004fb8 <_printf_float+0x164>
 8004f40:	2306      	movs	r3, #6
 8004f42:	6063      	str	r3, [r4, #4]
 8004f44:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004f48:	2300      	movs	r3, #0
 8004f4a:	6022      	str	r2, [r4, #0]
 8004f4c:	9303      	str	r3, [sp, #12]
 8004f4e:	ab0a      	add	r3, sp, #40	@ 0x28
 8004f50:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004f54:	ab09      	add	r3, sp, #36	@ 0x24
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	6861      	ldr	r1, [r4, #4]
 8004f5a:	ec49 8b10 	vmov	d0, r8, r9
 8004f5e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004f62:	4628      	mov	r0, r5
 8004f64:	f7ff fed7 	bl	8004d16 <__cvt>
 8004f68:	9b06      	ldr	r3, [sp, #24]
 8004f6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004f6c:	2b47      	cmp	r3, #71	@ 0x47
 8004f6e:	4680      	mov	r8, r0
 8004f70:	d129      	bne.n	8004fc6 <_printf_float+0x172>
 8004f72:	1cc8      	adds	r0, r1, #3
 8004f74:	db02      	blt.n	8004f7c <_printf_float+0x128>
 8004f76:	6863      	ldr	r3, [r4, #4]
 8004f78:	4299      	cmp	r1, r3
 8004f7a:	dd41      	ble.n	8005000 <_printf_float+0x1ac>
 8004f7c:	f1aa 0a02 	sub.w	sl, sl, #2
 8004f80:	fa5f fa8a 	uxtb.w	sl, sl
 8004f84:	3901      	subs	r1, #1
 8004f86:	4652      	mov	r2, sl
 8004f88:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004f8c:	9109      	str	r1, [sp, #36]	@ 0x24
 8004f8e:	f7ff ff27 	bl	8004de0 <__exponent>
 8004f92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004f94:	1813      	adds	r3, r2, r0
 8004f96:	2a01      	cmp	r2, #1
 8004f98:	4681      	mov	r9, r0
 8004f9a:	6123      	str	r3, [r4, #16]
 8004f9c:	dc02      	bgt.n	8004fa4 <_printf_float+0x150>
 8004f9e:	6822      	ldr	r2, [r4, #0]
 8004fa0:	07d2      	lsls	r2, r2, #31
 8004fa2:	d501      	bpl.n	8004fa8 <_printf_float+0x154>
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	6123      	str	r3, [r4, #16]
 8004fa8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0a2      	beq.n	8004ef6 <_printf_float+0xa2>
 8004fb0:	232d      	movs	r3, #45	@ 0x2d
 8004fb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fb6:	e79e      	b.n	8004ef6 <_printf_float+0xa2>
 8004fb8:	9a06      	ldr	r2, [sp, #24]
 8004fba:	2a47      	cmp	r2, #71	@ 0x47
 8004fbc:	d1c2      	bne.n	8004f44 <_printf_float+0xf0>
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1c0      	bne.n	8004f44 <_printf_float+0xf0>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e7bd      	b.n	8004f42 <_printf_float+0xee>
 8004fc6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004fca:	d9db      	bls.n	8004f84 <_printf_float+0x130>
 8004fcc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004fd0:	d118      	bne.n	8005004 <_printf_float+0x1b0>
 8004fd2:	2900      	cmp	r1, #0
 8004fd4:	6863      	ldr	r3, [r4, #4]
 8004fd6:	dd0b      	ble.n	8004ff0 <_printf_float+0x19c>
 8004fd8:	6121      	str	r1, [r4, #16]
 8004fda:	b913      	cbnz	r3, 8004fe2 <_printf_float+0x18e>
 8004fdc:	6822      	ldr	r2, [r4, #0]
 8004fde:	07d0      	lsls	r0, r2, #31
 8004fe0:	d502      	bpl.n	8004fe8 <_printf_float+0x194>
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	440b      	add	r3, r1
 8004fe6:	6123      	str	r3, [r4, #16]
 8004fe8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004fea:	f04f 0900 	mov.w	r9, #0
 8004fee:	e7db      	b.n	8004fa8 <_printf_float+0x154>
 8004ff0:	b913      	cbnz	r3, 8004ff8 <_printf_float+0x1a4>
 8004ff2:	6822      	ldr	r2, [r4, #0]
 8004ff4:	07d2      	lsls	r2, r2, #31
 8004ff6:	d501      	bpl.n	8004ffc <_printf_float+0x1a8>
 8004ff8:	3302      	adds	r3, #2
 8004ffa:	e7f4      	b.n	8004fe6 <_printf_float+0x192>
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e7f2      	b.n	8004fe6 <_printf_float+0x192>
 8005000:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005004:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005006:	4299      	cmp	r1, r3
 8005008:	db05      	blt.n	8005016 <_printf_float+0x1c2>
 800500a:	6823      	ldr	r3, [r4, #0]
 800500c:	6121      	str	r1, [r4, #16]
 800500e:	07d8      	lsls	r0, r3, #31
 8005010:	d5ea      	bpl.n	8004fe8 <_printf_float+0x194>
 8005012:	1c4b      	adds	r3, r1, #1
 8005014:	e7e7      	b.n	8004fe6 <_printf_float+0x192>
 8005016:	2900      	cmp	r1, #0
 8005018:	bfd4      	ite	le
 800501a:	f1c1 0202 	rsble	r2, r1, #2
 800501e:	2201      	movgt	r2, #1
 8005020:	4413      	add	r3, r2
 8005022:	e7e0      	b.n	8004fe6 <_printf_float+0x192>
 8005024:	6823      	ldr	r3, [r4, #0]
 8005026:	055a      	lsls	r2, r3, #21
 8005028:	d407      	bmi.n	800503a <_printf_float+0x1e6>
 800502a:	6923      	ldr	r3, [r4, #16]
 800502c:	4642      	mov	r2, r8
 800502e:	4631      	mov	r1, r6
 8005030:	4628      	mov	r0, r5
 8005032:	47b8      	blx	r7
 8005034:	3001      	adds	r0, #1
 8005036:	d12b      	bne.n	8005090 <_printf_float+0x23c>
 8005038:	e767      	b.n	8004f0a <_printf_float+0xb6>
 800503a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800503e:	f240 80dd 	bls.w	80051fc <_printf_float+0x3a8>
 8005042:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005046:	2200      	movs	r2, #0
 8005048:	2300      	movs	r3, #0
 800504a:	f7fb fd3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800504e:	2800      	cmp	r0, #0
 8005050:	d033      	beq.n	80050ba <_printf_float+0x266>
 8005052:	4a37      	ldr	r2, [pc, #220]	@ (8005130 <_printf_float+0x2dc>)
 8005054:	2301      	movs	r3, #1
 8005056:	4631      	mov	r1, r6
 8005058:	4628      	mov	r0, r5
 800505a:	47b8      	blx	r7
 800505c:	3001      	adds	r0, #1
 800505e:	f43f af54 	beq.w	8004f0a <_printf_float+0xb6>
 8005062:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005066:	4543      	cmp	r3, r8
 8005068:	db02      	blt.n	8005070 <_printf_float+0x21c>
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	07d8      	lsls	r0, r3, #31
 800506e:	d50f      	bpl.n	8005090 <_printf_float+0x23c>
 8005070:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005074:	4631      	mov	r1, r6
 8005076:	4628      	mov	r0, r5
 8005078:	47b8      	blx	r7
 800507a:	3001      	adds	r0, #1
 800507c:	f43f af45 	beq.w	8004f0a <_printf_float+0xb6>
 8005080:	f04f 0900 	mov.w	r9, #0
 8005084:	f108 38ff 	add.w	r8, r8, #4294967295
 8005088:	f104 0a1a 	add.w	sl, r4, #26
 800508c:	45c8      	cmp	r8, r9
 800508e:	dc09      	bgt.n	80050a4 <_printf_float+0x250>
 8005090:	6823      	ldr	r3, [r4, #0]
 8005092:	079b      	lsls	r3, r3, #30
 8005094:	f100 8103 	bmi.w	800529e <_printf_float+0x44a>
 8005098:	68e0      	ldr	r0, [r4, #12]
 800509a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800509c:	4298      	cmp	r0, r3
 800509e:	bfb8      	it	lt
 80050a0:	4618      	movlt	r0, r3
 80050a2:	e734      	b.n	8004f0e <_printf_float+0xba>
 80050a4:	2301      	movs	r3, #1
 80050a6:	4652      	mov	r2, sl
 80050a8:	4631      	mov	r1, r6
 80050aa:	4628      	mov	r0, r5
 80050ac:	47b8      	blx	r7
 80050ae:	3001      	adds	r0, #1
 80050b0:	f43f af2b 	beq.w	8004f0a <_printf_float+0xb6>
 80050b4:	f109 0901 	add.w	r9, r9, #1
 80050b8:	e7e8      	b.n	800508c <_printf_float+0x238>
 80050ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050bc:	2b00      	cmp	r3, #0
 80050be:	dc39      	bgt.n	8005134 <_printf_float+0x2e0>
 80050c0:	4a1b      	ldr	r2, [pc, #108]	@ (8005130 <_printf_float+0x2dc>)
 80050c2:	2301      	movs	r3, #1
 80050c4:	4631      	mov	r1, r6
 80050c6:	4628      	mov	r0, r5
 80050c8:	47b8      	blx	r7
 80050ca:	3001      	adds	r0, #1
 80050cc:	f43f af1d 	beq.w	8004f0a <_printf_float+0xb6>
 80050d0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80050d4:	ea59 0303 	orrs.w	r3, r9, r3
 80050d8:	d102      	bne.n	80050e0 <_printf_float+0x28c>
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	07d9      	lsls	r1, r3, #31
 80050de:	d5d7      	bpl.n	8005090 <_printf_float+0x23c>
 80050e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050e4:	4631      	mov	r1, r6
 80050e6:	4628      	mov	r0, r5
 80050e8:	47b8      	blx	r7
 80050ea:	3001      	adds	r0, #1
 80050ec:	f43f af0d 	beq.w	8004f0a <_printf_float+0xb6>
 80050f0:	f04f 0a00 	mov.w	sl, #0
 80050f4:	f104 0b1a 	add.w	fp, r4, #26
 80050f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050fa:	425b      	negs	r3, r3
 80050fc:	4553      	cmp	r3, sl
 80050fe:	dc01      	bgt.n	8005104 <_printf_float+0x2b0>
 8005100:	464b      	mov	r3, r9
 8005102:	e793      	b.n	800502c <_printf_float+0x1d8>
 8005104:	2301      	movs	r3, #1
 8005106:	465a      	mov	r2, fp
 8005108:	4631      	mov	r1, r6
 800510a:	4628      	mov	r0, r5
 800510c:	47b8      	blx	r7
 800510e:	3001      	adds	r0, #1
 8005110:	f43f aefb 	beq.w	8004f0a <_printf_float+0xb6>
 8005114:	f10a 0a01 	add.w	sl, sl, #1
 8005118:	e7ee      	b.n	80050f8 <_printf_float+0x2a4>
 800511a:	bf00      	nop
 800511c:	7fefffff 	.word	0x7fefffff
 8005120:	08007b90 	.word	0x08007b90
 8005124:	08007b8c 	.word	0x08007b8c
 8005128:	08007b98 	.word	0x08007b98
 800512c:	08007b94 	.word	0x08007b94
 8005130:	08007b9c 	.word	0x08007b9c
 8005134:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005136:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800513a:	4553      	cmp	r3, sl
 800513c:	bfa8      	it	ge
 800513e:	4653      	movge	r3, sl
 8005140:	2b00      	cmp	r3, #0
 8005142:	4699      	mov	r9, r3
 8005144:	dc36      	bgt.n	80051b4 <_printf_float+0x360>
 8005146:	f04f 0b00 	mov.w	fp, #0
 800514a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800514e:	f104 021a 	add.w	r2, r4, #26
 8005152:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005154:	9306      	str	r3, [sp, #24]
 8005156:	eba3 0309 	sub.w	r3, r3, r9
 800515a:	455b      	cmp	r3, fp
 800515c:	dc31      	bgt.n	80051c2 <_printf_float+0x36e>
 800515e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005160:	459a      	cmp	sl, r3
 8005162:	dc3a      	bgt.n	80051da <_printf_float+0x386>
 8005164:	6823      	ldr	r3, [r4, #0]
 8005166:	07da      	lsls	r2, r3, #31
 8005168:	d437      	bmi.n	80051da <_printf_float+0x386>
 800516a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800516c:	ebaa 0903 	sub.w	r9, sl, r3
 8005170:	9b06      	ldr	r3, [sp, #24]
 8005172:	ebaa 0303 	sub.w	r3, sl, r3
 8005176:	4599      	cmp	r9, r3
 8005178:	bfa8      	it	ge
 800517a:	4699      	movge	r9, r3
 800517c:	f1b9 0f00 	cmp.w	r9, #0
 8005180:	dc33      	bgt.n	80051ea <_printf_float+0x396>
 8005182:	f04f 0800 	mov.w	r8, #0
 8005186:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800518a:	f104 0b1a 	add.w	fp, r4, #26
 800518e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005190:	ebaa 0303 	sub.w	r3, sl, r3
 8005194:	eba3 0309 	sub.w	r3, r3, r9
 8005198:	4543      	cmp	r3, r8
 800519a:	f77f af79 	ble.w	8005090 <_printf_float+0x23c>
 800519e:	2301      	movs	r3, #1
 80051a0:	465a      	mov	r2, fp
 80051a2:	4631      	mov	r1, r6
 80051a4:	4628      	mov	r0, r5
 80051a6:	47b8      	blx	r7
 80051a8:	3001      	adds	r0, #1
 80051aa:	f43f aeae 	beq.w	8004f0a <_printf_float+0xb6>
 80051ae:	f108 0801 	add.w	r8, r8, #1
 80051b2:	e7ec      	b.n	800518e <_printf_float+0x33a>
 80051b4:	4642      	mov	r2, r8
 80051b6:	4631      	mov	r1, r6
 80051b8:	4628      	mov	r0, r5
 80051ba:	47b8      	blx	r7
 80051bc:	3001      	adds	r0, #1
 80051be:	d1c2      	bne.n	8005146 <_printf_float+0x2f2>
 80051c0:	e6a3      	b.n	8004f0a <_printf_float+0xb6>
 80051c2:	2301      	movs	r3, #1
 80051c4:	4631      	mov	r1, r6
 80051c6:	4628      	mov	r0, r5
 80051c8:	9206      	str	r2, [sp, #24]
 80051ca:	47b8      	blx	r7
 80051cc:	3001      	adds	r0, #1
 80051ce:	f43f ae9c 	beq.w	8004f0a <_printf_float+0xb6>
 80051d2:	9a06      	ldr	r2, [sp, #24]
 80051d4:	f10b 0b01 	add.w	fp, fp, #1
 80051d8:	e7bb      	b.n	8005152 <_printf_float+0x2fe>
 80051da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051de:	4631      	mov	r1, r6
 80051e0:	4628      	mov	r0, r5
 80051e2:	47b8      	blx	r7
 80051e4:	3001      	adds	r0, #1
 80051e6:	d1c0      	bne.n	800516a <_printf_float+0x316>
 80051e8:	e68f      	b.n	8004f0a <_printf_float+0xb6>
 80051ea:	9a06      	ldr	r2, [sp, #24]
 80051ec:	464b      	mov	r3, r9
 80051ee:	4442      	add	r2, r8
 80051f0:	4631      	mov	r1, r6
 80051f2:	4628      	mov	r0, r5
 80051f4:	47b8      	blx	r7
 80051f6:	3001      	adds	r0, #1
 80051f8:	d1c3      	bne.n	8005182 <_printf_float+0x32e>
 80051fa:	e686      	b.n	8004f0a <_printf_float+0xb6>
 80051fc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005200:	f1ba 0f01 	cmp.w	sl, #1
 8005204:	dc01      	bgt.n	800520a <_printf_float+0x3b6>
 8005206:	07db      	lsls	r3, r3, #31
 8005208:	d536      	bpl.n	8005278 <_printf_float+0x424>
 800520a:	2301      	movs	r3, #1
 800520c:	4642      	mov	r2, r8
 800520e:	4631      	mov	r1, r6
 8005210:	4628      	mov	r0, r5
 8005212:	47b8      	blx	r7
 8005214:	3001      	adds	r0, #1
 8005216:	f43f ae78 	beq.w	8004f0a <_printf_float+0xb6>
 800521a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800521e:	4631      	mov	r1, r6
 8005220:	4628      	mov	r0, r5
 8005222:	47b8      	blx	r7
 8005224:	3001      	adds	r0, #1
 8005226:	f43f ae70 	beq.w	8004f0a <_printf_float+0xb6>
 800522a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800522e:	2200      	movs	r2, #0
 8005230:	2300      	movs	r3, #0
 8005232:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005236:	f7fb fc47 	bl	8000ac8 <__aeabi_dcmpeq>
 800523a:	b9c0      	cbnz	r0, 800526e <_printf_float+0x41a>
 800523c:	4653      	mov	r3, sl
 800523e:	f108 0201 	add.w	r2, r8, #1
 8005242:	4631      	mov	r1, r6
 8005244:	4628      	mov	r0, r5
 8005246:	47b8      	blx	r7
 8005248:	3001      	adds	r0, #1
 800524a:	d10c      	bne.n	8005266 <_printf_float+0x412>
 800524c:	e65d      	b.n	8004f0a <_printf_float+0xb6>
 800524e:	2301      	movs	r3, #1
 8005250:	465a      	mov	r2, fp
 8005252:	4631      	mov	r1, r6
 8005254:	4628      	mov	r0, r5
 8005256:	47b8      	blx	r7
 8005258:	3001      	adds	r0, #1
 800525a:	f43f ae56 	beq.w	8004f0a <_printf_float+0xb6>
 800525e:	f108 0801 	add.w	r8, r8, #1
 8005262:	45d0      	cmp	r8, sl
 8005264:	dbf3      	blt.n	800524e <_printf_float+0x3fa>
 8005266:	464b      	mov	r3, r9
 8005268:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800526c:	e6df      	b.n	800502e <_printf_float+0x1da>
 800526e:	f04f 0800 	mov.w	r8, #0
 8005272:	f104 0b1a 	add.w	fp, r4, #26
 8005276:	e7f4      	b.n	8005262 <_printf_float+0x40e>
 8005278:	2301      	movs	r3, #1
 800527a:	4642      	mov	r2, r8
 800527c:	e7e1      	b.n	8005242 <_printf_float+0x3ee>
 800527e:	2301      	movs	r3, #1
 8005280:	464a      	mov	r2, r9
 8005282:	4631      	mov	r1, r6
 8005284:	4628      	mov	r0, r5
 8005286:	47b8      	blx	r7
 8005288:	3001      	adds	r0, #1
 800528a:	f43f ae3e 	beq.w	8004f0a <_printf_float+0xb6>
 800528e:	f108 0801 	add.w	r8, r8, #1
 8005292:	68e3      	ldr	r3, [r4, #12]
 8005294:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005296:	1a5b      	subs	r3, r3, r1
 8005298:	4543      	cmp	r3, r8
 800529a:	dcf0      	bgt.n	800527e <_printf_float+0x42a>
 800529c:	e6fc      	b.n	8005098 <_printf_float+0x244>
 800529e:	f04f 0800 	mov.w	r8, #0
 80052a2:	f104 0919 	add.w	r9, r4, #25
 80052a6:	e7f4      	b.n	8005292 <_printf_float+0x43e>

080052a8 <_printf_common>:
 80052a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052ac:	4616      	mov	r6, r2
 80052ae:	4698      	mov	r8, r3
 80052b0:	688a      	ldr	r2, [r1, #8]
 80052b2:	690b      	ldr	r3, [r1, #16]
 80052b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80052b8:	4293      	cmp	r3, r2
 80052ba:	bfb8      	it	lt
 80052bc:	4613      	movlt	r3, r2
 80052be:	6033      	str	r3, [r6, #0]
 80052c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80052c4:	4607      	mov	r7, r0
 80052c6:	460c      	mov	r4, r1
 80052c8:	b10a      	cbz	r2, 80052ce <_printf_common+0x26>
 80052ca:	3301      	adds	r3, #1
 80052cc:	6033      	str	r3, [r6, #0]
 80052ce:	6823      	ldr	r3, [r4, #0]
 80052d0:	0699      	lsls	r1, r3, #26
 80052d2:	bf42      	ittt	mi
 80052d4:	6833      	ldrmi	r3, [r6, #0]
 80052d6:	3302      	addmi	r3, #2
 80052d8:	6033      	strmi	r3, [r6, #0]
 80052da:	6825      	ldr	r5, [r4, #0]
 80052dc:	f015 0506 	ands.w	r5, r5, #6
 80052e0:	d106      	bne.n	80052f0 <_printf_common+0x48>
 80052e2:	f104 0a19 	add.w	sl, r4, #25
 80052e6:	68e3      	ldr	r3, [r4, #12]
 80052e8:	6832      	ldr	r2, [r6, #0]
 80052ea:	1a9b      	subs	r3, r3, r2
 80052ec:	42ab      	cmp	r3, r5
 80052ee:	dc26      	bgt.n	800533e <_printf_common+0x96>
 80052f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80052f4:	6822      	ldr	r2, [r4, #0]
 80052f6:	3b00      	subs	r3, #0
 80052f8:	bf18      	it	ne
 80052fa:	2301      	movne	r3, #1
 80052fc:	0692      	lsls	r2, r2, #26
 80052fe:	d42b      	bmi.n	8005358 <_printf_common+0xb0>
 8005300:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005304:	4641      	mov	r1, r8
 8005306:	4638      	mov	r0, r7
 8005308:	47c8      	blx	r9
 800530a:	3001      	adds	r0, #1
 800530c:	d01e      	beq.n	800534c <_printf_common+0xa4>
 800530e:	6823      	ldr	r3, [r4, #0]
 8005310:	6922      	ldr	r2, [r4, #16]
 8005312:	f003 0306 	and.w	r3, r3, #6
 8005316:	2b04      	cmp	r3, #4
 8005318:	bf02      	ittt	eq
 800531a:	68e5      	ldreq	r5, [r4, #12]
 800531c:	6833      	ldreq	r3, [r6, #0]
 800531e:	1aed      	subeq	r5, r5, r3
 8005320:	68a3      	ldr	r3, [r4, #8]
 8005322:	bf0c      	ite	eq
 8005324:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005328:	2500      	movne	r5, #0
 800532a:	4293      	cmp	r3, r2
 800532c:	bfc4      	itt	gt
 800532e:	1a9b      	subgt	r3, r3, r2
 8005330:	18ed      	addgt	r5, r5, r3
 8005332:	2600      	movs	r6, #0
 8005334:	341a      	adds	r4, #26
 8005336:	42b5      	cmp	r5, r6
 8005338:	d11a      	bne.n	8005370 <_printf_common+0xc8>
 800533a:	2000      	movs	r0, #0
 800533c:	e008      	b.n	8005350 <_printf_common+0xa8>
 800533e:	2301      	movs	r3, #1
 8005340:	4652      	mov	r2, sl
 8005342:	4641      	mov	r1, r8
 8005344:	4638      	mov	r0, r7
 8005346:	47c8      	blx	r9
 8005348:	3001      	adds	r0, #1
 800534a:	d103      	bne.n	8005354 <_printf_common+0xac>
 800534c:	f04f 30ff 	mov.w	r0, #4294967295
 8005350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005354:	3501      	adds	r5, #1
 8005356:	e7c6      	b.n	80052e6 <_printf_common+0x3e>
 8005358:	18e1      	adds	r1, r4, r3
 800535a:	1c5a      	adds	r2, r3, #1
 800535c:	2030      	movs	r0, #48	@ 0x30
 800535e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005362:	4422      	add	r2, r4
 8005364:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005368:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800536c:	3302      	adds	r3, #2
 800536e:	e7c7      	b.n	8005300 <_printf_common+0x58>
 8005370:	2301      	movs	r3, #1
 8005372:	4622      	mov	r2, r4
 8005374:	4641      	mov	r1, r8
 8005376:	4638      	mov	r0, r7
 8005378:	47c8      	blx	r9
 800537a:	3001      	adds	r0, #1
 800537c:	d0e6      	beq.n	800534c <_printf_common+0xa4>
 800537e:	3601      	adds	r6, #1
 8005380:	e7d9      	b.n	8005336 <_printf_common+0x8e>
	...

08005384 <_printf_i>:
 8005384:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005388:	7e0f      	ldrb	r7, [r1, #24]
 800538a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800538c:	2f78      	cmp	r7, #120	@ 0x78
 800538e:	4691      	mov	r9, r2
 8005390:	4680      	mov	r8, r0
 8005392:	460c      	mov	r4, r1
 8005394:	469a      	mov	sl, r3
 8005396:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800539a:	d807      	bhi.n	80053ac <_printf_i+0x28>
 800539c:	2f62      	cmp	r7, #98	@ 0x62
 800539e:	d80a      	bhi.n	80053b6 <_printf_i+0x32>
 80053a0:	2f00      	cmp	r7, #0
 80053a2:	f000 80d1 	beq.w	8005548 <_printf_i+0x1c4>
 80053a6:	2f58      	cmp	r7, #88	@ 0x58
 80053a8:	f000 80b8 	beq.w	800551c <_printf_i+0x198>
 80053ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80053b4:	e03a      	b.n	800542c <_printf_i+0xa8>
 80053b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80053ba:	2b15      	cmp	r3, #21
 80053bc:	d8f6      	bhi.n	80053ac <_printf_i+0x28>
 80053be:	a101      	add	r1, pc, #4	@ (adr r1, 80053c4 <_printf_i+0x40>)
 80053c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053c4:	0800541d 	.word	0x0800541d
 80053c8:	08005431 	.word	0x08005431
 80053cc:	080053ad 	.word	0x080053ad
 80053d0:	080053ad 	.word	0x080053ad
 80053d4:	080053ad 	.word	0x080053ad
 80053d8:	080053ad 	.word	0x080053ad
 80053dc:	08005431 	.word	0x08005431
 80053e0:	080053ad 	.word	0x080053ad
 80053e4:	080053ad 	.word	0x080053ad
 80053e8:	080053ad 	.word	0x080053ad
 80053ec:	080053ad 	.word	0x080053ad
 80053f0:	0800552f 	.word	0x0800552f
 80053f4:	0800545b 	.word	0x0800545b
 80053f8:	080054e9 	.word	0x080054e9
 80053fc:	080053ad 	.word	0x080053ad
 8005400:	080053ad 	.word	0x080053ad
 8005404:	08005551 	.word	0x08005551
 8005408:	080053ad 	.word	0x080053ad
 800540c:	0800545b 	.word	0x0800545b
 8005410:	080053ad 	.word	0x080053ad
 8005414:	080053ad 	.word	0x080053ad
 8005418:	080054f1 	.word	0x080054f1
 800541c:	6833      	ldr	r3, [r6, #0]
 800541e:	1d1a      	adds	r2, r3, #4
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	6032      	str	r2, [r6, #0]
 8005424:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005428:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800542c:	2301      	movs	r3, #1
 800542e:	e09c      	b.n	800556a <_printf_i+0x1e6>
 8005430:	6833      	ldr	r3, [r6, #0]
 8005432:	6820      	ldr	r0, [r4, #0]
 8005434:	1d19      	adds	r1, r3, #4
 8005436:	6031      	str	r1, [r6, #0]
 8005438:	0606      	lsls	r6, r0, #24
 800543a:	d501      	bpl.n	8005440 <_printf_i+0xbc>
 800543c:	681d      	ldr	r5, [r3, #0]
 800543e:	e003      	b.n	8005448 <_printf_i+0xc4>
 8005440:	0645      	lsls	r5, r0, #25
 8005442:	d5fb      	bpl.n	800543c <_printf_i+0xb8>
 8005444:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005448:	2d00      	cmp	r5, #0
 800544a:	da03      	bge.n	8005454 <_printf_i+0xd0>
 800544c:	232d      	movs	r3, #45	@ 0x2d
 800544e:	426d      	negs	r5, r5
 8005450:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005454:	4858      	ldr	r0, [pc, #352]	@ (80055b8 <_printf_i+0x234>)
 8005456:	230a      	movs	r3, #10
 8005458:	e011      	b.n	800547e <_printf_i+0xfa>
 800545a:	6821      	ldr	r1, [r4, #0]
 800545c:	6833      	ldr	r3, [r6, #0]
 800545e:	0608      	lsls	r0, r1, #24
 8005460:	f853 5b04 	ldr.w	r5, [r3], #4
 8005464:	d402      	bmi.n	800546c <_printf_i+0xe8>
 8005466:	0649      	lsls	r1, r1, #25
 8005468:	bf48      	it	mi
 800546a:	b2ad      	uxthmi	r5, r5
 800546c:	2f6f      	cmp	r7, #111	@ 0x6f
 800546e:	4852      	ldr	r0, [pc, #328]	@ (80055b8 <_printf_i+0x234>)
 8005470:	6033      	str	r3, [r6, #0]
 8005472:	bf14      	ite	ne
 8005474:	230a      	movne	r3, #10
 8005476:	2308      	moveq	r3, #8
 8005478:	2100      	movs	r1, #0
 800547a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800547e:	6866      	ldr	r6, [r4, #4]
 8005480:	60a6      	str	r6, [r4, #8]
 8005482:	2e00      	cmp	r6, #0
 8005484:	db05      	blt.n	8005492 <_printf_i+0x10e>
 8005486:	6821      	ldr	r1, [r4, #0]
 8005488:	432e      	orrs	r6, r5
 800548a:	f021 0104 	bic.w	r1, r1, #4
 800548e:	6021      	str	r1, [r4, #0]
 8005490:	d04b      	beq.n	800552a <_printf_i+0x1a6>
 8005492:	4616      	mov	r6, r2
 8005494:	fbb5 f1f3 	udiv	r1, r5, r3
 8005498:	fb03 5711 	mls	r7, r3, r1, r5
 800549c:	5dc7      	ldrb	r7, [r0, r7]
 800549e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80054a2:	462f      	mov	r7, r5
 80054a4:	42bb      	cmp	r3, r7
 80054a6:	460d      	mov	r5, r1
 80054a8:	d9f4      	bls.n	8005494 <_printf_i+0x110>
 80054aa:	2b08      	cmp	r3, #8
 80054ac:	d10b      	bne.n	80054c6 <_printf_i+0x142>
 80054ae:	6823      	ldr	r3, [r4, #0]
 80054b0:	07df      	lsls	r7, r3, #31
 80054b2:	d508      	bpl.n	80054c6 <_printf_i+0x142>
 80054b4:	6923      	ldr	r3, [r4, #16]
 80054b6:	6861      	ldr	r1, [r4, #4]
 80054b8:	4299      	cmp	r1, r3
 80054ba:	bfde      	ittt	le
 80054bc:	2330      	movle	r3, #48	@ 0x30
 80054be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80054c6:	1b92      	subs	r2, r2, r6
 80054c8:	6122      	str	r2, [r4, #16]
 80054ca:	f8cd a000 	str.w	sl, [sp]
 80054ce:	464b      	mov	r3, r9
 80054d0:	aa03      	add	r2, sp, #12
 80054d2:	4621      	mov	r1, r4
 80054d4:	4640      	mov	r0, r8
 80054d6:	f7ff fee7 	bl	80052a8 <_printf_common>
 80054da:	3001      	adds	r0, #1
 80054dc:	d14a      	bne.n	8005574 <_printf_i+0x1f0>
 80054de:	f04f 30ff 	mov.w	r0, #4294967295
 80054e2:	b004      	add	sp, #16
 80054e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054e8:	6823      	ldr	r3, [r4, #0]
 80054ea:	f043 0320 	orr.w	r3, r3, #32
 80054ee:	6023      	str	r3, [r4, #0]
 80054f0:	4832      	ldr	r0, [pc, #200]	@ (80055bc <_printf_i+0x238>)
 80054f2:	2778      	movs	r7, #120	@ 0x78
 80054f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80054f8:	6823      	ldr	r3, [r4, #0]
 80054fa:	6831      	ldr	r1, [r6, #0]
 80054fc:	061f      	lsls	r7, r3, #24
 80054fe:	f851 5b04 	ldr.w	r5, [r1], #4
 8005502:	d402      	bmi.n	800550a <_printf_i+0x186>
 8005504:	065f      	lsls	r7, r3, #25
 8005506:	bf48      	it	mi
 8005508:	b2ad      	uxthmi	r5, r5
 800550a:	6031      	str	r1, [r6, #0]
 800550c:	07d9      	lsls	r1, r3, #31
 800550e:	bf44      	itt	mi
 8005510:	f043 0320 	orrmi.w	r3, r3, #32
 8005514:	6023      	strmi	r3, [r4, #0]
 8005516:	b11d      	cbz	r5, 8005520 <_printf_i+0x19c>
 8005518:	2310      	movs	r3, #16
 800551a:	e7ad      	b.n	8005478 <_printf_i+0xf4>
 800551c:	4826      	ldr	r0, [pc, #152]	@ (80055b8 <_printf_i+0x234>)
 800551e:	e7e9      	b.n	80054f4 <_printf_i+0x170>
 8005520:	6823      	ldr	r3, [r4, #0]
 8005522:	f023 0320 	bic.w	r3, r3, #32
 8005526:	6023      	str	r3, [r4, #0]
 8005528:	e7f6      	b.n	8005518 <_printf_i+0x194>
 800552a:	4616      	mov	r6, r2
 800552c:	e7bd      	b.n	80054aa <_printf_i+0x126>
 800552e:	6833      	ldr	r3, [r6, #0]
 8005530:	6825      	ldr	r5, [r4, #0]
 8005532:	6961      	ldr	r1, [r4, #20]
 8005534:	1d18      	adds	r0, r3, #4
 8005536:	6030      	str	r0, [r6, #0]
 8005538:	062e      	lsls	r6, r5, #24
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	d501      	bpl.n	8005542 <_printf_i+0x1be>
 800553e:	6019      	str	r1, [r3, #0]
 8005540:	e002      	b.n	8005548 <_printf_i+0x1c4>
 8005542:	0668      	lsls	r0, r5, #25
 8005544:	d5fb      	bpl.n	800553e <_printf_i+0x1ba>
 8005546:	8019      	strh	r1, [r3, #0]
 8005548:	2300      	movs	r3, #0
 800554a:	6123      	str	r3, [r4, #16]
 800554c:	4616      	mov	r6, r2
 800554e:	e7bc      	b.n	80054ca <_printf_i+0x146>
 8005550:	6833      	ldr	r3, [r6, #0]
 8005552:	1d1a      	adds	r2, r3, #4
 8005554:	6032      	str	r2, [r6, #0]
 8005556:	681e      	ldr	r6, [r3, #0]
 8005558:	6862      	ldr	r2, [r4, #4]
 800555a:	2100      	movs	r1, #0
 800555c:	4630      	mov	r0, r6
 800555e:	f7fa fe37 	bl	80001d0 <memchr>
 8005562:	b108      	cbz	r0, 8005568 <_printf_i+0x1e4>
 8005564:	1b80      	subs	r0, r0, r6
 8005566:	6060      	str	r0, [r4, #4]
 8005568:	6863      	ldr	r3, [r4, #4]
 800556a:	6123      	str	r3, [r4, #16]
 800556c:	2300      	movs	r3, #0
 800556e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005572:	e7aa      	b.n	80054ca <_printf_i+0x146>
 8005574:	6923      	ldr	r3, [r4, #16]
 8005576:	4632      	mov	r2, r6
 8005578:	4649      	mov	r1, r9
 800557a:	4640      	mov	r0, r8
 800557c:	47d0      	blx	sl
 800557e:	3001      	adds	r0, #1
 8005580:	d0ad      	beq.n	80054de <_printf_i+0x15a>
 8005582:	6823      	ldr	r3, [r4, #0]
 8005584:	079b      	lsls	r3, r3, #30
 8005586:	d413      	bmi.n	80055b0 <_printf_i+0x22c>
 8005588:	68e0      	ldr	r0, [r4, #12]
 800558a:	9b03      	ldr	r3, [sp, #12]
 800558c:	4298      	cmp	r0, r3
 800558e:	bfb8      	it	lt
 8005590:	4618      	movlt	r0, r3
 8005592:	e7a6      	b.n	80054e2 <_printf_i+0x15e>
 8005594:	2301      	movs	r3, #1
 8005596:	4632      	mov	r2, r6
 8005598:	4649      	mov	r1, r9
 800559a:	4640      	mov	r0, r8
 800559c:	47d0      	blx	sl
 800559e:	3001      	adds	r0, #1
 80055a0:	d09d      	beq.n	80054de <_printf_i+0x15a>
 80055a2:	3501      	adds	r5, #1
 80055a4:	68e3      	ldr	r3, [r4, #12]
 80055a6:	9903      	ldr	r1, [sp, #12]
 80055a8:	1a5b      	subs	r3, r3, r1
 80055aa:	42ab      	cmp	r3, r5
 80055ac:	dcf2      	bgt.n	8005594 <_printf_i+0x210>
 80055ae:	e7eb      	b.n	8005588 <_printf_i+0x204>
 80055b0:	2500      	movs	r5, #0
 80055b2:	f104 0619 	add.w	r6, r4, #25
 80055b6:	e7f5      	b.n	80055a4 <_printf_i+0x220>
 80055b8:	08007b9e 	.word	0x08007b9e
 80055bc:	08007baf 	.word	0x08007baf

080055c0 <std>:
 80055c0:	2300      	movs	r3, #0
 80055c2:	b510      	push	{r4, lr}
 80055c4:	4604      	mov	r4, r0
 80055c6:	e9c0 3300 	strd	r3, r3, [r0]
 80055ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055ce:	6083      	str	r3, [r0, #8]
 80055d0:	8181      	strh	r1, [r0, #12]
 80055d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80055d4:	81c2      	strh	r2, [r0, #14]
 80055d6:	6183      	str	r3, [r0, #24]
 80055d8:	4619      	mov	r1, r3
 80055da:	2208      	movs	r2, #8
 80055dc:	305c      	adds	r0, #92	@ 0x5c
 80055de:	f000 f916 	bl	800580e <memset>
 80055e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005618 <std+0x58>)
 80055e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80055e6:	4b0d      	ldr	r3, [pc, #52]	@ (800561c <std+0x5c>)
 80055e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80055ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005620 <std+0x60>)
 80055ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80055ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005624 <std+0x64>)
 80055f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80055f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005628 <std+0x68>)
 80055f4:	6224      	str	r4, [r4, #32]
 80055f6:	429c      	cmp	r4, r3
 80055f8:	d006      	beq.n	8005608 <std+0x48>
 80055fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80055fe:	4294      	cmp	r4, r2
 8005600:	d002      	beq.n	8005608 <std+0x48>
 8005602:	33d0      	adds	r3, #208	@ 0xd0
 8005604:	429c      	cmp	r4, r3
 8005606:	d105      	bne.n	8005614 <std+0x54>
 8005608:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800560c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005610:	f000 b97a 	b.w	8005908 <__retarget_lock_init_recursive>
 8005614:	bd10      	pop	{r4, pc}
 8005616:	bf00      	nop
 8005618:	08005789 	.word	0x08005789
 800561c:	080057ab 	.word	0x080057ab
 8005620:	080057e3 	.word	0x080057e3
 8005624:	08005807 	.word	0x08005807
 8005628:	20000320 	.word	0x20000320

0800562c <stdio_exit_handler>:
 800562c:	4a02      	ldr	r2, [pc, #8]	@ (8005638 <stdio_exit_handler+0xc>)
 800562e:	4903      	ldr	r1, [pc, #12]	@ (800563c <stdio_exit_handler+0x10>)
 8005630:	4803      	ldr	r0, [pc, #12]	@ (8005640 <stdio_exit_handler+0x14>)
 8005632:	f000 b869 	b.w	8005708 <_fwalk_sglue>
 8005636:	bf00      	nop
 8005638:	20000018 	.word	0x20000018
 800563c:	0800726d 	.word	0x0800726d
 8005640:	20000028 	.word	0x20000028

08005644 <cleanup_stdio>:
 8005644:	6841      	ldr	r1, [r0, #4]
 8005646:	4b0c      	ldr	r3, [pc, #48]	@ (8005678 <cleanup_stdio+0x34>)
 8005648:	4299      	cmp	r1, r3
 800564a:	b510      	push	{r4, lr}
 800564c:	4604      	mov	r4, r0
 800564e:	d001      	beq.n	8005654 <cleanup_stdio+0x10>
 8005650:	f001 fe0c 	bl	800726c <_fflush_r>
 8005654:	68a1      	ldr	r1, [r4, #8]
 8005656:	4b09      	ldr	r3, [pc, #36]	@ (800567c <cleanup_stdio+0x38>)
 8005658:	4299      	cmp	r1, r3
 800565a:	d002      	beq.n	8005662 <cleanup_stdio+0x1e>
 800565c:	4620      	mov	r0, r4
 800565e:	f001 fe05 	bl	800726c <_fflush_r>
 8005662:	68e1      	ldr	r1, [r4, #12]
 8005664:	4b06      	ldr	r3, [pc, #24]	@ (8005680 <cleanup_stdio+0x3c>)
 8005666:	4299      	cmp	r1, r3
 8005668:	d004      	beq.n	8005674 <cleanup_stdio+0x30>
 800566a:	4620      	mov	r0, r4
 800566c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005670:	f001 bdfc 	b.w	800726c <_fflush_r>
 8005674:	bd10      	pop	{r4, pc}
 8005676:	bf00      	nop
 8005678:	20000320 	.word	0x20000320
 800567c:	20000388 	.word	0x20000388
 8005680:	200003f0 	.word	0x200003f0

08005684 <global_stdio_init.part.0>:
 8005684:	b510      	push	{r4, lr}
 8005686:	4b0b      	ldr	r3, [pc, #44]	@ (80056b4 <global_stdio_init.part.0+0x30>)
 8005688:	4c0b      	ldr	r4, [pc, #44]	@ (80056b8 <global_stdio_init.part.0+0x34>)
 800568a:	4a0c      	ldr	r2, [pc, #48]	@ (80056bc <global_stdio_init.part.0+0x38>)
 800568c:	601a      	str	r2, [r3, #0]
 800568e:	4620      	mov	r0, r4
 8005690:	2200      	movs	r2, #0
 8005692:	2104      	movs	r1, #4
 8005694:	f7ff ff94 	bl	80055c0 <std>
 8005698:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800569c:	2201      	movs	r2, #1
 800569e:	2109      	movs	r1, #9
 80056a0:	f7ff ff8e 	bl	80055c0 <std>
 80056a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80056a8:	2202      	movs	r2, #2
 80056aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056ae:	2112      	movs	r1, #18
 80056b0:	f7ff bf86 	b.w	80055c0 <std>
 80056b4:	20000458 	.word	0x20000458
 80056b8:	20000320 	.word	0x20000320
 80056bc:	0800562d 	.word	0x0800562d

080056c0 <__sfp_lock_acquire>:
 80056c0:	4801      	ldr	r0, [pc, #4]	@ (80056c8 <__sfp_lock_acquire+0x8>)
 80056c2:	f000 b922 	b.w	800590a <__retarget_lock_acquire_recursive>
 80056c6:	bf00      	nop
 80056c8:	20000461 	.word	0x20000461

080056cc <__sfp_lock_release>:
 80056cc:	4801      	ldr	r0, [pc, #4]	@ (80056d4 <__sfp_lock_release+0x8>)
 80056ce:	f000 b91d 	b.w	800590c <__retarget_lock_release_recursive>
 80056d2:	bf00      	nop
 80056d4:	20000461 	.word	0x20000461

080056d8 <__sinit>:
 80056d8:	b510      	push	{r4, lr}
 80056da:	4604      	mov	r4, r0
 80056dc:	f7ff fff0 	bl	80056c0 <__sfp_lock_acquire>
 80056e0:	6a23      	ldr	r3, [r4, #32]
 80056e2:	b11b      	cbz	r3, 80056ec <__sinit+0x14>
 80056e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056e8:	f7ff bff0 	b.w	80056cc <__sfp_lock_release>
 80056ec:	4b04      	ldr	r3, [pc, #16]	@ (8005700 <__sinit+0x28>)
 80056ee:	6223      	str	r3, [r4, #32]
 80056f0:	4b04      	ldr	r3, [pc, #16]	@ (8005704 <__sinit+0x2c>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1f5      	bne.n	80056e4 <__sinit+0xc>
 80056f8:	f7ff ffc4 	bl	8005684 <global_stdio_init.part.0>
 80056fc:	e7f2      	b.n	80056e4 <__sinit+0xc>
 80056fe:	bf00      	nop
 8005700:	08005645 	.word	0x08005645
 8005704:	20000458 	.word	0x20000458

08005708 <_fwalk_sglue>:
 8005708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800570c:	4607      	mov	r7, r0
 800570e:	4688      	mov	r8, r1
 8005710:	4614      	mov	r4, r2
 8005712:	2600      	movs	r6, #0
 8005714:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005718:	f1b9 0901 	subs.w	r9, r9, #1
 800571c:	d505      	bpl.n	800572a <_fwalk_sglue+0x22>
 800571e:	6824      	ldr	r4, [r4, #0]
 8005720:	2c00      	cmp	r4, #0
 8005722:	d1f7      	bne.n	8005714 <_fwalk_sglue+0xc>
 8005724:	4630      	mov	r0, r6
 8005726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800572a:	89ab      	ldrh	r3, [r5, #12]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d907      	bls.n	8005740 <_fwalk_sglue+0x38>
 8005730:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005734:	3301      	adds	r3, #1
 8005736:	d003      	beq.n	8005740 <_fwalk_sglue+0x38>
 8005738:	4629      	mov	r1, r5
 800573a:	4638      	mov	r0, r7
 800573c:	47c0      	blx	r8
 800573e:	4306      	orrs	r6, r0
 8005740:	3568      	adds	r5, #104	@ 0x68
 8005742:	e7e9      	b.n	8005718 <_fwalk_sglue+0x10>

08005744 <siprintf>:
 8005744:	b40e      	push	{r1, r2, r3}
 8005746:	b510      	push	{r4, lr}
 8005748:	b09d      	sub	sp, #116	@ 0x74
 800574a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800574c:	9002      	str	r0, [sp, #8]
 800574e:	9006      	str	r0, [sp, #24]
 8005750:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005754:	480a      	ldr	r0, [pc, #40]	@ (8005780 <siprintf+0x3c>)
 8005756:	9107      	str	r1, [sp, #28]
 8005758:	9104      	str	r1, [sp, #16]
 800575a:	490a      	ldr	r1, [pc, #40]	@ (8005784 <siprintf+0x40>)
 800575c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005760:	9105      	str	r1, [sp, #20]
 8005762:	2400      	movs	r4, #0
 8005764:	a902      	add	r1, sp, #8
 8005766:	6800      	ldr	r0, [r0, #0]
 8005768:	9301      	str	r3, [sp, #4]
 800576a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800576c:	f001 fbfe 	bl	8006f6c <_svfiprintf_r>
 8005770:	9b02      	ldr	r3, [sp, #8]
 8005772:	701c      	strb	r4, [r3, #0]
 8005774:	b01d      	add	sp, #116	@ 0x74
 8005776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800577a:	b003      	add	sp, #12
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	20000024 	.word	0x20000024
 8005784:	ffff0208 	.word	0xffff0208

08005788 <__sread>:
 8005788:	b510      	push	{r4, lr}
 800578a:	460c      	mov	r4, r1
 800578c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005790:	f000 f86c 	bl	800586c <_read_r>
 8005794:	2800      	cmp	r0, #0
 8005796:	bfab      	itete	ge
 8005798:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800579a:	89a3      	ldrhlt	r3, [r4, #12]
 800579c:	181b      	addge	r3, r3, r0
 800579e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80057a2:	bfac      	ite	ge
 80057a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80057a6:	81a3      	strhlt	r3, [r4, #12]
 80057a8:	bd10      	pop	{r4, pc}

080057aa <__swrite>:
 80057aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057ae:	461f      	mov	r7, r3
 80057b0:	898b      	ldrh	r3, [r1, #12]
 80057b2:	05db      	lsls	r3, r3, #23
 80057b4:	4605      	mov	r5, r0
 80057b6:	460c      	mov	r4, r1
 80057b8:	4616      	mov	r6, r2
 80057ba:	d505      	bpl.n	80057c8 <__swrite+0x1e>
 80057bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057c0:	2302      	movs	r3, #2
 80057c2:	2200      	movs	r2, #0
 80057c4:	f000 f840 	bl	8005848 <_lseek_r>
 80057c8:	89a3      	ldrh	r3, [r4, #12]
 80057ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057d2:	81a3      	strh	r3, [r4, #12]
 80057d4:	4632      	mov	r2, r6
 80057d6:	463b      	mov	r3, r7
 80057d8:	4628      	mov	r0, r5
 80057da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057de:	f000 b857 	b.w	8005890 <_write_r>

080057e2 <__sseek>:
 80057e2:	b510      	push	{r4, lr}
 80057e4:	460c      	mov	r4, r1
 80057e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ea:	f000 f82d 	bl	8005848 <_lseek_r>
 80057ee:	1c43      	adds	r3, r0, #1
 80057f0:	89a3      	ldrh	r3, [r4, #12]
 80057f2:	bf15      	itete	ne
 80057f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80057f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80057fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80057fe:	81a3      	strheq	r3, [r4, #12]
 8005800:	bf18      	it	ne
 8005802:	81a3      	strhne	r3, [r4, #12]
 8005804:	bd10      	pop	{r4, pc}

08005806 <__sclose>:
 8005806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800580a:	f000 b80d 	b.w	8005828 <_close_r>

0800580e <memset>:
 800580e:	4402      	add	r2, r0
 8005810:	4603      	mov	r3, r0
 8005812:	4293      	cmp	r3, r2
 8005814:	d100      	bne.n	8005818 <memset+0xa>
 8005816:	4770      	bx	lr
 8005818:	f803 1b01 	strb.w	r1, [r3], #1
 800581c:	e7f9      	b.n	8005812 <memset+0x4>
	...

08005820 <_localeconv_r>:
 8005820:	4800      	ldr	r0, [pc, #0]	@ (8005824 <_localeconv_r+0x4>)
 8005822:	4770      	bx	lr
 8005824:	20000164 	.word	0x20000164

08005828 <_close_r>:
 8005828:	b538      	push	{r3, r4, r5, lr}
 800582a:	4d06      	ldr	r5, [pc, #24]	@ (8005844 <_close_r+0x1c>)
 800582c:	2300      	movs	r3, #0
 800582e:	4604      	mov	r4, r0
 8005830:	4608      	mov	r0, r1
 8005832:	602b      	str	r3, [r5, #0]
 8005834:	f7fc fa01 	bl	8001c3a <_close>
 8005838:	1c43      	adds	r3, r0, #1
 800583a:	d102      	bne.n	8005842 <_close_r+0x1a>
 800583c:	682b      	ldr	r3, [r5, #0]
 800583e:	b103      	cbz	r3, 8005842 <_close_r+0x1a>
 8005840:	6023      	str	r3, [r4, #0]
 8005842:	bd38      	pop	{r3, r4, r5, pc}
 8005844:	2000045c 	.word	0x2000045c

08005848 <_lseek_r>:
 8005848:	b538      	push	{r3, r4, r5, lr}
 800584a:	4d07      	ldr	r5, [pc, #28]	@ (8005868 <_lseek_r+0x20>)
 800584c:	4604      	mov	r4, r0
 800584e:	4608      	mov	r0, r1
 8005850:	4611      	mov	r1, r2
 8005852:	2200      	movs	r2, #0
 8005854:	602a      	str	r2, [r5, #0]
 8005856:	461a      	mov	r2, r3
 8005858:	f7fc fa16 	bl	8001c88 <_lseek>
 800585c:	1c43      	adds	r3, r0, #1
 800585e:	d102      	bne.n	8005866 <_lseek_r+0x1e>
 8005860:	682b      	ldr	r3, [r5, #0]
 8005862:	b103      	cbz	r3, 8005866 <_lseek_r+0x1e>
 8005864:	6023      	str	r3, [r4, #0]
 8005866:	bd38      	pop	{r3, r4, r5, pc}
 8005868:	2000045c 	.word	0x2000045c

0800586c <_read_r>:
 800586c:	b538      	push	{r3, r4, r5, lr}
 800586e:	4d07      	ldr	r5, [pc, #28]	@ (800588c <_read_r+0x20>)
 8005870:	4604      	mov	r4, r0
 8005872:	4608      	mov	r0, r1
 8005874:	4611      	mov	r1, r2
 8005876:	2200      	movs	r2, #0
 8005878:	602a      	str	r2, [r5, #0]
 800587a:	461a      	mov	r2, r3
 800587c:	f7fc f9a4 	bl	8001bc8 <_read>
 8005880:	1c43      	adds	r3, r0, #1
 8005882:	d102      	bne.n	800588a <_read_r+0x1e>
 8005884:	682b      	ldr	r3, [r5, #0]
 8005886:	b103      	cbz	r3, 800588a <_read_r+0x1e>
 8005888:	6023      	str	r3, [r4, #0]
 800588a:	bd38      	pop	{r3, r4, r5, pc}
 800588c:	2000045c 	.word	0x2000045c

08005890 <_write_r>:
 8005890:	b538      	push	{r3, r4, r5, lr}
 8005892:	4d07      	ldr	r5, [pc, #28]	@ (80058b0 <_write_r+0x20>)
 8005894:	4604      	mov	r4, r0
 8005896:	4608      	mov	r0, r1
 8005898:	4611      	mov	r1, r2
 800589a:	2200      	movs	r2, #0
 800589c:	602a      	str	r2, [r5, #0]
 800589e:	461a      	mov	r2, r3
 80058a0:	f7fc f9af 	bl	8001c02 <_write>
 80058a4:	1c43      	adds	r3, r0, #1
 80058a6:	d102      	bne.n	80058ae <_write_r+0x1e>
 80058a8:	682b      	ldr	r3, [r5, #0]
 80058aa:	b103      	cbz	r3, 80058ae <_write_r+0x1e>
 80058ac:	6023      	str	r3, [r4, #0]
 80058ae:	bd38      	pop	{r3, r4, r5, pc}
 80058b0:	2000045c 	.word	0x2000045c

080058b4 <__errno>:
 80058b4:	4b01      	ldr	r3, [pc, #4]	@ (80058bc <__errno+0x8>)
 80058b6:	6818      	ldr	r0, [r3, #0]
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	20000024 	.word	0x20000024

080058c0 <__libc_init_array>:
 80058c0:	b570      	push	{r4, r5, r6, lr}
 80058c2:	4d0d      	ldr	r5, [pc, #52]	@ (80058f8 <__libc_init_array+0x38>)
 80058c4:	4c0d      	ldr	r4, [pc, #52]	@ (80058fc <__libc_init_array+0x3c>)
 80058c6:	1b64      	subs	r4, r4, r5
 80058c8:	10a4      	asrs	r4, r4, #2
 80058ca:	2600      	movs	r6, #0
 80058cc:	42a6      	cmp	r6, r4
 80058ce:	d109      	bne.n	80058e4 <__libc_init_array+0x24>
 80058d0:	4d0b      	ldr	r5, [pc, #44]	@ (8005900 <__libc_init_array+0x40>)
 80058d2:	4c0c      	ldr	r4, [pc, #48]	@ (8005904 <__libc_init_array+0x44>)
 80058d4:	f002 f868 	bl	80079a8 <_init>
 80058d8:	1b64      	subs	r4, r4, r5
 80058da:	10a4      	asrs	r4, r4, #2
 80058dc:	2600      	movs	r6, #0
 80058de:	42a6      	cmp	r6, r4
 80058e0:	d105      	bne.n	80058ee <__libc_init_array+0x2e>
 80058e2:	bd70      	pop	{r4, r5, r6, pc}
 80058e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80058e8:	4798      	blx	r3
 80058ea:	3601      	adds	r6, #1
 80058ec:	e7ee      	b.n	80058cc <__libc_init_array+0xc>
 80058ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80058f2:	4798      	blx	r3
 80058f4:	3601      	adds	r6, #1
 80058f6:	e7f2      	b.n	80058de <__libc_init_array+0x1e>
 80058f8:	08007f0c 	.word	0x08007f0c
 80058fc:	08007f0c 	.word	0x08007f0c
 8005900:	08007f0c 	.word	0x08007f0c
 8005904:	08007f10 	.word	0x08007f10

08005908 <__retarget_lock_init_recursive>:
 8005908:	4770      	bx	lr

0800590a <__retarget_lock_acquire_recursive>:
 800590a:	4770      	bx	lr

0800590c <__retarget_lock_release_recursive>:
 800590c:	4770      	bx	lr

0800590e <quorem>:
 800590e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005912:	6903      	ldr	r3, [r0, #16]
 8005914:	690c      	ldr	r4, [r1, #16]
 8005916:	42a3      	cmp	r3, r4
 8005918:	4607      	mov	r7, r0
 800591a:	db7e      	blt.n	8005a1a <quorem+0x10c>
 800591c:	3c01      	subs	r4, #1
 800591e:	f101 0814 	add.w	r8, r1, #20
 8005922:	00a3      	lsls	r3, r4, #2
 8005924:	f100 0514 	add.w	r5, r0, #20
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800592e:	9301      	str	r3, [sp, #4]
 8005930:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005934:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005938:	3301      	adds	r3, #1
 800593a:	429a      	cmp	r2, r3
 800593c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005940:	fbb2 f6f3 	udiv	r6, r2, r3
 8005944:	d32e      	bcc.n	80059a4 <quorem+0x96>
 8005946:	f04f 0a00 	mov.w	sl, #0
 800594a:	46c4      	mov	ip, r8
 800594c:	46ae      	mov	lr, r5
 800594e:	46d3      	mov	fp, sl
 8005950:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005954:	b298      	uxth	r0, r3
 8005956:	fb06 a000 	mla	r0, r6, r0, sl
 800595a:	0c02      	lsrs	r2, r0, #16
 800595c:	0c1b      	lsrs	r3, r3, #16
 800595e:	fb06 2303 	mla	r3, r6, r3, r2
 8005962:	f8de 2000 	ldr.w	r2, [lr]
 8005966:	b280      	uxth	r0, r0
 8005968:	b292      	uxth	r2, r2
 800596a:	1a12      	subs	r2, r2, r0
 800596c:	445a      	add	r2, fp
 800596e:	f8de 0000 	ldr.w	r0, [lr]
 8005972:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005976:	b29b      	uxth	r3, r3
 8005978:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800597c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005980:	b292      	uxth	r2, r2
 8005982:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005986:	45e1      	cmp	r9, ip
 8005988:	f84e 2b04 	str.w	r2, [lr], #4
 800598c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005990:	d2de      	bcs.n	8005950 <quorem+0x42>
 8005992:	9b00      	ldr	r3, [sp, #0]
 8005994:	58eb      	ldr	r3, [r5, r3]
 8005996:	b92b      	cbnz	r3, 80059a4 <quorem+0x96>
 8005998:	9b01      	ldr	r3, [sp, #4]
 800599a:	3b04      	subs	r3, #4
 800599c:	429d      	cmp	r5, r3
 800599e:	461a      	mov	r2, r3
 80059a0:	d32f      	bcc.n	8005a02 <quorem+0xf4>
 80059a2:	613c      	str	r4, [r7, #16]
 80059a4:	4638      	mov	r0, r7
 80059a6:	f001 f97d 	bl	8006ca4 <__mcmp>
 80059aa:	2800      	cmp	r0, #0
 80059ac:	db25      	blt.n	80059fa <quorem+0xec>
 80059ae:	4629      	mov	r1, r5
 80059b0:	2000      	movs	r0, #0
 80059b2:	f858 2b04 	ldr.w	r2, [r8], #4
 80059b6:	f8d1 c000 	ldr.w	ip, [r1]
 80059ba:	fa1f fe82 	uxth.w	lr, r2
 80059be:	fa1f f38c 	uxth.w	r3, ip
 80059c2:	eba3 030e 	sub.w	r3, r3, lr
 80059c6:	4403      	add	r3, r0
 80059c8:	0c12      	lsrs	r2, r2, #16
 80059ca:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80059ce:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059d8:	45c1      	cmp	r9, r8
 80059da:	f841 3b04 	str.w	r3, [r1], #4
 80059de:	ea4f 4022 	mov.w	r0, r2, asr #16
 80059e2:	d2e6      	bcs.n	80059b2 <quorem+0xa4>
 80059e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059ec:	b922      	cbnz	r2, 80059f8 <quorem+0xea>
 80059ee:	3b04      	subs	r3, #4
 80059f0:	429d      	cmp	r5, r3
 80059f2:	461a      	mov	r2, r3
 80059f4:	d30b      	bcc.n	8005a0e <quorem+0x100>
 80059f6:	613c      	str	r4, [r7, #16]
 80059f8:	3601      	adds	r6, #1
 80059fa:	4630      	mov	r0, r6
 80059fc:	b003      	add	sp, #12
 80059fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a02:	6812      	ldr	r2, [r2, #0]
 8005a04:	3b04      	subs	r3, #4
 8005a06:	2a00      	cmp	r2, #0
 8005a08:	d1cb      	bne.n	80059a2 <quorem+0x94>
 8005a0a:	3c01      	subs	r4, #1
 8005a0c:	e7c6      	b.n	800599c <quorem+0x8e>
 8005a0e:	6812      	ldr	r2, [r2, #0]
 8005a10:	3b04      	subs	r3, #4
 8005a12:	2a00      	cmp	r2, #0
 8005a14:	d1ef      	bne.n	80059f6 <quorem+0xe8>
 8005a16:	3c01      	subs	r4, #1
 8005a18:	e7ea      	b.n	80059f0 <quorem+0xe2>
 8005a1a:	2000      	movs	r0, #0
 8005a1c:	e7ee      	b.n	80059fc <quorem+0xee>
	...

08005a20 <_dtoa_r>:
 8005a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a24:	69c7      	ldr	r7, [r0, #28]
 8005a26:	b097      	sub	sp, #92	@ 0x5c
 8005a28:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005a2c:	ec55 4b10 	vmov	r4, r5, d0
 8005a30:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8005a32:	9107      	str	r1, [sp, #28]
 8005a34:	4681      	mov	r9, r0
 8005a36:	920c      	str	r2, [sp, #48]	@ 0x30
 8005a38:	9311      	str	r3, [sp, #68]	@ 0x44
 8005a3a:	b97f      	cbnz	r7, 8005a5c <_dtoa_r+0x3c>
 8005a3c:	2010      	movs	r0, #16
 8005a3e:	f000 fe09 	bl	8006654 <malloc>
 8005a42:	4602      	mov	r2, r0
 8005a44:	f8c9 001c 	str.w	r0, [r9, #28]
 8005a48:	b920      	cbnz	r0, 8005a54 <_dtoa_r+0x34>
 8005a4a:	4ba9      	ldr	r3, [pc, #676]	@ (8005cf0 <_dtoa_r+0x2d0>)
 8005a4c:	21ef      	movs	r1, #239	@ 0xef
 8005a4e:	48a9      	ldr	r0, [pc, #676]	@ (8005cf4 <_dtoa_r+0x2d4>)
 8005a50:	f001 fc6c 	bl	800732c <__assert_func>
 8005a54:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005a58:	6007      	str	r7, [r0, #0]
 8005a5a:	60c7      	str	r7, [r0, #12]
 8005a5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005a60:	6819      	ldr	r1, [r3, #0]
 8005a62:	b159      	cbz	r1, 8005a7c <_dtoa_r+0x5c>
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	604a      	str	r2, [r1, #4]
 8005a68:	2301      	movs	r3, #1
 8005a6a:	4093      	lsls	r3, r2
 8005a6c:	608b      	str	r3, [r1, #8]
 8005a6e:	4648      	mov	r0, r9
 8005a70:	f000 fee6 	bl	8006840 <_Bfree>
 8005a74:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	601a      	str	r2, [r3, #0]
 8005a7c:	1e2b      	subs	r3, r5, #0
 8005a7e:	bfb9      	ittee	lt
 8005a80:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005a84:	9305      	strlt	r3, [sp, #20]
 8005a86:	2300      	movge	r3, #0
 8005a88:	6033      	strge	r3, [r6, #0]
 8005a8a:	9f05      	ldr	r7, [sp, #20]
 8005a8c:	4b9a      	ldr	r3, [pc, #616]	@ (8005cf8 <_dtoa_r+0x2d8>)
 8005a8e:	bfbc      	itt	lt
 8005a90:	2201      	movlt	r2, #1
 8005a92:	6032      	strlt	r2, [r6, #0]
 8005a94:	43bb      	bics	r3, r7
 8005a96:	d112      	bne.n	8005abe <_dtoa_r+0x9e>
 8005a98:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005a9a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005a9e:	6013      	str	r3, [r2, #0]
 8005aa0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005aa4:	4323      	orrs	r3, r4
 8005aa6:	f000 855a 	beq.w	800655e <_dtoa_r+0xb3e>
 8005aaa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005aac:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8005d0c <_dtoa_r+0x2ec>
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f000 855c 	beq.w	800656e <_dtoa_r+0xb4e>
 8005ab6:	f10a 0303 	add.w	r3, sl, #3
 8005aba:	f000 bd56 	b.w	800656a <_dtoa_r+0xb4a>
 8005abe:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	ec51 0b17 	vmov	r0, r1, d7
 8005ac8:	2300      	movs	r3, #0
 8005aca:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005ace:	f7fa fffb 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ad2:	4680      	mov	r8, r0
 8005ad4:	b158      	cbz	r0, 8005aee <_dtoa_r+0xce>
 8005ad6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005ad8:	2301      	movs	r3, #1
 8005ada:	6013      	str	r3, [r2, #0]
 8005adc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005ade:	b113      	cbz	r3, 8005ae6 <_dtoa_r+0xc6>
 8005ae0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005ae2:	4b86      	ldr	r3, [pc, #536]	@ (8005cfc <_dtoa_r+0x2dc>)
 8005ae4:	6013      	str	r3, [r2, #0]
 8005ae6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005d10 <_dtoa_r+0x2f0>
 8005aea:	f000 bd40 	b.w	800656e <_dtoa_r+0xb4e>
 8005aee:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8005af2:	aa14      	add	r2, sp, #80	@ 0x50
 8005af4:	a915      	add	r1, sp, #84	@ 0x54
 8005af6:	4648      	mov	r0, r9
 8005af8:	f001 f984 	bl	8006e04 <__d2b>
 8005afc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005b00:	9002      	str	r0, [sp, #8]
 8005b02:	2e00      	cmp	r6, #0
 8005b04:	d078      	beq.n	8005bf8 <_dtoa_r+0x1d8>
 8005b06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b08:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8005b0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005b14:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005b18:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005b1c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005b20:	4619      	mov	r1, r3
 8005b22:	2200      	movs	r2, #0
 8005b24:	4b76      	ldr	r3, [pc, #472]	@ (8005d00 <_dtoa_r+0x2e0>)
 8005b26:	f7fa fbaf 	bl	8000288 <__aeabi_dsub>
 8005b2a:	a36b      	add	r3, pc, #428	@ (adr r3, 8005cd8 <_dtoa_r+0x2b8>)
 8005b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b30:	f7fa fd62 	bl	80005f8 <__aeabi_dmul>
 8005b34:	a36a      	add	r3, pc, #424	@ (adr r3, 8005ce0 <_dtoa_r+0x2c0>)
 8005b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3a:	f7fa fba7 	bl	800028c <__adddf3>
 8005b3e:	4604      	mov	r4, r0
 8005b40:	4630      	mov	r0, r6
 8005b42:	460d      	mov	r5, r1
 8005b44:	f7fa fcee 	bl	8000524 <__aeabi_i2d>
 8005b48:	a367      	add	r3, pc, #412	@ (adr r3, 8005ce8 <_dtoa_r+0x2c8>)
 8005b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4e:	f7fa fd53 	bl	80005f8 <__aeabi_dmul>
 8005b52:	4602      	mov	r2, r0
 8005b54:	460b      	mov	r3, r1
 8005b56:	4620      	mov	r0, r4
 8005b58:	4629      	mov	r1, r5
 8005b5a:	f7fa fb97 	bl	800028c <__adddf3>
 8005b5e:	4604      	mov	r4, r0
 8005b60:	460d      	mov	r5, r1
 8005b62:	f7fa fff9 	bl	8000b58 <__aeabi_d2iz>
 8005b66:	2200      	movs	r2, #0
 8005b68:	4607      	mov	r7, r0
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	4629      	mov	r1, r5
 8005b70:	f7fa ffb4 	bl	8000adc <__aeabi_dcmplt>
 8005b74:	b140      	cbz	r0, 8005b88 <_dtoa_r+0x168>
 8005b76:	4638      	mov	r0, r7
 8005b78:	f7fa fcd4 	bl	8000524 <__aeabi_i2d>
 8005b7c:	4622      	mov	r2, r4
 8005b7e:	462b      	mov	r3, r5
 8005b80:	f7fa ffa2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b84:	b900      	cbnz	r0, 8005b88 <_dtoa_r+0x168>
 8005b86:	3f01      	subs	r7, #1
 8005b88:	2f16      	cmp	r7, #22
 8005b8a:	d852      	bhi.n	8005c32 <_dtoa_r+0x212>
 8005b8c:	4b5d      	ldr	r3, [pc, #372]	@ (8005d04 <_dtoa_r+0x2e4>)
 8005b8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005b9a:	f7fa ff9f 	bl	8000adc <__aeabi_dcmplt>
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	d049      	beq.n	8005c36 <_dtoa_r+0x216>
 8005ba2:	3f01      	subs	r7, #1
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	9310      	str	r3, [sp, #64]	@ 0x40
 8005ba8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005baa:	1b9b      	subs	r3, r3, r6
 8005bac:	1e5a      	subs	r2, r3, #1
 8005bae:	bf45      	ittet	mi
 8005bb0:	f1c3 0301 	rsbmi	r3, r3, #1
 8005bb4:	9300      	strmi	r3, [sp, #0]
 8005bb6:	2300      	movpl	r3, #0
 8005bb8:	2300      	movmi	r3, #0
 8005bba:	9206      	str	r2, [sp, #24]
 8005bbc:	bf54      	ite	pl
 8005bbe:	9300      	strpl	r3, [sp, #0]
 8005bc0:	9306      	strmi	r3, [sp, #24]
 8005bc2:	2f00      	cmp	r7, #0
 8005bc4:	db39      	blt.n	8005c3a <_dtoa_r+0x21a>
 8005bc6:	9b06      	ldr	r3, [sp, #24]
 8005bc8:	970d      	str	r7, [sp, #52]	@ 0x34
 8005bca:	443b      	add	r3, r7
 8005bcc:	9306      	str	r3, [sp, #24]
 8005bce:	2300      	movs	r3, #0
 8005bd0:	9308      	str	r3, [sp, #32]
 8005bd2:	9b07      	ldr	r3, [sp, #28]
 8005bd4:	2b09      	cmp	r3, #9
 8005bd6:	d863      	bhi.n	8005ca0 <_dtoa_r+0x280>
 8005bd8:	2b05      	cmp	r3, #5
 8005bda:	bfc4      	itt	gt
 8005bdc:	3b04      	subgt	r3, #4
 8005bde:	9307      	strgt	r3, [sp, #28]
 8005be0:	9b07      	ldr	r3, [sp, #28]
 8005be2:	f1a3 0302 	sub.w	r3, r3, #2
 8005be6:	bfcc      	ite	gt
 8005be8:	2400      	movgt	r4, #0
 8005bea:	2401      	movle	r4, #1
 8005bec:	2b03      	cmp	r3, #3
 8005bee:	d863      	bhi.n	8005cb8 <_dtoa_r+0x298>
 8005bf0:	e8df f003 	tbb	[pc, r3]
 8005bf4:	2b375452 	.word	0x2b375452
 8005bf8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005bfc:	441e      	add	r6, r3
 8005bfe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005c02:	2b20      	cmp	r3, #32
 8005c04:	bfc1      	itttt	gt
 8005c06:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005c0a:	409f      	lslgt	r7, r3
 8005c0c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005c10:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005c14:	bfd6      	itet	le
 8005c16:	f1c3 0320 	rsble	r3, r3, #32
 8005c1a:	ea47 0003 	orrgt.w	r0, r7, r3
 8005c1e:	fa04 f003 	lslle.w	r0, r4, r3
 8005c22:	f7fa fc6f 	bl	8000504 <__aeabi_ui2d>
 8005c26:	2201      	movs	r2, #1
 8005c28:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005c2c:	3e01      	subs	r6, #1
 8005c2e:	9212      	str	r2, [sp, #72]	@ 0x48
 8005c30:	e776      	b.n	8005b20 <_dtoa_r+0x100>
 8005c32:	2301      	movs	r3, #1
 8005c34:	e7b7      	b.n	8005ba6 <_dtoa_r+0x186>
 8005c36:	9010      	str	r0, [sp, #64]	@ 0x40
 8005c38:	e7b6      	b.n	8005ba8 <_dtoa_r+0x188>
 8005c3a:	9b00      	ldr	r3, [sp, #0]
 8005c3c:	1bdb      	subs	r3, r3, r7
 8005c3e:	9300      	str	r3, [sp, #0]
 8005c40:	427b      	negs	r3, r7
 8005c42:	9308      	str	r3, [sp, #32]
 8005c44:	2300      	movs	r3, #0
 8005c46:	930d      	str	r3, [sp, #52]	@ 0x34
 8005c48:	e7c3      	b.n	8005bd2 <_dtoa_r+0x1b2>
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005c50:	eb07 0b03 	add.w	fp, r7, r3
 8005c54:	f10b 0301 	add.w	r3, fp, #1
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	9303      	str	r3, [sp, #12]
 8005c5c:	bfb8      	it	lt
 8005c5e:	2301      	movlt	r3, #1
 8005c60:	e006      	b.n	8005c70 <_dtoa_r+0x250>
 8005c62:	2301      	movs	r3, #1
 8005c64:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	dd28      	ble.n	8005cbe <_dtoa_r+0x29e>
 8005c6c:	469b      	mov	fp, r3
 8005c6e:	9303      	str	r3, [sp, #12]
 8005c70:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005c74:	2100      	movs	r1, #0
 8005c76:	2204      	movs	r2, #4
 8005c78:	f102 0514 	add.w	r5, r2, #20
 8005c7c:	429d      	cmp	r5, r3
 8005c7e:	d926      	bls.n	8005cce <_dtoa_r+0x2ae>
 8005c80:	6041      	str	r1, [r0, #4]
 8005c82:	4648      	mov	r0, r9
 8005c84:	f000 fd9c 	bl	80067c0 <_Balloc>
 8005c88:	4682      	mov	sl, r0
 8005c8a:	2800      	cmp	r0, #0
 8005c8c:	d142      	bne.n	8005d14 <_dtoa_r+0x2f4>
 8005c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8005d08 <_dtoa_r+0x2e8>)
 8005c90:	4602      	mov	r2, r0
 8005c92:	f240 11af 	movw	r1, #431	@ 0x1af
 8005c96:	e6da      	b.n	8005a4e <_dtoa_r+0x2e>
 8005c98:	2300      	movs	r3, #0
 8005c9a:	e7e3      	b.n	8005c64 <_dtoa_r+0x244>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	e7d5      	b.n	8005c4c <_dtoa_r+0x22c>
 8005ca0:	2401      	movs	r4, #1
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	9307      	str	r3, [sp, #28]
 8005ca6:	9409      	str	r4, [sp, #36]	@ 0x24
 8005ca8:	f04f 3bff 	mov.w	fp, #4294967295
 8005cac:	2200      	movs	r2, #0
 8005cae:	f8cd b00c 	str.w	fp, [sp, #12]
 8005cb2:	2312      	movs	r3, #18
 8005cb4:	920c      	str	r2, [sp, #48]	@ 0x30
 8005cb6:	e7db      	b.n	8005c70 <_dtoa_r+0x250>
 8005cb8:	2301      	movs	r3, #1
 8005cba:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cbc:	e7f4      	b.n	8005ca8 <_dtoa_r+0x288>
 8005cbe:	f04f 0b01 	mov.w	fp, #1
 8005cc2:	f8cd b00c 	str.w	fp, [sp, #12]
 8005cc6:	465b      	mov	r3, fp
 8005cc8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8005ccc:	e7d0      	b.n	8005c70 <_dtoa_r+0x250>
 8005cce:	3101      	adds	r1, #1
 8005cd0:	0052      	lsls	r2, r2, #1
 8005cd2:	e7d1      	b.n	8005c78 <_dtoa_r+0x258>
 8005cd4:	f3af 8000 	nop.w
 8005cd8:	636f4361 	.word	0x636f4361
 8005cdc:	3fd287a7 	.word	0x3fd287a7
 8005ce0:	8b60c8b3 	.word	0x8b60c8b3
 8005ce4:	3fc68a28 	.word	0x3fc68a28
 8005ce8:	509f79fb 	.word	0x509f79fb
 8005cec:	3fd34413 	.word	0x3fd34413
 8005cf0:	08007bcd 	.word	0x08007bcd
 8005cf4:	08007be4 	.word	0x08007be4
 8005cf8:	7ff00000 	.word	0x7ff00000
 8005cfc:	08007b9d 	.word	0x08007b9d
 8005d00:	3ff80000 	.word	0x3ff80000
 8005d04:	08007d38 	.word	0x08007d38
 8005d08:	08007c3c 	.word	0x08007c3c
 8005d0c:	08007bc9 	.word	0x08007bc9
 8005d10:	08007b9c 	.word	0x08007b9c
 8005d14:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005d18:	6018      	str	r0, [r3, #0]
 8005d1a:	9b03      	ldr	r3, [sp, #12]
 8005d1c:	2b0e      	cmp	r3, #14
 8005d1e:	f200 80a1 	bhi.w	8005e64 <_dtoa_r+0x444>
 8005d22:	2c00      	cmp	r4, #0
 8005d24:	f000 809e 	beq.w	8005e64 <_dtoa_r+0x444>
 8005d28:	2f00      	cmp	r7, #0
 8005d2a:	dd33      	ble.n	8005d94 <_dtoa_r+0x374>
 8005d2c:	4b9c      	ldr	r3, [pc, #624]	@ (8005fa0 <_dtoa_r+0x580>)
 8005d2e:	f007 020f 	and.w	r2, r7, #15
 8005d32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d36:	ed93 7b00 	vldr	d7, [r3]
 8005d3a:	05f8      	lsls	r0, r7, #23
 8005d3c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005d40:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005d44:	d516      	bpl.n	8005d74 <_dtoa_r+0x354>
 8005d46:	4b97      	ldr	r3, [pc, #604]	@ (8005fa4 <_dtoa_r+0x584>)
 8005d48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005d4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d50:	f7fa fd7c 	bl	800084c <__aeabi_ddiv>
 8005d54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d58:	f004 040f 	and.w	r4, r4, #15
 8005d5c:	2603      	movs	r6, #3
 8005d5e:	4d91      	ldr	r5, [pc, #580]	@ (8005fa4 <_dtoa_r+0x584>)
 8005d60:	b954      	cbnz	r4, 8005d78 <_dtoa_r+0x358>
 8005d62:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005d66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d6a:	f7fa fd6f 	bl	800084c <__aeabi_ddiv>
 8005d6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d72:	e028      	b.n	8005dc6 <_dtoa_r+0x3a6>
 8005d74:	2602      	movs	r6, #2
 8005d76:	e7f2      	b.n	8005d5e <_dtoa_r+0x33e>
 8005d78:	07e1      	lsls	r1, r4, #31
 8005d7a:	d508      	bpl.n	8005d8e <_dtoa_r+0x36e>
 8005d7c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005d80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005d84:	f7fa fc38 	bl	80005f8 <__aeabi_dmul>
 8005d88:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005d8c:	3601      	adds	r6, #1
 8005d8e:	1064      	asrs	r4, r4, #1
 8005d90:	3508      	adds	r5, #8
 8005d92:	e7e5      	b.n	8005d60 <_dtoa_r+0x340>
 8005d94:	f000 80af 	beq.w	8005ef6 <_dtoa_r+0x4d6>
 8005d98:	427c      	negs	r4, r7
 8005d9a:	4b81      	ldr	r3, [pc, #516]	@ (8005fa0 <_dtoa_r+0x580>)
 8005d9c:	4d81      	ldr	r5, [pc, #516]	@ (8005fa4 <_dtoa_r+0x584>)
 8005d9e:	f004 020f 	and.w	r2, r4, #15
 8005da2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005daa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005dae:	f7fa fc23 	bl	80005f8 <__aeabi_dmul>
 8005db2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005db6:	1124      	asrs	r4, r4, #4
 8005db8:	2300      	movs	r3, #0
 8005dba:	2602      	movs	r6, #2
 8005dbc:	2c00      	cmp	r4, #0
 8005dbe:	f040 808f 	bne.w	8005ee0 <_dtoa_r+0x4c0>
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1d3      	bne.n	8005d6e <_dtoa_r+0x34e>
 8005dc6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005dc8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 8094 	beq.w	8005efa <_dtoa_r+0x4da>
 8005dd2:	4b75      	ldr	r3, [pc, #468]	@ (8005fa8 <_dtoa_r+0x588>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	4629      	mov	r1, r5
 8005dda:	f7fa fe7f 	bl	8000adc <__aeabi_dcmplt>
 8005dde:	2800      	cmp	r0, #0
 8005de0:	f000 808b 	beq.w	8005efa <_dtoa_r+0x4da>
 8005de4:	9b03      	ldr	r3, [sp, #12]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f000 8087 	beq.w	8005efa <_dtoa_r+0x4da>
 8005dec:	f1bb 0f00 	cmp.w	fp, #0
 8005df0:	dd34      	ble.n	8005e5c <_dtoa_r+0x43c>
 8005df2:	4620      	mov	r0, r4
 8005df4:	4b6d      	ldr	r3, [pc, #436]	@ (8005fac <_dtoa_r+0x58c>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	4629      	mov	r1, r5
 8005dfa:	f7fa fbfd 	bl	80005f8 <__aeabi_dmul>
 8005dfe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e02:	f107 38ff 	add.w	r8, r7, #4294967295
 8005e06:	3601      	adds	r6, #1
 8005e08:	465c      	mov	r4, fp
 8005e0a:	4630      	mov	r0, r6
 8005e0c:	f7fa fb8a 	bl	8000524 <__aeabi_i2d>
 8005e10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e14:	f7fa fbf0 	bl	80005f8 <__aeabi_dmul>
 8005e18:	4b65      	ldr	r3, [pc, #404]	@ (8005fb0 <_dtoa_r+0x590>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f7fa fa36 	bl	800028c <__adddf3>
 8005e20:	4605      	mov	r5, r0
 8005e22:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005e26:	2c00      	cmp	r4, #0
 8005e28:	d16a      	bne.n	8005f00 <_dtoa_r+0x4e0>
 8005e2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e2e:	4b61      	ldr	r3, [pc, #388]	@ (8005fb4 <_dtoa_r+0x594>)
 8005e30:	2200      	movs	r2, #0
 8005e32:	f7fa fa29 	bl	8000288 <__aeabi_dsub>
 8005e36:	4602      	mov	r2, r0
 8005e38:	460b      	mov	r3, r1
 8005e3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e3e:	462a      	mov	r2, r5
 8005e40:	4633      	mov	r3, r6
 8005e42:	f7fa fe69 	bl	8000b18 <__aeabi_dcmpgt>
 8005e46:	2800      	cmp	r0, #0
 8005e48:	f040 8298 	bne.w	800637c <_dtoa_r+0x95c>
 8005e4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e50:	462a      	mov	r2, r5
 8005e52:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005e56:	f7fa fe41 	bl	8000adc <__aeabi_dcmplt>
 8005e5a:	bb38      	cbnz	r0, 8005eac <_dtoa_r+0x48c>
 8005e5c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005e60:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005e64:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f2c0 8157 	blt.w	800611a <_dtoa_r+0x6fa>
 8005e6c:	2f0e      	cmp	r7, #14
 8005e6e:	f300 8154 	bgt.w	800611a <_dtoa_r+0x6fa>
 8005e72:	4b4b      	ldr	r3, [pc, #300]	@ (8005fa0 <_dtoa_r+0x580>)
 8005e74:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005e78:	ed93 7b00 	vldr	d7, [r3]
 8005e7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	ed8d 7b00 	vstr	d7, [sp]
 8005e84:	f280 80e5 	bge.w	8006052 <_dtoa_r+0x632>
 8005e88:	9b03      	ldr	r3, [sp, #12]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f300 80e1 	bgt.w	8006052 <_dtoa_r+0x632>
 8005e90:	d10c      	bne.n	8005eac <_dtoa_r+0x48c>
 8005e92:	4b48      	ldr	r3, [pc, #288]	@ (8005fb4 <_dtoa_r+0x594>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	ec51 0b17 	vmov	r0, r1, d7
 8005e9a:	f7fa fbad 	bl	80005f8 <__aeabi_dmul>
 8005e9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ea2:	f7fa fe2f 	bl	8000b04 <__aeabi_dcmpge>
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	f000 8266 	beq.w	8006378 <_dtoa_r+0x958>
 8005eac:	2400      	movs	r4, #0
 8005eae:	4625      	mov	r5, r4
 8005eb0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005eb2:	4656      	mov	r6, sl
 8005eb4:	ea6f 0803 	mvn.w	r8, r3
 8005eb8:	2700      	movs	r7, #0
 8005eba:	4621      	mov	r1, r4
 8005ebc:	4648      	mov	r0, r9
 8005ebe:	f000 fcbf 	bl	8006840 <_Bfree>
 8005ec2:	2d00      	cmp	r5, #0
 8005ec4:	f000 80bd 	beq.w	8006042 <_dtoa_r+0x622>
 8005ec8:	b12f      	cbz	r7, 8005ed6 <_dtoa_r+0x4b6>
 8005eca:	42af      	cmp	r7, r5
 8005ecc:	d003      	beq.n	8005ed6 <_dtoa_r+0x4b6>
 8005ece:	4639      	mov	r1, r7
 8005ed0:	4648      	mov	r0, r9
 8005ed2:	f000 fcb5 	bl	8006840 <_Bfree>
 8005ed6:	4629      	mov	r1, r5
 8005ed8:	4648      	mov	r0, r9
 8005eda:	f000 fcb1 	bl	8006840 <_Bfree>
 8005ede:	e0b0      	b.n	8006042 <_dtoa_r+0x622>
 8005ee0:	07e2      	lsls	r2, r4, #31
 8005ee2:	d505      	bpl.n	8005ef0 <_dtoa_r+0x4d0>
 8005ee4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005ee8:	f7fa fb86 	bl	80005f8 <__aeabi_dmul>
 8005eec:	3601      	adds	r6, #1
 8005eee:	2301      	movs	r3, #1
 8005ef0:	1064      	asrs	r4, r4, #1
 8005ef2:	3508      	adds	r5, #8
 8005ef4:	e762      	b.n	8005dbc <_dtoa_r+0x39c>
 8005ef6:	2602      	movs	r6, #2
 8005ef8:	e765      	b.n	8005dc6 <_dtoa_r+0x3a6>
 8005efa:	9c03      	ldr	r4, [sp, #12]
 8005efc:	46b8      	mov	r8, r7
 8005efe:	e784      	b.n	8005e0a <_dtoa_r+0x3ea>
 8005f00:	4b27      	ldr	r3, [pc, #156]	@ (8005fa0 <_dtoa_r+0x580>)
 8005f02:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005f04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005f08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005f0c:	4454      	add	r4, sl
 8005f0e:	2900      	cmp	r1, #0
 8005f10:	d054      	beq.n	8005fbc <_dtoa_r+0x59c>
 8005f12:	4929      	ldr	r1, [pc, #164]	@ (8005fb8 <_dtoa_r+0x598>)
 8005f14:	2000      	movs	r0, #0
 8005f16:	f7fa fc99 	bl	800084c <__aeabi_ddiv>
 8005f1a:	4633      	mov	r3, r6
 8005f1c:	462a      	mov	r2, r5
 8005f1e:	f7fa f9b3 	bl	8000288 <__aeabi_dsub>
 8005f22:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005f26:	4656      	mov	r6, sl
 8005f28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f2c:	f7fa fe14 	bl	8000b58 <__aeabi_d2iz>
 8005f30:	4605      	mov	r5, r0
 8005f32:	f7fa faf7 	bl	8000524 <__aeabi_i2d>
 8005f36:	4602      	mov	r2, r0
 8005f38:	460b      	mov	r3, r1
 8005f3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f3e:	f7fa f9a3 	bl	8000288 <__aeabi_dsub>
 8005f42:	3530      	adds	r5, #48	@ 0x30
 8005f44:	4602      	mov	r2, r0
 8005f46:	460b      	mov	r3, r1
 8005f48:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005f4c:	f806 5b01 	strb.w	r5, [r6], #1
 8005f50:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005f54:	f7fa fdc2 	bl	8000adc <__aeabi_dcmplt>
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	d172      	bne.n	8006042 <_dtoa_r+0x622>
 8005f5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f60:	4911      	ldr	r1, [pc, #68]	@ (8005fa8 <_dtoa_r+0x588>)
 8005f62:	2000      	movs	r0, #0
 8005f64:	f7fa f990 	bl	8000288 <__aeabi_dsub>
 8005f68:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005f6c:	f7fa fdb6 	bl	8000adc <__aeabi_dcmplt>
 8005f70:	2800      	cmp	r0, #0
 8005f72:	f040 80b4 	bne.w	80060de <_dtoa_r+0x6be>
 8005f76:	42a6      	cmp	r6, r4
 8005f78:	f43f af70 	beq.w	8005e5c <_dtoa_r+0x43c>
 8005f7c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005f80:	4b0a      	ldr	r3, [pc, #40]	@ (8005fac <_dtoa_r+0x58c>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	f7fa fb38 	bl	80005f8 <__aeabi_dmul>
 8005f88:	4b08      	ldr	r3, [pc, #32]	@ (8005fac <_dtoa_r+0x58c>)
 8005f8a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005f8e:	2200      	movs	r2, #0
 8005f90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f94:	f7fa fb30 	bl	80005f8 <__aeabi_dmul>
 8005f98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f9c:	e7c4      	b.n	8005f28 <_dtoa_r+0x508>
 8005f9e:	bf00      	nop
 8005fa0:	08007d38 	.word	0x08007d38
 8005fa4:	08007d10 	.word	0x08007d10
 8005fa8:	3ff00000 	.word	0x3ff00000
 8005fac:	40240000 	.word	0x40240000
 8005fb0:	401c0000 	.word	0x401c0000
 8005fb4:	40140000 	.word	0x40140000
 8005fb8:	3fe00000 	.word	0x3fe00000
 8005fbc:	4631      	mov	r1, r6
 8005fbe:	4628      	mov	r0, r5
 8005fc0:	f7fa fb1a 	bl	80005f8 <__aeabi_dmul>
 8005fc4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005fc8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005fca:	4656      	mov	r6, sl
 8005fcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fd0:	f7fa fdc2 	bl	8000b58 <__aeabi_d2iz>
 8005fd4:	4605      	mov	r5, r0
 8005fd6:	f7fa faa5 	bl	8000524 <__aeabi_i2d>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	460b      	mov	r3, r1
 8005fde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fe2:	f7fa f951 	bl	8000288 <__aeabi_dsub>
 8005fe6:	3530      	adds	r5, #48	@ 0x30
 8005fe8:	f806 5b01 	strb.w	r5, [r6], #1
 8005fec:	4602      	mov	r2, r0
 8005fee:	460b      	mov	r3, r1
 8005ff0:	42a6      	cmp	r6, r4
 8005ff2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005ff6:	f04f 0200 	mov.w	r2, #0
 8005ffa:	d124      	bne.n	8006046 <_dtoa_r+0x626>
 8005ffc:	4baf      	ldr	r3, [pc, #700]	@ (80062bc <_dtoa_r+0x89c>)
 8005ffe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006002:	f7fa f943 	bl	800028c <__adddf3>
 8006006:	4602      	mov	r2, r0
 8006008:	460b      	mov	r3, r1
 800600a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800600e:	f7fa fd83 	bl	8000b18 <__aeabi_dcmpgt>
 8006012:	2800      	cmp	r0, #0
 8006014:	d163      	bne.n	80060de <_dtoa_r+0x6be>
 8006016:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800601a:	49a8      	ldr	r1, [pc, #672]	@ (80062bc <_dtoa_r+0x89c>)
 800601c:	2000      	movs	r0, #0
 800601e:	f7fa f933 	bl	8000288 <__aeabi_dsub>
 8006022:	4602      	mov	r2, r0
 8006024:	460b      	mov	r3, r1
 8006026:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800602a:	f7fa fd57 	bl	8000adc <__aeabi_dcmplt>
 800602e:	2800      	cmp	r0, #0
 8006030:	f43f af14 	beq.w	8005e5c <_dtoa_r+0x43c>
 8006034:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006036:	1e73      	subs	r3, r6, #1
 8006038:	9313      	str	r3, [sp, #76]	@ 0x4c
 800603a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800603e:	2b30      	cmp	r3, #48	@ 0x30
 8006040:	d0f8      	beq.n	8006034 <_dtoa_r+0x614>
 8006042:	4647      	mov	r7, r8
 8006044:	e03b      	b.n	80060be <_dtoa_r+0x69e>
 8006046:	4b9e      	ldr	r3, [pc, #632]	@ (80062c0 <_dtoa_r+0x8a0>)
 8006048:	f7fa fad6 	bl	80005f8 <__aeabi_dmul>
 800604c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006050:	e7bc      	b.n	8005fcc <_dtoa_r+0x5ac>
 8006052:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006056:	4656      	mov	r6, sl
 8006058:	e9dd 2300 	ldrd	r2, r3, [sp]
 800605c:	4620      	mov	r0, r4
 800605e:	4629      	mov	r1, r5
 8006060:	f7fa fbf4 	bl	800084c <__aeabi_ddiv>
 8006064:	f7fa fd78 	bl	8000b58 <__aeabi_d2iz>
 8006068:	4680      	mov	r8, r0
 800606a:	f7fa fa5b 	bl	8000524 <__aeabi_i2d>
 800606e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006072:	f7fa fac1 	bl	80005f8 <__aeabi_dmul>
 8006076:	4602      	mov	r2, r0
 8006078:	460b      	mov	r3, r1
 800607a:	4620      	mov	r0, r4
 800607c:	4629      	mov	r1, r5
 800607e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006082:	f7fa f901 	bl	8000288 <__aeabi_dsub>
 8006086:	f806 4b01 	strb.w	r4, [r6], #1
 800608a:	9d03      	ldr	r5, [sp, #12]
 800608c:	eba6 040a 	sub.w	r4, r6, sl
 8006090:	42a5      	cmp	r5, r4
 8006092:	4602      	mov	r2, r0
 8006094:	460b      	mov	r3, r1
 8006096:	d133      	bne.n	8006100 <_dtoa_r+0x6e0>
 8006098:	f7fa f8f8 	bl	800028c <__adddf3>
 800609c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060a0:	4604      	mov	r4, r0
 80060a2:	460d      	mov	r5, r1
 80060a4:	f7fa fd38 	bl	8000b18 <__aeabi_dcmpgt>
 80060a8:	b9c0      	cbnz	r0, 80060dc <_dtoa_r+0x6bc>
 80060aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060ae:	4620      	mov	r0, r4
 80060b0:	4629      	mov	r1, r5
 80060b2:	f7fa fd09 	bl	8000ac8 <__aeabi_dcmpeq>
 80060b6:	b110      	cbz	r0, 80060be <_dtoa_r+0x69e>
 80060b8:	f018 0f01 	tst.w	r8, #1
 80060bc:	d10e      	bne.n	80060dc <_dtoa_r+0x6bc>
 80060be:	9902      	ldr	r1, [sp, #8]
 80060c0:	4648      	mov	r0, r9
 80060c2:	f000 fbbd 	bl	8006840 <_Bfree>
 80060c6:	2300      	movs	r3, #0
 80060c8:	7033      	strb	r3, [r6, #0]
 80060ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80060cc:	3701      	adds	r7, #1
 80060ce:	601f      	str	r7, [r3, #0]
 80060d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f000 824b 	beq.w	800656e <_dtoa_r+0xb4e>
 80060d8:	601e      	str	r6, [r3, #0]
 80060da:	e248      	b.n	800656e <_dtoa_r+0xb4e>
 80060dc:	46b8      	mov	r8, r7
 80060de:	4633      	mov	r3, r6
 80060e0:	461e      	mov	r6, r3
 80060e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80060e6:	2a39      	cmp	r2, #57	@ 0x39
 80060e8:	d106      	bne.n	80060f8 <_dtoa_r+0x6d8>
 80060ea:	459a      	cmp	sl, r3
 80060ec:	d1f8      	bne.n	80060e0 <_dtoa_r+0x6c0>
 80060ee:	2230      	movs	r2, #48	@ 0x30
 80060f0:	f108 0801 	add.w	r8, r8, #1
 80060f4:	f88a 2000 	strb.w	r2, [sl]
 80060f8:	781a      	ldrb	r2, [r3, #0]
 80060fa:	3201      	adds	r2, #1
 80060fc:	701a      	strb	r2, [r3, #0]
 80060fe:	e7a0      	b.n	8006042 <_dtoa_r+0x622>
 8006100:	4b6f      	ldr	r3, [pc, #444]	@ (80062c0 <_dtoa_r+0x8a0>)
 8006102:	2200      	movs	r2, #0
 8006104:	f7fa fa78 	bl	80005f8 <__aeabi_dmul>
 8006108:	2200      	movs	r2, #0
 800610a:	2300      	movs	r3, #0
 800610c:	4604      	mov	r4, r0
 800610e:	460d      	mov	r5, r1
 8006110:	f7fa fcda 	bl	8000ac8 <__aeabi_dcmpeq>
 8006114:	2800      	cmp	r0, #0
 8006116:	d09f      	beq.n	8006058 <_dtoa_r+0x638>
 8006118:	e7d1      	b.n	80060be <_dtoa_r+0x69e>
 800611a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800611c:	2a00      	cmp	r2, #0
 800611e:	f000 80ea 	beq.w	80062f6 <_dtoa_r+0x8d6>
 8006122:	9a07      	ldr	r2, [sp, #28]
 8006124:	2a01      	cmp	r2, #1
 8006126:	f300 80cd 	bgt.w	80062c4 <_dtoa_r+0x8a4>
 800612a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800612c:	2a00      	cmp	r2, #0
 800612e:	f000 80c1 	beq.w	80062b4 <_dtoa_r+0x894>
 8006132:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006136:	9c08      	ldr	r4, [sp, #32]
 8006138:	9e00      	ldr	r6, [sp, #0]
 800613a:	9a00      	ldr	r2, [sp, #0]
 800613c:	441a      	add	r2, r3
 800613e:	9200      	str	r2, [sp, #0]
 8006140:	9a06      	ldr	r2, [sp, #24]
 8006142:	2101      	movs	r1, #1
 8006144:	441a      	add	r2, r3
 8006146:	4648      	mov	r0, r9
 8006148:	9206      	str	r2, [sp, #24]
 800614a:	f000 fc2d 	bl	80069a8 <__i2b>
 800614e:	4605      	mov	r5, r0
 8006150:	b166      	cbz	r6, 800616c <_dtoa_r+0x74c>
 8006152:	9b06      	ldr	r3, [sp, #24]
 8006154:	2b00      	cmp	r3, #0
 8006156:	dd09      	ble.n	800616c <_dtoa_r+0x74c>
 8006158:	42b3      	cmp	r3, r6
 800615a:	9a00      	ldr	r2, [sp, #0]
 800615c:	bfa8      	it	ge
 800615e:	4633      	movge	r3, r6
 8006160:	1ad2      	subs	r2, r2, r3
 8006162:	9200      	str	r2, [sp, #0]
 8006164:	9a06      	ldr	r2, [sp, #24]
 8006166:	1af6      	subs	r6, r6, r3
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	9306      	str	r3, [sp, #24]
 800616c:	9b08      	ldr	r3, [sp, #32]
 800616e:	b30b      	cbz	r3, 80061b4 <_dtoa_r+0x794>
 8006170:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 80c6 	beq.w	8006304 <_dtoa_r+0x8e4>
 8006178:	2c00      	cmp	r4, #0
 800617a:	f000 80c0 	beq.w	80062fe <_dtoa_r+0x8de>
 800617e:	4629      	mov	r1, r5
 8006180:	4622      	mov	r2, r4
 8006182:	4648      	mov	r0, r9
 8006184:	f000 fcc8 	bl	8006b18 <__pow5mult>
 8006188:	9a02      	ldr	r2, [sp, #8]
 800618a:	4601      	mov	r1, r0
 800618c:	4605      	mov	r5, r0
 800618e:	4648      	mov	r0, r9
 8006190:	f000 fc20 	bl	80069d4 <__multiply>
 8006194:	9902      	ldr	r1, [sp, #8]
 8006196:	4680      	mov	r8, r0
 8006198:	4648      	mov	r0, r9
 800619a:	f000 fb51 	bl	8006840 <_Bfree>
 800619e:	9b08      	ldr	r3, [sp, #32]
 80061a0:	1b1b      	subs	r3, r3, r4
 80061a2:	9308      	str	r3, [sp, #32]
 80061a4:	f000 80b1 	beq.w	800630a <_dtoa_r+0x8ea>
 80061a8:	9a08      	ldr	r2, [sp, #32]
 80061aa:	4641      	mov	r1, r8
 80061ac:	4648      	mov	r0, r9
 80061ae:	f000 fcb3 	bl	8006b18 <__pow5mult>
 80061b2:	9002      	str	r0, [sp, #8]
 80061b4:	2101      	movs	r1, #1
 80061b6:	4648      	mov	r0, r9
 80061b8:	f000 fbf6 	bl	80069a8 <__i2b>
 80061bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80061be:	4604      	mov	r4, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	f000 81d8 	beq.w	8006576 <_dtoa_r+0xb56>
 80061c6:	461a      	mov	r2, r3
 80061c8:	4601      	mov	r1, r0
 80061ca:	4648      	mov	r0, r9
 80061cc:	f000 fca4 	bl	8006b18 <__pow5mult>
 80061d0:	9b07      	ldr	r3, [sp, #28]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	4604      	mov	r4, r0
 80061d6:	f300 809f 	bgt.w	8006318 <_dtoa_r+0x8f8>
 80061da:	9b04      	ldr	r3, [sp, #16]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f040 8097 	bne.w	8006310 <_dtoa_r+0x8f0>
 80061e2:	9b05      	ldr	r3, [sp, #20]
 80061e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	f040 8093 	bne.w	8006314 <_dtoa_r+0x8f4>
 80061ee:	9b05      	ldr	r3, [sp, #20]
 80061f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80061f4:	0d1b      	lsrs	r3, r3, #20
 80061f6:	051b      	lsls	r3, r3, #20
 80061f8:	b133      	cbz	r3, 8006208 <_dtoa_r+0x7e8>
 80061fa:	9b00      	ldr	r3, [sp, #0]
 80061fc:	3301      	adds	r3, #1
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	9b06      	ldr	r3, [sp, #24]
 8006202:	3301      	adds	r3, #1
 8006204:	9306      	str	r3, [sp, #24]
 8006206:	2301      	movs	r3, #1
 8006208:	9308      	str	r3, [sp, #32]
 800620a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 81b8 	beq.w	8006582 <_dtoa_r+0xb62>
 8006212:	6923      	ldr	r3, [r4, #16]
 8006214:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006218:	6918      	ldr	r0, [r3, #16]
 800621a:	f000 fb79 	bl	8006910 <__hi0bits>
 800621e:	f1c0 0020 	rsb	r0, r0, #32
 8006222:	9b06      	ldr	r3, [sp, #24]
 8006224:	4418      	add	r0, r3
 8006226:	f010 001f 	ands.w	r0, r0, #31
 800622a:	f000 8082 	beq.w	8006332 <_dtoa_r+0x912>
 800622e:	f1c0 0320 	rsb	r3, r0, #32
 8006232:	2b04      	cmp	r3, #4
 8006234:	dd73      	ble.n	800631e <_dtoa_r+0x8fe>
 8006236:	9b00      	ldr	r3, [sp, #0]
 8006238:	f1c0 001c 	rsb	r0, r0, #28
 800623c:	4403      	add	r3, r0
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	9b06      	ldr	r3, [sp, #24]
 8006242:	4403      	add	r3, r0
 8006244:	4406      	add	r6, r0
 8006246:	9306      	str	r3, [sp, #24]
 8006248:	9b00      	ldr	r3, [sp, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	dd05      	ble.n	800625a <_dtoa_r+0x83a>
 800624e:	9902      	ldr	r1, [sp, #8]
 8006250:	461a      	mov	r2, r3
 8006252:	4648      	mov	r0, r9
 8006254:	f000 fcba 	bl	8006bcc <__lshift>
 8006258:	9002      	str	r0, [sp, #8]
 800625a:	9b06      	ldr	r3, [sp, #24]
 800625c:	2b00      	cmp	r3, #0
 800625e:	dd05      	ble.n	800626c <_dtoa_r+0x84c>
 8006260:	4621      	mov	r1, r4
 8006262:	461a      	mov	r2, r3
 8006264:	4648      	mov	r0, r9
 8006266:	f000 fcb1 	bl	8006bcc <__lshift>
 800626a:	4604      	mov	r4, r0
 800626c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800626e:	2b00      	cmp	r3, #0
 8006270:	d061      	beq.n	8006336 <_dtoa_r+0x916>
 8006272:	9802      	ldr	r0, [sp, #8]
 8006274:	4621      	mov	r1, r4
 8006276:	f000 fd15 	bl	8006ca4 <__mcmp>
 800627a:	2800      	cmp	r0, #0
 800627c:	da5b      	bge.n	8006336 <_dtoa_r+0x916>
 800627e:	2300      	movs	r3, #0
 8006280:	9902      	ldr	r1, [sp, #8]
 8006282:	220a      	movs	r2, #10
 8006284:	4648      	mov	r0, r9
 8006286:	f000 fafd 	bl	8006884 <__multadd>
 800628a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800628c:	9002      	str	r0, [sp, #8]
 800628e:	f107 38ff 	add.w	r8, r7, #4294967295
 8006292:	2b00      	cmp	r3, #0
 8006294:	f000 8177 	beq.w	8006586 <_dtoa_r+0xb66>
 8006298:	4629      	mov	r1, r5
 800629a:	2300      	movs	r3, #0
 800629c:	220a      	movs	r2, #10
 800629e:	4648      	mov	r0, r9
 80062a0:	f000 faf0 	bl	8006884 <__multadd>
 80062a4:	f1bb 0f00 	cmp.w	fp, #0
 80062a8:	4605      	mov	r5, r0
 80062aa:	dc6f      	bgt.n	800638c <_dtoa_r+0x96c>
 80062ac:	9b07      	ldr	r3, [sp, #28]
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	dc49      	bgt.n	8006346 <_dtoa_r+0x926>
 80062b2:	e06b      	b.n	800638c <_dtoa_r+0x96c>
 80062b4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80062b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80062ba:	e73c      	b.n	8006136 <_dtoa_r+0x716>
 80062bc:	3fe00000 	.word	0x3fe00000
 80062c0:	40240000 	.word	0x40240000
 80062c4:	9b03      	ldr	r3, [sp, #12]
 80062c6:	1e5c      	subs	r4, r3, #1
 80062c8:	9b08      	ldr	r3, [sp, #32]
 80062ca:	42a3      	cmp	r3, r4
 80062cc:	db09      	blt.n	80062e2 <_dtoa_r+0x8c2>
 80062ce:	1b1c      	subs	r4, r3, r4
 80062d0:	9b03      	ldr	r3, [sp, #12]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f6bf af30 	bge.w	8006138 <_dtoa_r+0x718>
 80062d8:	9b00      	ldr	r3, [sp, #0]
 80062da:	9a03      	ldr	r2, [sp, #12]
 80062dc:	1a9e      	subs	r6, r3, r2
 80062de:	2300      	movs	r3, #0
 80062e0:	e72b      	b.n	800613a <_dtoa_r+0x71a>
 80062e2:	9b08      	ldr	r3, [sp, #32]
 80062e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80062e6:	9408      	str	r4, [sp, #32]
 80062e8:	1ae3      	subs	r3, r4, r3
 80062ea:	441a      	add	r2, r3
 80062ec:	9e00      	ldr	r6, [sp, #0]
 80062ee:	9b03      	ldr	r3, [sp, #12]
 80062f0:	920d      	str	r2, [sp, #52]	@ 0x34
 80062f2:	2400      	movs	r4, #0
 80062f4:	e721      	b.n	800613a <_dtoa_r+0x71a>
 80062f6:	9c08      	ldr	r4, [sp, #32]
 80062f8:	9e00      	ldr	r6, [sp, #0]
 80062fa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80062fc:	e728      	b.n	8006150 <_dtoa_r+0x730>
 80062fe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006302:	e751      	b.n	80061a8 <_dtoa_r+0x788>
 8006304:	9a08      	ldr	r2, [sp, #32]
 8006306:	9902      	ldr	r1, [sp, #8]
 8006308:	e750      	b.n	80061ac <_dtoa_r+0x78c>
 800630a:	f8cd 8008 	str.w	r8, [sp, #8]
 800630e:	e751      	b.n	80061b4 <_dtoa_r+0x794>
 8006310:	2300      	movs	r3, #0
 8006312:	e779      	b.n	8006208 <_dtoa_r+0x7e8>
 8006314:	9b04      	ldr	r3, [sp, #16]
 8006316:	e777      	b.n	8006208 <_dtoa_r+0x7e8>
 8006318:	2300      	movs	r3, #0
 800631a:	9308      	str	r3, [sp, #32]
 800631c:	e779      	b.n	8006212 <_dtoa_r+0x7f2>
 800631e:	d093      	beq.n	8006248 <_dtoa_r+0x828>
 8006320:	9a00      	ldr	r2, [sp, #0]
 8006322:	331c      	adds	r3, #28
 8006324:	441a      	add	r2, r3
 8006326:	9200      	str	r2, [sp, #0]
 8006328:	9a06      	ldr	r2, [sp, #24]
 800632a:	441a      	add	r2, r3
 800632c:	441e      	add	r6, r3
 800632e:	9206      	str	r2, [sp, #24]
 8006330:	e78a      	b.n	8006248 <_dtoa_r+0x828>
 8006332:	4603      	mov	r3, r0
 8006334:	e7f4      	b.n	8006320 <_dtoa_r+0x900>
 8006336:	9b03      	ldr	r3, [sp, #12]
 8006338:	2b00      	cmp	r3, #0
 800633a:	46b8      	mov	r8, r7
 800633c:	dc20      	bgt.n	8006380 <_dtoa_r+0x960>
 800633e:	469b      	mov	fp, r3
 8006340:	9b07      	ldr	r3, [sp, #28]
 8006342:	2b02      	cmp	r3, #2
 8006344:	dd1e      	ble.n	8006384 <_dtoa_r+0x964>
 8006346:	f1bb 0f00 	cmp.w	fp, #0
 800634a:	f47f adb1 	bne.w	8005eb0 <_dtoa_r+0x490>
 800634e:	4621      	mov	r1, r4
 8006350:	465b      	mov	r3, fp
 8006352:	2205      	movs	r2, #5
 8006354:	4648      	mov	r0, r9
 8006356:	f000 fa95 	bl	8006884 <__multadd>
 800635a:	4601      	mov	r1, r0
 800635c:	4604      	mov	r4, r0
 800635e:	9802      	ldr	r0, [sp, #8]
 8006360:	f000 fca0 	bl	8006ca4 <__mcmp>
 8006364:	2800      	cmp	r0, #0
 8006366:	f77f ada3 	ble.w	8005eb0 <_dtoa_r+0x490>
 800636a:	4656      	mov	r6, sl
 800636c:	2331      	movs	r3, #49	@ 0x31
 800636e:	f806 3b01 	strb.w	r3, [r6], #1
 8006372:	f108 0801 	add.w	r8, r8, #1
 8006376:	e59f      	b.n	8005eb8 <_dtoa_r+0x498>
 8006378:	9c03      	ldr	r4, [sp, #12]
 800637a:	46b8      	mov	r8, r7
 800637c:	4625      	mov	r5, r4
 800637e:	e7f4      	b.n	800636a <_dtoa_r+0x94a>
 8006380:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006384:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006386:	2b00      	cmp	r3, #0
 8006388:	f000 8101 	beq.w	800658e <_dtoa_r+0xb6e>
 800638c:	2e00      	cmp	r6, #0
 800638e:	dd05      	ble.n	800639c <_dtoa_r+0x97c>
 8006390:	4629      	mov	r1, r5
 8006392:	4632      	mov	r2, r6
 8006394:	4648      	mov	r0, r9
 8006396:	f000 fc19 	bl	8006bcc <__lshift>
 800639a:	4605      	mov	r5, r0
 800639c:	9b08      	ldr	r3, [sp, #32]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d05c      	beq.n	800645c <_dtoa_r+0xa3c>
 80063a2:	6869      	ldr	r1, [r5, #4]
 80063a4:	4648      	mov	r0, r9
 80063a6:	f000 fa0b 	bl	80067c0 <_Balloc>
 80063aa:	4606      	mov	r6, r0
 80063ac:	b928      	cbnz	r0, 80063ba <_dtoa_r+0x99a>
 80063ae:	4b82      	ldr	r3, [pc, #520]	@ (80065b8 <_dtoa_r+0xb98>)
 80063b0:	4602      	mov	r2, r0
 80063b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80063b6:	f7ff bb4a 	b.w	8005a4e <_dtoa_r+0x2e>
 80063ba:	692a      	ldr	r2, [r5, #16]
 80063bc:	3202      	adds	r2, #2
 80063be:	0092      	lsls	r2, r2, #2
 80063c0:	f105 010c 	add.w	r1, r5, #12
 80063c4:	300c      	adds	r0, #12
 80063c6:	f000 ffa3 	bl	8007310 <memcpy>
 80063ca:	2201      	movs	r2, #1
 80063cc:	4631      	mov	r1, r6
 80063ce:	4648      	mov	r0, r9
 80063d0:	f000 fbfc 	bl	8006bcc <__lshift>
 80063d4:	f10a 0301 	add.w	r3, sl, #1
 80063d8:	9300      	str	r3, [sp, #0]
 80063da:	eb0a 030b 	add.w	r3, sl, fp
 80063de:	9308      	str	r3, [sp, #32]
 80063e0:	9b04      	ldr	r3, [sp, #16]
 80063e2:	f003 0301 	and.w	r3, r3, #1
 80063e6:	462f      	mov	r7, r5
 80063e8:	9306      	str	r3, [sp, #24]
 80063ea:	4605      	mov	r5, r0
 80063ec:	9b00      	ldr	r3, [sp, #0]
 80063ee:	9802      	ldr	r0, [sp, #8]
 80063f0:	4621      	mov	r1, r4
 80063f2:	f103 3bff 	add.w	fp, r3, #4294967295
 80063f6:	f7ff fa8a 	bl	800590e <quorem>
 80063fa:	4603      	mov	r3, r0
 80063fc:	3330      	adds	r3, #48	@ 0x30
 80063fe:	9003      	str	r0, [sp, #12]
 8006400:	4639      	mov	r1, r7
 8006402:	9802      	ldr	r0, [sp, #8]
 8006404:	9309      	str	r3, [sp, #36]	@ 0x24
 8006406:	f000 fc4d 	bl	8006ca4 <__mcmp>
 800640a:	462a      	mov	r2, r5
 800640c:	9004      	str	r0, [sp, #16]
 800640e:	4621      	mov	r1, r4
 8006410:	4648      	mov	r0, r9
 8006412:	f000 fc63 	bl	8006cdc <__mdiff>
 8006416:	68c2      	ldr	r2, [r0, #12]
 8006418:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800641a:	4606      	mov	r6, r0
 800641c:	bb02      	cbnz	r2, 8006460 <_dtoa_r+0xa40>
 800641e:	4601      	mov	r1, r0
 8006420:	9802      	ldr	r0, [sp, #8]
 8006422:	f000 fc3f 	bl	8006ca4 <__mcmp>
 8006426:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006428:	4602      	mov	r2, r0
 800642a:	4631      	mov	r1, r6
 800642c:	4648      	mov	r0, r9
 800642e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006430:	9309      	str	r3, [sp, #36]	@ 0x24
 8006432:	f000 fa05 	bl	8006840 <_Bfree>
 8006436:	9b07      	ldr	r3, [sp, #28]
 8006438:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800643a:	9e00      	ldr	r6, [sp, #0]
 800643c:	ea42 0103 	orr.w	r1, r2, r3
 8006440:	9b06      	ldr	r3, [sp, #24]
 8006442:	4319      	orrs	r1, r3
 8006444:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006446:	d10d      	bne.n	8006464 <_dtoa_r+0xa44>
 8006448:	2b39      	cmp	r3, #57	@ 0x39
 800644a:	d027      	beq.n	800649c <_dtoa_r+0xa7c>
 800644c:	9a04      	ldr	r2, [sp, #16]
 800644e:	2a00      	cmp	r2, #0
 8006450:	dd01      	ble.n	8006456 <_dtoa_r+0xa36>
 8006452:	9b03      	ldr	r3, [sp, #12]
 8006454:	3331      	adds	r3, #49	@ 0x31
 8006456:	f88b 3000 	strb.w	r3, [fp]
 800645a:	e52e      	b.n	8005eba <_dtoa_r+0x49a>
 800645c:	4628      	mov	r0, r5
 800645e:	e7b9      	b.n	80063d4 <_dtoa_r+0x9b4>
 8006460:	2201      	movs	r2, #1
 8006462:	e7e2      	b.n	800642a <_dtoa_r+0xa0a>
 8006464:	9904      	ldr	r1, [sp, #16]
 8006466:	2900      	cmp	r1, #0
 8006468:	db04      	blt.n	8006474 <_dtoa_r+0xa54>
 800646a:	9807      	ldr	r0, [sp, #28]
 800646c:	4301      	orrs	r1, r0
 800646e:	9806      	ldr	r0, [sp, #24]
 8006470:	4301      	orrs	r1, r0
 8006472:	d120      	bne.n	80064b6 <_dtoa_r+0xa96>
 8006474:	2a00      	cmp	r2, #0
 8006476:	ddee      	ble.n	8006456 <_dtoa_r+0xa36>
 8006478:	9902      	ldr	r1, [sp, #8]
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	2201      	movs	r2, #1
 800647e:	4648      	mov	r0, r9
 8006480:	f000 fba4 	bl	8006bcc <__lshift>
 8006484:	4621      	mov	r1, r4
 8006486:	9002      	str	r0, [sp, #8]
 8006488:	f000 fc0c 	bl	8006ca4 <__mcmp>
 800648c:	2800      	cmp	r0, #0
 800648e:	9b00      	ldr	r3, [sp, #0]
 8006490:	dc02      	bgt.n	8006498 <_dtoa_r+0xa78>
 8006492:	d1e0      	bne.n	8006456 <_dtoa_r+0xa36>
 8006494:	07da      	lsls	r2, r3, #31
 8006496:	d5de      	bpl.n	8006456 <_dtoa_r+0xa36>
 8006498:	2b39      	cmp	r3, #57	@ 0x39
 800649a:	d1da      	bne.n	8006452 <_dtoa_r+0xa32>
 800649c:	2339      	movs	r3, #57	@ 0x39
 800649e:	f88b 3000 	strb.w	r3, [fp]
 80064a2:	4633      	mov	r3, r6
 80064a4:	461e      	mov	r6, r3
 80064a6:	3b01      	subs	r3, #1
 80064a8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80064ac:	2a39      	cmp	r2, #57	@ 0x39
 80064ae:	d04e      	beq.n	800654e <_dtoa_r+0xb2e>
 80064b0:	3201      	adds	r2, #1
 80064b2:	701a      	strb	r2, [r3, #0]
 80064b4:	e501      	b.n	8005eba <_dtoa_r+0x49a>
 80064b6:	2a00      	cmp	r2, #0
 80064b8:	dd03      	ble.n	80064c2 <_dtoa_r+0xaa2>
 80064ba:	2b39      	cmp	r3, #57	@ 0x39
 80064bc:	d0ee      	beq.n	800649c <_dtoa_r+0xa7c>
 80064be:	3301      	adds	r3, #1
 80064c0:	e7c9      	b.n	8006456 <_dtoa_r+0xa36>
 80064c2:	9a00      	ldr	r2, [sp, #0]
 80064c4:	9908      	ldr	r1, [sp, #32]
 80064c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80064ca:	428a      	cmp	r2, r1
 80064cc:	d028      	beq.n	8006520 <_dtoa_r+0xb00>
 80064ce:	9902      	ldr	r1, [sp, #8]
 80064d0:	2300      	movs	r3, #0
 80064d2:	220a      	movs	r2, #10
 80064d4:	4648      	mov	r0, r9
 80064d6:	f000 f9d5 	bl	8006884 <__multadd>
 80064da:	42af      	cmp	r7, r5
 80064dc:	9002      	str	r0, [sp, #8]
 80064de:	f04f 0300 	mov.w	r3, #0
 80064e2:	f04f 020a 	mov.w	r2, #10
 80064e6:	4639      	mov	r1, r7
 80064e8:	4648      	mov	r0, r9
 80064ea:	d107      	bne.n	80064fc <_dtoa_r+0xadc>
 80064ec:	f000 f9ca 	bl	8006884 <__multadd>
 80064f0:	4607      	mov	r7, r0
 80064f2:	4605      	mov	r5, r0
 80064f4:	9b00      	ldr	r3, [sp, #0]
 80064f6:	3301      	adds	r3, #1
 80064f8:	9300      	str	r3, [sp, #0]
 80064fa:	e777      	b.n	80063ec <_dtoa_r+0x9cc>
 80064fc:	f000 f9c2 	bl	8006884 <__multadd>
 8006500:	4629      	mov	r1, r5
 8006502:	4607      	mov	r7, r0
 8006504:	2300      	movs	r3, #0
 8006506:	220a      	movs	r2, #10
 8006508:	4648      	mov	r0, r9
 800650a:	f000 f9bb 	bl	8006884 <__multadd>
 800650e:	4605      	mov	r5, r0
 8006510:	e7f0      	b.n	80064f4 <_dtoa_r+0xad4>
 8006512:	f1bb 0f00 	cmp.w	fp, #0
 8006516:	bfcc      	ite	gt
 8006518:	465e      	movgt	r6, fp
 800651a:	2601      	movle	r6, #1
 800651c:	4456      	add	r6, sl
 800651e:	2700      	movs	r7, #0
 8006520:	9902      	ldr	r1, [sp, #8]
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	2201      	movs	r2, #1
 8006526:	4648      	mov	r0, r9
 8006528:	f000 fb50 	bl	8006bcc <__lshift>
 800652c:	4621      	mov	r1, r4
 800652e:	9002      	str	r0, [sp, #8]
 8006530:	f000 fbb8 	bl	8006ca4 <__mcmp>
 8006534:	2800      	cmp	r0, #0
 8006536:	dcb4      	bgt.n	80064a2 <_dtoa_r+0xa82>
 8006538:	d102      	bne.n	8006540 <_dtoa_r+0xb20>
 800653a:	9b00      	ldr	r3, [sp, #0]
 800653c:	07db      	lsls	r3, r3, #31
 800653e:	d4b0      	bmi.n	80064a2 <_dtoa_r+0xa82>
 8006540:	4633      	mov	r3, r6
 8006542:	461e      	mov	r6, r3
 8006544:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006548:	2a30      	cmp	r2, #48	@ 0x30
 800654a:	d0fa      	beq.n	8006542 <_dtoa_r+0xb22>
 800654c:	e4b5      	b.n	8005eba <_dtoa_r+0x49a>
 800654e:	459a      	cmp	sl, r3
 8006550:	d1a8      	bne.n	80064a4 <_dtoa_r+0xa84>
 8006552:	2331      	movs	r3, #49	@ 0x31
 8006554:	f108 0801 	add.w	r8, r8, #1
 8006558:	f88a 3000 	strb.w	r3, [sl]
 800655c:	e4ad      	b.n	8005eba <_dtoa_r+0x49a>
 800655e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006560:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80065bc <_dtoa_r+0xb9c>
 8006564:	b11b      	cbz	r3, 800656e <_dtoa_r+0xb4e>
 8006566:	f10a 0308 	add.w	r3, sl, #8
 800656a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800656c:	6013      	str	r3, [r2, #0]
 800656e:	4650      	mov	r0, sl
 8006570:	b017      	add	sp, #92	@ 0x5c
 8006572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006576:	9b07      	ldr	r3, [sp, #28]
 8006578:	2b01      	cmp	r3, #1
 800657a:	f77f ae2e 	ble.w	80061da <_dtoa_r+0x7ba>
 800657e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006580:	9308      	str	r3, [sp, #32]
 8006582:	2001      	movs	r0, #1
 8006584:	e64d      	b.n	8006222 <_dtoa_r+0x802>
 8006586:	f1bb 0f00 	cmp.w	fp, #0
 800658a:	f77f aed9 	ble.w	8006340 <_dtoa_r+0x920>
 800658e:	4656      	mov	r6, sl
 8006590:	9802      	ldr	r0, [sp, #8]
 8006592:	4621      	mov	r1, r4
 8006594:	f7ff f9bb 	bl	800590e <quorem>
 8006598:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800659c:	f806 3b01 	strb.w	r3, [r6], #1
 80065a0:	eba6 020a 	sub.w	r2, r6, sl
 80065a4:	4593      	cmp	fp, r2
 80065a6:	ddb4      	ble.n	8006512 <_dtoa_r+0xaf2>
 80065a8:	9902      	ldr	r1, [sp, #8]
 80065aa:	2300      	movs	r3, #0
 80065ac:	220a      	movs	r2, #10
 80065ae:	4648      	mov	r0, r9
 80065b0:	f000 f968 	bl	8006884 <__multadd>
 80065b4:	9002      	str	r0, [sp, #8]
 80065b6:	e7eb      	b.n	8006590 <_dtoa_r+0xb70>
 80065b8:	08007c3c 	.word	0x08007c3c
 80065bc:	08007bc0 	.word	0x08007bc0

080065c0 <_free_r>:
 80065c0:	b538      	push	{r3, r4, r5, lr}
 80065c2:	4605      	mov	r5, r0
 80065c4:	2900      	cmp	r1, #0
 80065c6:	d041      	beq.n	800664c <_free_r+0x8c>
 80065c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065cc:	1f0c      	subs	r4, r1, #4
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	bfb8      	it	lt
 80065d2:	18e4      	addlt	r4, r4, r3
 80065d4:	f000 f8e8 	bl	80067a8 <__malloc_lock>
 80065d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006650 <_free_r+0x90>)
 80065da:	6813      	ldr	r3, [r2, #0]
 80065dc:	b933      	cbnz	r3, 80065ec <_free_r+0x2c>
 80065de:	6063      	str	r3, [r4, #4]
 80065e0:	6014      	str	r4, [r2, #0]
 80065e2:	4628      	mov	r0, r5
 80065e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065e8:	f000 b8e4 	b.w	80067b4 <__malloc_unlock>
 80065ec:	42a3      	cmp	r3, r4
 80065ee:	d908      	bls.n	8006602 <_free_r+0x42>
 80065f0:	6820      	ldr	r0, [r4, #0]
 80065f2:	1821      	adds	r1, r4, r0
 80065f4:	428b      	cmp	r3, r1
 80065f6:	bf01      	itttt	eq
 80065f8:	6819      	ldreq	r1, [r3, #0]
 80065fa:	685b      	ldreq	r3, [r3, #4]
 80065fc:	1809      	addeq	r1, r1, r0
 80065fe:	6021      	streq	r1, [r4, #0]
 8006600:	e7ed      	b.n	80065de <_free_r+0x1e>
 8006602:	461a      	mov	r2, r3
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	b10b      	cbz	r3, 800660c <_free_r+0x4c>
 8006608:	42a3      	cmp	r3, r4
 800660a:	d9fa      	bls.n	8006602 <_free_r+0x42>
 800660c:	6811      	ldr	r1, [r2, #0]
 800660e:	1850      	adds	r0, r2, r1
 8006610:	42a0      	cmp	r0, r4
 8006612:	d10b      	bne.n	800662c <_free_r+0x6c>
 8006614:	6820      	ldr	r0, [r4, #0]
 8006616:	4401      	add	r1, r0
 8006618:	1850      	adds	r0, r2, r1
 800661a:	4283      	cmp	r3, r0
 800661c:	6011      	str	r1, [r2, #0]
 800661e:	d1e0      	bne.n	80065e2 <_free_r+0x22>
 8006620:	6818      	ldr	r0, [r3, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	6053      	str	r3, [r2, #4]
 8006626:	4408      	add	r0, r1
 8006628:	6010      	str	r0, [r2, #0]
 800662a:	e7da      	b.n	80065e2 <_free_r+0x22>
 800662c:	d902      	bls.n	8006634 <_free_r+0x74>
 800662e:	230c      	movs	r3, #12
 8006630:	602b      	str	r3, [r5, #0]
 8006632:	e7d6      	b.n	80065e2 <_free_r+0x22>
 8006634:	6820      	ldr	r0, [r4, #0]
 8006636:	1821      	adds	r1, r4, r0
 8006638:	428b      	cmp	r3, r1
 800663a:	bf04      	itt	eq
 800663c:	6819      	ldreq	r1, [r3, #0]
 800663e:	685b      	ldreq	r3, [r3, #4]
 8006640:	6063      	str	r3, [r4, #4]
 8006642:	bf04      	itt	eq
 8006644:	1809      	addeq	r1, r1, r0
 8006646:	6021      	streq	r1, [r4, #0]
 8006648:	6054      	str	r4, [r2, #4]
 800664a:	e7ca      	b.n	80065e2 <_free_r+0x22>
 800664c:	bd38      	pop	{r3, r4, r5, pc}
 800664e:	bf00      	nop
 8006650:	20000468 	.word	0x20000468

08006654 <malloc>:
 8006654:	4b02      	ldr	r3, [pc, #8]	@ (8006660 <malloc+0xc>)
 8006656:	4601      	mov	r1, r0
 8006658:	6818      	ldr	r0, [r3, #0]
 800665a:	f000 b825 	b.w	80066a8 <_malloc_r>
 800665e:	bf00      	nop
 8006660:	20000024 	.word	0x20000024

08006664 <sbrk_aligned>:
 8006664:	b570      	push	{r4, r5, r6, lr}
 8006666:	4e0f      	ldr	r6, [pc, #60]	@ (80066a4 <sbrk_aligned+0x40>)
 8006668:	460c      	mov	r4, r1
 800666a:	6831      	ldr	r1, [r6, #0]
 800666c:	4605      	mov	r5, r0
 800666e:	b911      	cbnz	r1, 8006676 <sbrk_aligned+0x12>
 8006670:	f000 fe3e 	bl	80072f0 <_sbrk_r>
 8006674:	6030      	str	r0, [r6, #0]
 8006676:	4621      	mov	r1, r4
 8006678:	4628      	mov	r0, r5
 800667a:	f000 fe39 	bl	80072f0 <_sbrk_r>
 800667e:	1c43      	adds	r3, r0, #1
 8006680:	d103      	bne.n	800668a <sbrk_aligned+0x26>
 8006682:	f04f 34ff 	mov.w	r4, #4294967295
 8006686:	4620      	mov	r0, r4
 8006688:	bd70      	pop	{r4, r5, r6, pc}
 800668a:	1cc4      	adds	r4, r0, #3
 800668c:	f024 0403 	bic.w	r4, r4, #3
 8006690:	42a0      	cmp	r0, r4
 8006692:	d0f8      	beq.n	8006686 <sbrk_aligned+0x22>
 8006694:	1a21      	subs	r1, r4, r0
 8006696:	4628      	mov	r0, r5
 8006698:	f000 fe2a 	bl	80072f0 <_sbrk_r>
 800669c:	3001      	adds	r0, #1
 800669e:	d1f2      	bne.n	8006686 <sbrk_aligned+0x22>
 80066a0:	e7ef      	b.n	8006682 <sbrk_aligned+0x1e>
 80066a2:	bf00      	nop
 80066a4:	20000464 	.word	0x20000464

080066a8 <_malloc_r>:
 80066a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066ac:	1ccd      	adds	r5, r1, #3
 80066ae:	f025 0503 	bic.w	r5, r5, #3
 80066b2:	3508      	adds	r5, #8
 80066b4:	2d0c      	cmp	r5, #12
 80066b6:	bf38      	it	cc
 80066b8:	250c      	movcc	r5, #12
 80066ba:	2d00      	cmp	r5, #0
 80066bc:	4606      	mov	r6, r0
 80066be:	db01      	blt.n	80066c4 <_malloc_r+0x1c>
 80066c0:	42a9      	cmp	r1, r5
 80066c2:	d904      	bls.n	80066ce <_malloc_r+0x26>
 80066c4:	230c      	movs	r3, #12
 80066c6:	6033      	str	r3, [r6, #0]
 80066c8:	2000      	movs	r0, #0
 80066ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80067a4 <_malloc_r+0xfc>
 80066d2:	f000 f869 	bl	80067a8 <__malloc_lock>
 80066d6:	f8d8 3000 	ldr.w	r3, [r8]
 80066da:	461c      	mov	r4, r3
 80066dc:	bb44      	cbnz	r4, 8006730 <_malloc_r+0x88>
 80066de:	4629      	mov	r1, r5
 80066e0:	4630      	mov	r0, r6
 80066e2:	f7ff ffbf 	bl	8006664 <sbrk_aligned>
 80066e6:	1c43      	adds	r3, r0, #1
 80066e8:	4604      	mov	r4, r0
 80066ea:	d158      	bne.n	800679e <_malloc_r+0xf6>
 80066ec:	f8d8 4000 	ldr.w	r4, [r8]
 80066f0:	4627      	mov	r7, r4
 80066f2:	2f00      	cmp	r7, #0
 80066f4:	d143      	bne.n	800677e <_malloc_r+0xd6>
 80066f6:	2c00      	cmp	r4, #0
 80066f8:	d04b      	beq.n	8006792 <_malloc_r+0xea>
 80066fa:	6823      	ldr	r3, [r4, #0]
 80066fc:	4639      	mov	r1, r7
 80066fe:	4630      	mov	r0, r6
 8006700:	eb04 0903 	add.w	r9, r4, r3
 8006704:	f000 fdf4 	bl	80072f0 <_sbrk_r>
 8006708:	4581      	cmp	r9, r0
 800670a:	d142      	bne.n	8006792 <_malloc_r+0xea>
 800670c:	6821      	ldr	r1, [r4, #0]
 800670e:	1a6d      	subs	r5, r5, r1
 8006710:	4629      	mov	r1, r5
 8006712:	4630      	mov	r0, r6
 8006714:	f7ff ffa6 	bl	8006664 <sbrk_aligned>
 8006718:	3001      	adds	r0, #1
 800671a:	d03a      	beq.n	8006792 <_malloc_r+0xea>
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	442b      	add	r3, r5
 8006720:	6023      	str	r3, [r4, #0]
 8006722:	f8d8 3000 	ldr.w	r3, [r8]
 8006726:	685a      	ldr	r2, [r3, #4]
 8006728:	bb62      	cbnz	r2, 8006784 <_malloc_r+0xdc>
 800672a:	f8c8 7000 	str.w	r7, [r8]
 800672e:	e00f      	b.n	8006750 <_malloc_r+0xa8>
 8006730:	6822      	ldr	r2, [r4, #0]
 8006732:	1b52      	subs	r2, r2, r5
 8006734:	d420      	bmi.n	8006778 <_malloc_r+0xd0>
 8006736:	2a0b      	cmp	r2, #11
 8006738:	d917      	bls.n	800676a <_malloc_r+0xc2>
 800673a:	1961      	adds	r1, r4, r5
 800673c:	42a3      	cmp	r3, r4
 800673e:	6025      	str	r5, [r4, #0]
 8006740:	bf18      	it	ne
 8006742:	6059      	strne	r1, [r3, #4]
 8006744:	6863      	ldr	r3, [r4, #4]
 8006746:	bf08      	it	eq
 8006748:	f8c8 1000 	streq.w	r1, [r8]
 800674c:	5162      	str	r2, [r4, r5]
 800674e:	604b      	str	r3, [r1, #4]
 8006750:	4630      	mov	r0, r6
 8006752:	f000 f82f 	bl	80067b4 <__malloc_unlock>
 8006756:	f104 000b 	add.w	r0, r4, #11
 800675a:	1d23      	adds	r3, r4, #4
 800675c:	f020 0007 	bic.w	r0, r0, #7
 8006760:	1ac2      	subs	r2, r0, r3
 8006762:	bf1c      	itt	ne
 8006764:	1a1b      	subne	r3, r3, r0
 8006766:	50a3      	strne	r3, [r4, r2]
 8006768:	e7af      	b.n	80066ca <_malloc_r+0x22>
 800676a:	6862      	ldr	r2, [r4, #4]
 800676c:	42a3      	cmp	r3, r4
 800676e:	bf0c      	ite	eq
 8006770:	f8c8 2000 	streq.w	r2, [r8]
 8006774:	605a      	strne	r2, [r3, #4]
 8006776:	e7eb      	b.n	8006750 <_malloc_r+0xa8>
 8006778:	4623      	mov	r3, r4
 800677a:	6864      	ldr	r4, [r4, #4]
 800677c:	e7ae      	b.n	80066dc <_malloc_r+0x34>
 800677e:	463c      	mov	r4, r7
 8006780:	687f      	ldr	r7, [r7, #4]
 8006782:	e7b6      	b.n	80066f2 <_malloc_r+0x4a>
 8006784:	461a      	mov	r2, r3
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	42a3      	cmp	r3, r4
 800678a:	d1fb      	bne.n	8006784 <_malloc_r+0xdc>
 800678c:	2300      	movs	r3, #0
 800678e:	6053      	str	r3, [r2, #4]
 8006790:	e7de      	b.n	8006750 <_malloc_r+0xa8>
 8006792:	230c      	movs	r3, #12
 8006794:	6033      	str	r3, [r6, #0]
 8006796:	4630      	mov	r0, r6
 8006798:	f000 f80c 	bl	80067b4 <__malloc_unlock>
 800679c:	e794      	b.n	80066c8 <_malloc_r+0x20>
 800679e:	6005      	str	r5, [r0, #0]
 80067a0:	e7d6      	b.n	8006750 <_malloc_r+0xa8>
 80067a2:	bf00      	nop
 80067a4:	20000468 	.word	0x20000468

080067a8 <__malloc_lock>:
 80067a8:	4801      	ldr	r0, [pc, #4]	@ (80067b0 <__malloc_lock+0x8>)
 80067aa:	f7ff b8ae 	b.w	800590a <__retarget_lock_acquire_recursive>
 80067ae:	bf00      	nop
 80067b0:	20000460 	.word	0x20000460

080067b4 <__malloc_unlock>:
 80067b4:	4801      	ldr	r0, [pc, #4]	@ (80067bc <__malloc_unlock+0x8>)
 80067b6:	f7ff b8a9 	b.w	800590c <__retarget_lock_release_recursive>
 80067ba:	bf00      	nop
 80067bc:	20000460 	.word	0x20000460

080067c0 <_Balloc>:
 80067c0:	b570      	push	{r4, r5, r6, lr}
 80067c2:	69c6      	ldr	r6, [r0, #28]
 80067c4:	4604      	mov	r4, r0
 80067c6:	460d      	mov	r5, r1
 80067c8:	b976      	cbnz	r6, 80067e8 <_Balloc+0x28>
 80067ca:	2010      	movs	r0, #16
 80067cc:	f7ff ff42 	bl	8006654 <malloc>
 80067d0:	4602      	mov	r2, r0
 80067d2:	61e0      	str	r0, [r4, #28]
 80067d4:	b920      	cbnz	r0, 80067e0 <_Balloc+0x20>
 80067d6:	4b18      	ldr	r3, [pc, #96]	@ (8006838 <_Balloc+0x78>)
 80067d8:	4818      	ldr	r0, [pc, #96]	@ (800683c <_Balloc+0x7c>)
 80067da:	216b      	movs	r1, #107	@ 0x6b
 80067dc:	f000 fda6 	bl	800732c <__assert_func>
 80067e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067e4:	6006      	str	r6, [r0, #0]
 80067e6:	60c6      	str	r6, [r0, #12]
 80067e8:	69e6      	ldr	r6, [r4, #28]
 80067ea:	68f3      	ldr	r3, [r6, #12]
 80067ec:	b183      	cbz	r3, 8006810 <_Balloc+0x50>
 80067ee:	69e3      	ldr	r3, [r4, #28]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80067f6:	b9b8      	cbnz	r0, 8006828 <_Balloc+0x68>
 80067f8:	2101      	movs	r1, #1
 80067fa:	fa01 f605 	lsl.w	r6, r1, r5
 80067fe:	1d72      	adds	r2, r6, #5
 8006800:	0092      	lsls	r2, r2, #2
 8006802:	4620      	mov	r0, r4
 8006804:	f000 fdb0 	bl	8007368 <_calloc_r>
 8006808:	b160      	cbz	r0, 8006824 <_Balloc+0x64>
 800680a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800680e:	e00e      	b.n	800682e <_Balloc+0x6e>
 8006810:	2221      	movs	r2, #33	@ 0x21
 8006812:	2104      	movs	r1, #4
 8006814:	4620      	mov	r0, r4
 8006816:	f000 fda7 	bl	8007368 <_calloc_r>
 800681a:	69e3      	ldr	r3, [r4, #28]
 800681c:	60f0      	str	r0, [r6, #12]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1e4      	bne.n	80067ee <_Balloc+0x2e>
 8006824:	2000      	movs	r0, #0
 8006826:	bd70      	pop	{r4, r5, r6, pc}
 8006828:	6802      	ldr	r2, [r0, #0]
 800682a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800682e:	2300      	movs	r3, #0
 8006830:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006834:	e7f7      	b.n	8006826 <_Balloc+0x66>
 8006836:	bf00      	nop
 8006838:	08007bcd 	.word	0x08007bcd
 800683c:	08007c4d 	.word	0x08007c4d

08006840 <_Bfree>:
 8006840:	b570      	push	{r4, r5, r6, lr}
 8006842:	69c6      	ldr	r6, [r0, #28]
 8006844:	4605      	mov	r5, r0
 8006846:	460c      	mov	r4, r1
 8006848:	b976      	cbnz	r6, 8006868 <_Bfree+0x28>
 800684a:	2010      	movs	r0, #16
 800684c:	f7ff ff02 	bl	8006654 <malloc>
 8006850:	4602      	mov	r2, r0
 8006852:	61e8      	str	r0, [r5, #28]
 8006854:	b920      	cbnz	r0, 8006860 <_Bfree+0x20>
 8006856:	4b09      	ldr	r3, [pc, #36]	@ (800687c <_Bfree+0x3c>)
 8006858:	4809      	ldr	r0, [pc, #36]	@ (8006880 <_Bfree+0x40>)
 800685a:	218f      	movs	r1, #143	@ 0x8f
 800685c:	f000 fd66 	bl	800732c <__assert_func>
 8006860:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006864:	6006      	str	r6, [r0, #0]
 8006866:	60c6      	str	r6, [r0, #12]
 8006868:	b13c      	cbz	r4, 800687a <_Bfree+0x3a>
 800686a:	69eb      	ldr	r3, [r5, #28]
 800686c:	6862      	ldr	r2, [r4, #4]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006874:	6021      	str	r1, [r4, #0]
 8006876:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800687a:	bd70      	pop	{r4, r5, r6, pc}
 800687c:	08007bcd 	.word	0x08007bcd
 8006880:	08007c4d 	.word	0x08007c4d

08006884 <__multadd>:
 8006884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006888:	690d      	ldr	r5, [r1, #16]
 800688a:	4607      	mov	r7, r0
 800688c:	460c      	mov	r4, r1
 800688e:	461e      	mov	r6, r3
 8006890:	f101 0c14 	add.w	ip, r1, #20
 8006894:	2000      	movs	r0, #0
 8006896:	f8dc 3000 	ldr.w	r3, [ip]
 800689a:	b299      	uxth	r1, r3
 800689c:	fb02 6101 	mla	r1, r2, r1, r6
 80068a0:	0c1e      	lsrs	r6, r3, #16
 80068a2:	0c0b      	lsrs	r3, r1, #16
 80068a4:	fb02 3306 	mla	r3, r2, r6, r3
 80068a8:	b289      	uxth	r1, r1
 80068aa:	3001      	adds	r0, #1
 80068ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80068b0:	4285      	cmp	r5, r0
 80068b2:	f84c 1b04 	str.w	r1, [ip], #4
 80068b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80068ba:	dcec      	bgt.n	8006896 <__multadd+0x12>
 80068bc:	b30e      	cbz	r6, 8006902 <__multadd+0x7e>
 80068be:	68a3      	ldr	r3, [r4, #8]
 80068c0:	42ab      	cmp	r3, r5
 80068c2:	dc19      	bgt.n	80068f8 <__multadd+0x74>
 80068c4:	6861      	ldr	r1, [r4, #4]
 80068c6:	4638      	mov	r0, r7
 80068c8:	3101      	adds	r1, #1
 80068ca:	f7ff ff79 	bl	80067c0 <_Balloc>
 80068ce:	4680      	mov	r8, r0
 80068d0:	b928      	cbnz	r0, 80068de <__multadd+0x5a>
 80068d2:	4602      	mov	r2, r0
 80068d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006908 <__multadd+0x84>)
 80068d6:	480d      	ldr	r0, [pc, #52]	@ (800690c <__multadd+0x88>)
 80068d8:	21ba      	movs	r1, #186	@ 0xba
 80068da:	f000 fd27 	bl	800732c <__assert_func>
 80068de:	6922      	ldr	r2, [r4, #16]
 80068e0:	3202      	adds	r2, #2
 80068e2:	f104 010c 	add.w	r1, r4, #12
 80068e6:	0092      	lsls	r2, r2, #2
 80068e8:	300c      	adds	r0, #12
 80068ea:	f000 fd11 	bl	8007310 <memcpy>
 80068ee:	4621      	mov	r1, r4
 80068f0:	4638      	mov	r0, r7
 80068f2:	f7ff ffa5 	bl	8006840 <_Bfree>
 80068f6:	4644      	mov	r4, r8
 80068f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80068fc:	3501      	adds	r5, #1
 80068fe:	615e      	str	r6, [r3, #20]
 8006900:	6125      	str	r5, [r4, #16]
 8006902:	4620      	mov	r0, r4
 8006904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006908:	08007c3c 	.word	0x08007c3c
 800690c:	08007c4d 	.word	0x08007c4d

08006910 <__hi0bits>:
 8006910:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006914:	4603      	mov	r3, r0
 8006916:	bf36      	itet	cc
 8006918:	0403      	lslcc	r3, r0, #16
 800691a:	2000      	movcs	r0, #0
 800691c:	2010      	movcc	r0, #16
 800691e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006922:	bf3c      	itt	cc
 8006924:	021b      	lslcc	r3, r3, #8
 8006926:	3008      	addcc	r0, #8
 8006928:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800692c:	bf3c      	itt	cc
 800692e:	011b      	lslcc	r3, r3, #4
 8006930:	3004      	addcc	r0, #4
 8006932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006936:	bf3c      	itt	cc
 8006938:	009b      	lslcc	r3, r3, #2
 800693a:	3002      	addcc	r0, #2
 800693c:	2b00      	cmp	r3, #0
 800693e:	db05      	blt.n	800694c <__hi0bits+0x3c>
 8006940:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006944:	f100 0001 	add.w	r0, r0, #1
 8006948:	bf08      	it	eq
 800694a:	2020      	moveq	r0, #32
 800694c:	4770      	bx	lr

0800694e <__lo0bits>:
 800694e:	6803      	ldr	r3, [r0, #0]
 8006950:	4602      	mov	r2, r0
 8006952:	f013 0007 	ands.w	r0, r3, #7
 8006956:	d00b      	beq.n	8006970 <__lo0bits+0x22>
 8006958:	07d9      	lsls	r1, r3, #31
 800695a:	d421      	bmi.n	80069a0 <__lo0bits+0x52>
 800695c:	0798      	lsls	r0, r3, #30
 800695e:	bf49      	itett	mi
 8006960:	085b      	lsrmi	r3, r3, #1
 8006962:	089b      	lsrpl	r3, r3, #2
 8006964:	2001      	movmi	r0, #1
 8006966:	6013      	strmi	r3, [r2, #0]
 8006968:	bf5c      	itt	pl
 800696a:	6013      	strpl	r3, [r2, #0]
 800696c:	2002      	movpl	r0, #2
 800696e:	4770      	bx	lr
 8006970:	b299      	uxth	r1, r3
 8006972:	b909      	cbnz	r1, 8006978 <__lo0bits+0x2a>
 8006974:	0c1b      	lsrs	r3, r3, #16
 8006976:	2010      	movs	r0, #16
 8006978:	b2d9      	uxtb	r1, r3
 800697a:	b909      	cbnz	r1, 8006980 <__lo0bits+0x32>
 800697c:	3008      	adds	r0, #8
 800697e:	0a1b      	lsrs	r3, r3, #8
 8006980:	0719      	lsls	r1, r3, #28
 8006982:	bf04      	itt	eq
 8006984:	091b      	lsreq	r3, r3, #4
 8006986:	3004      	addeq	r0, #4
 8006988:	0799      	lsls	r1, r3, #30
 800698a:	bf04      	itt	eq
 800698c:	089b      	lsreq	r3, r3, #2
 800698e:	3002      	addeq	r0, #2
 8006990:	07d9      	lsls	r1, r3, #31
 8006992:	d403      	bmi.n	800699c <__lo0bits+0x4e>
 8006994:	085b      	lsrs	r3, r3, #1
 8006996:	f100 0001 	add.w	r0, r0, #1
 800699a:	d003      	beq.n	80069a4 <__lo0bits+0x56>
 800699c:	6013      	str	r3, [r2, #0]
 800699e:	4770      	bx	lr
 80069a0:	2000      	movs	r0, #0
 80069a2:	4770      	bx	lr
 80069a4:	2020      	movs	r0, #32
 80069a6:	4770      	bx	lr

080069a8 <__i2b>:
 80069a8:	b510      	push	{r4, lr}
 80069aa:	460c      	mov	r4, r1
 80069ac:	2101      	movs	r1, #1
 80069ae:	f7ff ff07 	bl	80067c0 <_Balloc>
 80069b2:	4602      	mov	r2, r0
 80069b4:	b928      	cbnz	r0, 80069c2 <__i2b+0x1a>
 80069b6:	4b05      	ldr	r3, [pc, #20]	@ (80069cc <__i2b+0x24>)
 80069b8:	4805      	ldr	r0, [pc, #20]	@ (80069d0 <__i2b+0x28>)
 80069ba:	f240 1145 	movw	r1, #325	@ 0x145
 80069be:	f000 fcb5 	bl	800732c <__assert_func>
 80069c2:	2301      	movs	r3, #1
 80069c4:	6144      	str	r4, [r0, #20]
 80069c6:	6103      	str	r3, [r0, #16]
 80069c8:	bd10      	pop	{r4, pc}
 80069ca:	bf00      	nop
 80069cc:	08007c3c 	.word	0x08007c3c
 80069d0:	08007c4d 	.word	0x08007c4d

080069d4 <__multiply>:
 80069d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d8:	4617      	mov	r7, r2
 80069da:	690a      	ldr	r2, [r1, #16]
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	429a      	cmp	r2, r3
 80069e0:	bfa8      	it	ge
 80069e2:	463b      	movge	r3, r7
 80069e4:	4689      	mov	r9, r1
 80069e6:	bfa4      	itt	ge
 80069e8:	460f      	movge	r7, r1
 80069ea:	4699      	movge	r9, r3
 80069ec:	693d      	ldr	r5, [r7, #16]
 80069ee:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	6879      	ldr	r1, [r7, #4]
 80069f6:	eb05 060a 	add.w	r6, r5, sl
 80069fa:	42b3      	cmp	r3, r6
 80069fc:	b085      	sub	sp, #20
 80069fe:	bfb8      	it	lt
 8006a00:	3101      	addlt	r1, #1
 8006a02:	f7ff fedd 	bl	80067c0 <_Balloc>
 8006a06:	b930      	cbnz	r0, 8006a16 <__multiply+0x42>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	4b41      	ldr	r3, [pc, #260]	@ (8006b10 <__multiply+0x13c>)
 8006a0c:	4841      	ldr	r0, [pc, #260]	@ (8006b14 <__multiply+0x140>)
 8006a0e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006a12:	f000 fc8b 	bl	800732c <__assert_func>
 8006a16:	f100 0414 	add.w	r4, r0, #20
 8006a1a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006a1e:	4623      	mov	r3, r4
 8006a20:	2200      	movs	r2, #0
 8006a22:	4573      	cmp	r3, lr
 8006a24:	d320      	bcc.n	8006a68 <__multiply+0x94>
 8006a26:	f107 0814 	add.w	r8, r7, #20
 8006a2a:	f109 0114 	add.w	r1, r9, #20
 8006a2e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006a32:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006a36:	9302      	str	r3, [sp, #8]
 8006a38:	1beb      	subs	r3, r5, r7
 8006a3a:	3b15      	subs	r3, #21
 8006a3c:	f023 0303 	bic.w	r3, r3, #3
 8006a40:	3304      	adds	r3, #4
 8006a42:	3715      	adds	r7, #21
 8006a44:	42bd      	cmp	r5, r7
 8006a46:	bf38      	it	cc
 8006a48:	2304      	movcc	r3, #4
 8006a4a:	9301      	str	r3, [sp, #4]
 8006a4c:	9b02      	ldr	r3, [sp, #8]
 8006a4e:	9103      	str	r1, [sp, #12]
 8006a50:	428b      	cmp	r3, r1
 8006a52:	d80c      	bhi.n	8006a6e <__multiply+0x9a>
 8006a54:	2e00      	cmp	r6, #0
 8006a56:	dd03      	ble.n	8006a60 <__multiply+0x8c>
 8006a58:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d055      	beq.n	8006b0c <__multiply+0x138>
 8006a60:	6106      	str	r6, [r0, #16]
 8006a62:	b005      	add	sp, #20
 8006a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a68:	f843 2b04 	str.w	r2, [r3], #4
 8006a6c:	e7d9      	b.n	8006a22 <__multiply+0x4e>
 8006a6e:	f8b1 a000 	ldrh.w	sl, [r1]
 8006a72:	f1ba 0f00 	cmp.w	sl, #0
 8006a76:	d01f      	beq.n	8006ab8 <__multiply+0xe4>
 8006a78:	46c4      	mov	ip, r8
 8006a7a:	46a1      	mov	r9, r4
 8006a7c:	2700      	movs	r7, #0
 8006a7e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006a82:	f8d9 3000 	ldr.w	r3, [r9]
 8006a86:	fa1f fb82 	uxth.w	fp, r2
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006a90:	443b      	add	r3, r7
 8006a92:	f8d9 7000 	ldr.w	r7, [r9]
 8006a96:	0c12      	lsrs	r2, r2, #16
 8006a98:	0c3f      	lsrs	r7, r7, #16
 8006a9a:	fb0a 7202 	mla	r2, sl, r2, r7
 8006a9e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006aa8:	4565      	cmp	r5, ip
 8006aaa:	f849 3b04 	str.w	r3, [r9], #4
 8006aae:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006ab2:	d8e4      	bhi.n	8006a7e <__multiply+0xaa>
 8006ab4:	9b01      	ldr	r3, [sp, #4]
 8006ab6:	50e7      	str	r7, [r4, r3]
 8006ab8:	9b03      	ldr	r3, [sp, #12]
 8006aba:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006abe:	3104      	adds	r1, #4
 8006ac0:	f1b9 0f00 	cmp.w	r9, #0
 8006ac4:	d020      	beq.n	8006b08 <__multiply+0x134>
 8006ac6:	6823      	ldr	r3, [r4, #0]
 8006ac8:	4647      	mov	r7, r8
 8006aca:	46a4      	mov	ip, r4
 8006acc:	f04f 0a00 	mov.w	sl, #0
 8006ad0:	f8b7 b000 	ldrh.w	fp, [r7]
 8006ad4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006ad8:	fb09 220b 	mla	r2, r9, fp, r2
 8006adc:	4452      	add	r2, sl
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ae4:	f84c 3b04 	str.w	r3, [ip], #4
 8006ae8:	f857 3b04 	ldr.w	r3, [r7], #4
 8006aec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006af0:	f8bc 3000 	ldrh.w	r3, [ip]
 8006af4:	fb09 330a 	mla	r3, r9, sl, r3
 8006af8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006afc:	42bd      	cmp	r5, r7
 8006afe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b02:	d8e5      	bhi.n	8006ad0 <__multiply+0xfc>
 8006b04:	9a01      	ldr	r2, [sp, #4]
 8006b06:	50a3      	str	r3, [r4, r2]
 8006b08:	3404      	adds	r4, #4
 8006b0a:	e79f      	b.n	8006a4c <__multiply+0x78>
 8006b0c:	3e01      	subs	r6, #1
 8006b0e:	e7a1      	b.n	8006a54 <__multiply+0x80>
 8006b10:	08007c3c 	.word	0x08007c3c
 8006b14:	08007c4d 	.word	0x08007c4d

08006b18 <__pow5mult>:
 8006b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b1c:	4615      	mov	r5, r2
 8006b1e:	f012 0203 	ands.w	r2, r2, #3
 8006b22:	4607      	mov	r7, r0
 8006b24:	460e      	mov	r6, r1
 8006b26:	d007      	beq.n	8006b38 <__pow5mult+0x20>
 8006b28:	4c25      	ldr	r4, [pc, #148]	@ (8006bc0 <__pow5mult+0xa8>)
 8006b2a:	3a01      	subs	r2, #1
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006b32:	f7ff fea7 	bl	8006884 <__multadd>
 8006b36:	4606      	mov	r6, r0
 8006b38:	10ad      	asrs	r5, r5, #2
 8006b3a:	d03d      	beq.n	8006bb8 <__pow5mult+0xa0>
 8006b3c:	69fc      	ldr	r4, [r7, #28]
 8006b3e:	b97c      	cbnz	r4, 8006b60 <__pow5mult+0x48>
 8006b40:	2010      	movs	r0, #16
 8006b42:	f7ff fd87 	bl	8006654 <malloc>
 8006b46:	4602      	mov	r2, r0
 8006b48:	61f8      	str	r0, [r7, #28]
 8006b4a:	b928      	cbnz	r0, 8006b58 <__pow5mult+0x40>
 8006b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8006bc4 <__pow5mult+0xac>)
 8006b4e:	481e      	ldr	r0, [pc, #120]	@ (8006bc8 <__pow5mult+0xb0>)
 8006b50:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006b54:	f000 fbea 	bl	800732c <__assert_func>
 8006b58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b5c:	6004      	str	r4, [r0, #0]
 8006b5e:	60c4      	str	r4, [r0, #12]
 8006b60:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006b64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006b68:	b94c      	cbnz	r4, 8006b7e <__pow5mult+0x66>
 8006b6a:	f240 2171 	movw	r1, #625	@ 0x271
 8006b6e:	4638      	mov	r0, r7
 8006b70:	f7ff ff1a 	bl	80069a8 <__i2b>
 8006b74:	2300      	movs	r3, #0
 8006b76:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b7a:	4604      	mov	r4, r0
 8006b7c:	6003      	str	r3, [r0, #0]
 8006b7e:	f04f 0900 	mov.w	r9, #0
 8006b82:	07eb      	lsls	r3, r5, #31
 8006b84:	d50a      	bpl.n	8006b9c <__pow5mult+0x84>
 8006b86:	4631      	mov	r1, r6
 8006b88:	4622      	mov	r2, r4
 8006b8a:	4638      	mov	r0, r7
 8006b8c:	f7ff ff22 	bl	80069d4 <__multiply>
 8006b90:	4631      	mov	r1, r6
 8006b92:	4680      	mov	r8, r0
 8006b94:	4638      	mov	r0, r7
 8006b96:	f7ff fe53 	bl	8006840 <_Bfree>
 8006b9a:	4646      	mov	r6, r8
 8006b9c:	106d      	asrs	r5, r5, #1
 8006b9e:	d00b      	beq.n	8006bb8 <__pow5mult+0xa0>
 8006ba0:	6820      	ldr	r0, [r4, #0]
 8006ba2:	b938      	cbnz	r0, 8006bb4 <__pow5mult+0x9c>
 8006ba4:	4622      	mov	r2, r4
 8006ba6:	4621      	mov	r1, r4
 8006ba8:	4638      	mov	r0, r7
 8006baa:	f7ff ff13 	bl	80069d4 <__multiply>
 8006bae:	6020      	str	r0, [r4, #0]
 8006bb0:	f8c0 9000 	str.w	r9, [r0]
 8006bb4:	4604      	mov	r4, r0
 8006bb6:	e7e4      	b.n	8006b82 <__pow5mult+0x6a>
 8006bb8:	4630      	mov	r0, r6
 8006bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bbe:	bf00      	nop
 8006bc0:	08007d00 	.word	0x08007d00
 8006bc4:	08007bcd 	.word	0x08007bcd
 8006bc8:	08007c4d 	.word	0x08007c4d

08006bcc <__lshift>:
 8006bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bd0:	460c      	mov	r4, r1
 8006bd2:	6849      	ldr	r1, [r1, #4]
 8006bd4:	6923      	ldr	r3, [r4, #16]
 8006bd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006bda:	68a3      	ldr	r3, [r4, #8]
 8006bdc:	4607      	mov	r7, r0
 8006bde:	4691      	mov	r9, r2
 8006be0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006be4:	f108 0601 	add.w	r6, r8, #1
 8006be8:	42b3      	cmp	r3, r6
 8006bea:	db0b      	blt.n	8006c04 <__lshift+0x38>
 8006bec:	4638      	mov	r0, r7
 8006bee:	f7ff fde7 	bl	80067c0 <_Balloc>
 8006bf2:	4605      	mov	r5, r0
 8006bf4:	b948      	cbnz	r0, 8006c0a <__lshift+0x3e>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	4b28      	ldr	r3, [pc, #160]	@ (8006c9c <__lshift+0xd0>)
 8006bfa:	4829      	ldr	r0, [pc, #164]	@ (8006ca0 <__lshift+0xd4>)
 8006bfc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006c00:	f000 fb94 	bl	800732c <__assert_func>
 8006c04:	3101      	adds	r1, #1
 8006c06:	005b      	lsls	r3, r3, #1
 8006c08:	e7ee      	b.n	8006be8 <__lshift+0x1c>
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	f100 0114 	add.w	r1, r0, #20
 8006c10:	f100 0210 	add.w	r2, r0, #16
 8006c14:	4618      	mov	r0, r3
 8006c16:	4553      	cmp	r3, sl
 8006c18:	db33      	blt.n	8006c82 <__lshift+0xb6>
 8006c1a:	6920      	ldr	r0, [r4, #16]
 8006c1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006c20:	f104 0314 	add.w	r3, r4, #20
 8006c24:	f019 091f 	ands.w	r9, r9, #31
 8006c28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006c2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006c30:	d02b      	beq.n	8006c8a <__lshift+0xbe>
 8006c32:	f1c9 0e20 	rsb	lr, r9, #32
 8006c36:	468a      	mov	sl, r1
 8006c38:	2200      	movs	r2, #0
 8006c3a:	6818      	ldr	r0, [r3, #0]
 8006c3c:	fa00 f009 	lsl.w	r0, r0, r9
 8006c40:	4310      	orrs	r0, r2
 8006c42:	f84a 0b04 	str.w	r0, [sl], #4
 8006c46:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c4a:	459c      	cmp	ip, r3
 8006c4c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006c50:	d8f3      	bhi.n	8006c3a <__lshift+0x6e>
 8006c52:	ebac 0304 	sub.w	r3, ip, r4
 8006c56:	3b15      	subs	r3, #21
 8006c58:	f023 0303 	bic.w	r3, r3, #3
 8006c5c:	3304      	adds	r3, #4
 8006c5e:	f104 0015 	add.w	r0, r4, #21
 8006c62:	4560      	cmp	r0, ip
 8006c64:	bf88      	it	hi
 8006c66:	2304      	movhi	r3, #4
 8006c68:	50ca      	str	r2, [r1, r3]
 8006c6a:	b10a      	cbz	r2, 8006c70 <__lshift+0xa4>
 8006c6c:	f108 0602 	add.w	r6, r8, #2
 8006c70:	3e01      	subs	r6, #1
 8006c72:	4638      	mov	r0, r7
 8006c74:	612e      	str	r6, [r5, #16]
 8006c76:	4621      	mov	r1, r4
 8006c78:	f7ff fde2 	bl	8006840 <_Bfree>
 8006c7c:	4628      	mov	r0, r5
 8006c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c82:	f842 0f04 	str.w	r0, [r2, #4]!
 8006c86:	3301      	adds	r3, #1
 8006c88:	e7c5      	b.n	8006c16 <__lshift+0x4a>
 8006c8a:	3904      	subs	r1, #4
 8006c8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c90:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c94:	459c      	cmp	ip, r3
 8006c96:	d8f9      	bhi.n	8006c8c <__lshift+0xc0>
 8006c98:	e7ea      	b.n	8006c70 <__lshift+0xa4>
 8006c9a:	bf00      	nop
 8006c9c:	08007c3c 	.word	0x08007c3c
 8006ca0:	08007c4d 	.word	0x08007c4d

08006ca4 <__mcmp>:
 8006ca4:	690a      	ldr	r2, [r1, #16]
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	6900      	ldr	r0, [r0, #16]
 8006caa:	1a80      	subs	r0, r0, r2
 8006cac:	b530      	push	{r4, r5, lr}
 8006cae:	d10e      	bne.n	8006cce <__mcmp+0x2a>
 8006cb0:	3314      	adds	r3, #20
 8006cb2:	3114      	adds	r1, #20
 8006cb4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006cb8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006cbc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006cc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006cc4:	4295      	cmp	r5, r2
 8006cc6:	d003      	beq.n	8006cd0 <__mcmp+0x2c>
 8006cc8:	d205      	bcs.n	8006cd6 <__mcmp+0x32>
 8006cca:	f04f 30ff 	mov.w	r0, #4294967295
 8006cce:	bd30      	pop	{r4, r5, pc}
 8006cd0:	42a3      	cmp	r3, r4
 8006cd2:	d3f3      	bcc.n	8006cbc <__mcmp+0x18>
 8006cd4:	e7fb      	b.n	8006cce <__mcmp+0x2a>
 8006cd6:	2001      	movs	r0, #1
 8006cd8:	e7f9      	b.n	8006cce <__mcmp+0x2a>
	...

08006cdc <__mdiff>:
 8006cdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce0:	4689      	mov	r9, r1
 8006ce2:	4606      	mov	r6, r0
 8006ce4:	4611      	mov	r1, r2
 8006ce6:	4648      	mov	r0, r9
 8006ce8:	4614      	mov	r4, r2
 8006cea:	f7ff ffdb 	bl	8006ca4 <__mcmp>
 8006cee:	1e05      	subs	r5, r0, #0
 8006cf0:	d112      	bne.n	8006d18 <__mdiff+0x3c>
 8006cf2:	4629      	mov	r1, r5
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	f7ff fd63 	bl	80067c0 <_Balloc>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	b928      	cbnz	r0, 8006d0a <__mdiff+0x2e>
 8006cfe:	4b3f      	ldr	r3, [pc, #252]	@ (8006dfc <__mdiff+0x120>)
 8006d00:	f240 2137 	movw	r1, #567	@ 0x237
 8006d04:	483e      	ldr	r0, [pc, #248]	@ (8006e00 <__mdiff+0x124>)
 8006d06:	f000 fb11 	bl	800732c <__assert_func>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006d10:	4610      	mov	r0, r2
 8006d12:	b003      	add	sp, #12
 8006d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d18:	bfbc      	itt	lt
 8006d1a:	464b      	movlt	r3, r9
 8006d1c:	46a1      	movlt	r9, r4
 8006d1e:	4630      	mov	r0, r6
 8006d20:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006d24:	bfba      	itte	lt
 8006d26:	461c      	movlt	r4, r3
 8006d28:	2501      	movlt	r5, #1
 8006d2a:	2500      	movge	r5, #0
 8006d2c:	f7ff fd48 	bl	80067c0 <_Balloc>
 8006d30:	4602      	mov	r2, r0
 8006d32:	b918      	cbnz	r0, 8006d3c <__mdiff+0x60>
 8006d34:	4b31      	ldr	r3, [pc, #196]	@ (8006dfc <__mdiff+0x120>)
 8006d36:	f240 2145 	movw	r1, #581	@ 0x245
 8006d3a:	e7e3      	b.n	8006d04 <__mdiff+0x28>
 8006d3c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006d40:	6926      	ldr	r6, [r4, #16]
 8006d42:	60c5      	str	r5, [r0, #12]
 8006d44:	f109 0310 	add.w	r3, r9, #16
 8006d48:	f109 0514 	add.w	r5, r9, #20
 8006d4c:	f104 0e14 	add.w	lr, r4, #20
 8006d50:	f100 0b14 	add.w	fp, r0, #20
 8006d54:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006d58:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006d5c:	9301      	str	r3, [sp, #4]
 8006d5e:	46d9      	mov	r9, fp
 8006d60:	f04f 0c00 	mov.w	ip, #0
 8006d64:	9b01      	ldr	r3, [sp, #4]
 8006d66:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006d6a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006d6e:	9301      	str	r3, [sp, #4]
 8006d70:	fa1f f38a 	uxth.w	r3, sl
 8006d74:	4619      	mov	r1, r3
 8006d76:	b283      	uxth	r3, r0
 8006d78:	1acb      	subs	r3, r1, r3
 8006d7a:	0c00      	lsrs	r0, r0, #16
 8006d7c:	4463      	add	r3, ip
 8006d7e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006d82:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006d8c:	4576      	cmp	r6, lr
 8006d8e:	f849 3b04 	str.w	r3, [r9], #4
 8006d92:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006d96:	d8e5      	bhi.n	8006d64 <__mdiff+0x88>
 8006d98:	1b33      	subs	r3, r6, r4
 8006d9a:	3b15      	subs	r3, #21
 8006d9c:	f023 0303 	bic.w	r3, r3, #3
 8006da0:	3415      	adds	r4, #21
 8006da2:	3304      	adds	r3, #4
 8006da4:	42a6      	cmp	r6, r4
 8006da6:	bf38      	it	cc
 8006da8:	2304      	movcc	r3, #4
 8006daa:	441d      	add	r5, r3
 8006dac:	445b      	add	r3, fp
 8006dae:	461e      	mov	r6, r3
 8006db0:	462c      	mov	r4, r5
 8006db2:	4544      	cmp	r4, r8
 8006db4:	d30e      	bcc.n	8006dd4 <__mdiff+0xf8>
 8006db6:	f108 0103 	add.w	r1, r8, #3
 8006dba:	1b49      	subs	r1, r1, r5
 8006dbc:	f021 0103 	bic.w	r1, r1, #3
 8006dc0:	3d03      	subs	r5, #3
 8006dc2:	45a8      	cmp	r8, r5
 8006dc4:	bf38      	it	cc
 8006dc6:	2100      	movcc	r1, #0
 8006dc8:	440b      	add	r3, r1
 8006dca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006dce:	b191      	cbz	r1, 8006df6 <__mdiff+0x11a>
 8006dd0:	6117      	str	r7, [r2, #16]
 8006dd2:	e79d      	b.n	8006d10 <__mdiff+0x34>
 8006dd4:	f854 1b04 	ldr.w	r1, [r4], #4
 8006dd8:	46e6      	mov	lr, ip
 8006dda:	0c08      	lsrs	r0, r1, #16
 8006ddc:	fa1c fc81 	uxtah	ip, ip, r1
 8006de0:	4471      	add	r1, lr
 8006de2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006de6:	b289      	uxth	r1, r1
 8006de8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006dec:	f846 1b04 	str.w	r1, [r6], #4
 8006df0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006df4:	e7dd      	b.n	8006db2 <__mdiff+0xd6>
 8006df6:	3f01      	subs	r7, #1
 8006df8:	e7e7      	b.n	8006dca <__mdiff+0xee>
 8006dfa:	bf00      	nop
 8006dfc:	08007c3c 	.word	0x08007c3c
 8006e00:	08007c4d 	.word	0x08007c4d

08006e04 <__d2b>:
 8006e04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e08:	460f      	mov	r7, r1
 8006e0a:	2101      	movs	r1, #1
 8006e0c:	ec59 8b10 	vmov	r8, r9, d0
 8006e10:	4616      	mov	r6, r2
 8006e12:	f7ff fcd5 	bl	80067c0 <_Balloc>
 8006e16:	4604      	mov	r4, r0
 8006e18:	b930      	cbnz	r0, 8006e28 <__d2b+0x24>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	4b23      	ldr	r3, [pc, #140]	@ (8006eac <__d2b+0xa8>)
 8006e1e:	4824      	ldr	r0, [pc, #144]	@ (8006eb0 <__d2b+0xac>)
 8006e20:	f240 310f 	movw	r1, #783	@ 0x30f
 8006e24:	f000 fa82 	bl	800732c <__assert_func>
 8006e28:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006e2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e30:	b10d      	cbz	r5, 8006e36 <__d2b+0x32>
 8006e32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e36:	9301      	str	r3, [sp, #4]
 8006e38:	f1b8 0300 	subs.w	r3, r8, #0
 8006e3c:	d023      	beq.n	8006e86 <__d2b+0x82>
 8006e3e:	4668      	mov	r0, sp
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	f7ff fd84 	bl	800694e <__lo0bits>
 8006e46:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006e4a:	b1d0      	cbz	r0, 8006e82 <__d2b+0x7e>
 8006e4c:	f1c0 0320 	rsb	r3, r0, #32
 8006e50:	fa02 f303 	lsl.w	r3, r2, r3
 8006e54:	430b      	orrs	r3, r1
 8006e56:	40c2      	lsrs	r2, r0
 8006e58:	6163      	str	r3, [r4, #20]
 8006e5a:	9201      	str	r2, [sp, #4]
 8006e5c:	9b01      	ldr	r3, [sp, #4]
 8006e5e:	61a3      	str	r3, [r4, #24]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	bf0c      	ite	eq
 8006e64:	2201      	moveq	r2, #1
 8006e66:	2202      	movne	r2, #2
 8006e68:	6122      	str	r2, [r4, #16]
 8006e6a:	b1a5      	cbz	r5, 8006e96 <__d2b+0x92>
 8006e6c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006e70:	4405      	add	r5, r0
 8006e72:	603d      	str	r5, [r7, #0]
 8006e74:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006e78:	6030      	str	r0, [r6, #0]
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	b003      	add	sp, #12
 8006e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e82:	6161      	str	r1, [r4, #20]
 8006e84:	e7ea      	b.n	8006e5c <__d2b+0x58>
 8006e86:	a801      	add	r0, sp, #4
 8006e88:	f7ff fd61 	bl	800694e <__lo0bits>
 8006e8c:	9b01      	ldr	r3, [sp, #4]
 8006e8e:	6163      	str	r3, [r4, #20]
 8006e90:	3020      	adds	r0, #32
 8006e92:	2201      	movs	r2, #1
 8006e94:	e7e8      	b.n	8006e68 <__d2b+0x64>
 8006e96:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006e9a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006e9e:	6038      	str	r0, [r7, #0]
 8006ea0:	6918      	ldr	r0, [r3, #16]
 8006ea2:	f7ff fd35 	bl	8006910 <__hi0bits>
 8006ea6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006eaa:	e7e5      	b.n	8006e78 <__d2b+0x74>
 8006eac:	08007c3c 	.word	0x08007c3c
 8006eb0:	08007c4d 	.word	0x08007c4d

08006eb4 <__ssputs_r>:
 8006eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eb8:	688e      	ldr	r6, [r1, #8]
 8006eba:	461f      	mov	r7, r3
 8006ebc:	42be      	cmp	r6, r7
 8006ebe:	680b      	ldr	r3, [r1, #0]
 8006ec0:	4682      	mov	sl, r0
 8006ec2:	460c      	mov	r4, r1
 8006ec4:	4690      	mov	r8, r2
 8006ec6:	d82d      	bhi.n	8006f24 <__ssputs_r+0x70>
 8006ec8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ecc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006ed0:	d026      	beq.n	8006f20 <__ssputs_r+0x6c>
 8006ed2:	6965      	ldr	r5, [r4, #20]
 8006ed4:	6909      	ldr	r1, [r1, #16]
 8006ed6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006eda:	eba3 0901 	sub.w	r9, r3, r1
 8006ede:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ee2:	1c7b      	adds	r3, r7, #1
 8006ee4:	444b      	add	r3, r9
 8006ee6:	106d      	asrs	r5, r5, #1
 8006ee8:	429d      	cmp	r5, r3
 8006eea:	bf38      	it	cc
 8006eec:	461d      	movcc	r5, r3
 8006eee:	0553      	lsls	r3, r2, #21
 8006ef0:	d527      	bpl.n	8006f42 <__ssputs_r+0x8e>
 8006ef2:	4629      	mov	r1, r5
 8006ef4:	f7ff fbd8 	bl	80066a8 <_malloc_r>
 8006ef8:	4606      	mov	r6, r0
 8006efa:	b360      	cbz	r0, 8006f56 <__ssputs_r+0xa2>
 8006efc:	6921      	ldr	r1, [r4, #16]
 8006efe:	464a      	mov	r2, r9
 8006f00:	f000 fa06 	bl	8007310 <memcpy>
 8006f04:	89a3      	ldrh	r3, [r4, #12]
 8006f06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006f0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f0e:	81a3      	strh	r3, [r4, #12]
 8006f10:	6126      	str	r6, [r4, #16]
 8006f12:	6165      	str	r5, [r4, #20]
 8006f14:	444e      	add	r6, r9
 8006f16:	eba5 0509 	sub.w	r5, r5, r9
 8006f1a:	6026      	str	r6, [r4, #0]
 8006f1c:	60a5      	str	r5, [r4, #8]
 8006f1e:	463e      	mov	r6, r7
 8006f20:	42be      	cmp	r6, r7
 8006f22:	d900      	bls.n	8006f26 <__ssputs_r+0x72>
 8006f24:	463e      	mov	r6, r7
 8006f26:	6820      	ldr	r0, [r4, #0]
 8006f28:	4632      	mov	r2, r6
 8006f2a:	4641      	mov	r1, r8
 8006f2c:	f000 f9c6 	bl	80072bc <memmove>
 8006f30:	68a3      	ldr	r3, [r4, #8]
 8006f32:	1b9b      	subs	r3, r3, r6
 8006f34:	60a3      	str	r3, [r4, #8]
 8006f36:	6823      	ldr	r3, [r4, #0]
 8006f38:	4433      	add	r3, r6
 8006f3a:	6023      	str	r3, [r4, #0]
 8006f3c:	2000      	movs	r0, #0
 8006f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f42:	462a      	mov	r2, r5
 8006f44:	f000 fa36 	bl	80073b4 <_realloc_r>
 8006f48:	4606      	mov	r6, r0
 8006f4a:	2800      	cmp	r0, #0
 8006f4c:	d1e0      	bne.n	8006f10 <__ssputs_r+0x5c>
 8006f4e:	6921      	ldr	r1, [r4, #16]
 8006f50:	4650      	mov	r0, sl
 8006f52:	f7ff fb35 	bl	80065c0 <_free_r>
 8006f56:	230c      	movs	r3, #12
 8006f58:	f8ca 3000 	str.w	r3, [sl]
 8006f5c:	89a3      	ldrh	r3, [r4, #12]
 8006f5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f62:	81a3      	strh	r3, [r4, #12]
 8006f64:	f04f 30ff 	mov.w	r0, #4294967295
 8006f68:	e7e9      	b.n	8006f3e <__ssputs_r+0x8a>
	...

08006f6c <_svfiprintf_r>:
 8006f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f70:	4698      	mov	r8, r3
 8006f72:	898b      	ldrh	r3, [r1, #12]
 8006f74:	061b      	lsls	r3, r3, #24
 8006f76:	b09d      	sub	sp, #116	@ 0x74
 8006f78:	4607      	mov	r7, r0
 8006f7a:	460d      	mov	r5, r1
 8006f7c:	4614      	mov	r4, r2
 8006f7e:	d510      	bpl.n	8006fa2 <_svfiprintf_r+0x36>
 8006f80:	690b      	ldr	r3, [r1, #16]
 8006f82:	b973      	cbnz	r3, 8006fa2 <_svfiprintf_r+0x36>
 8006f84:	2140      	movs	r1, #64	@ 0x40
 8006f86:	f7ff fb8f 	bl	80066a8 <_malloc_r>
 8006f8a:	6028      	str	r0, [r5, #0]
 8006f8c:	6128      	str	r0, [r5, #16]
 8006f8e:	b930      	cbnz	r0, 8006f9e <_svfiprintf_r+0x32>
 8006f90:	230c      	movs	r3, #12
 8006f92:	603b      	str	r3, [r7, #0]
 8006f94:	f04f 30ff 	mov.w	r0, #4294967295
 8006f98:	b01d      	add	sp, #116	@ 0x74
 8006f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f9e:	2340      	movs	r3, #64	@ 0x40
 8006fa0:	616b      	str	r3, [r5, #20]
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fa6:	2320      	movs	r3, #32
 8006fa8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006fac:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fb0:	2330      	movs	r3, #48	@ 0x30
 8006fb2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007150 <_svfiprintf_r+0x1e4>
 8006fb6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006fba:	f04f 0901 	mov.w	r9, #1
 8006fbe:	4623      	mov	r3, r4
 8006fc0:	469a      	mov	sl, r3
 8006fc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fc6:	b10a      	cbz	r2, 8006fcc <_svfiprintf_r+0x60>
 8006fc8:	2a25      	cmp	r2, #37	@ 0x25
 8006fca:	d1f9      	bne.n	8006fc0 <_svfiprintf_r+0x54>
 8006fcc:	ebba 0b04 	subs.w	fp, sl, r4
 8006fd0:	d00b      	beq.n	8006fea <_svfiprintf_r+0x7e>
 8006fd2:	465b      	mov	r3, fp
 8006fd4:	4622      	mov	r2, r4
 8006fd6:	4629      	mov	r1, r5
 8006fd8:	4638      	mov	r0, r7
 8006fda:	f7ff ff6b 	bl	8006eb4 <__ssputs_r>
 8006fde:	3001      	adds	r0, #1
 8006fe0:	f000 80a7 	beq.w	8007132 <_svfiprintf_r+0x1c6>
 8006fe4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fe6:	445a      	add	r2, fp
 8006fe8:	9209      	str	r2, [sp, #36]	@ 0x24
 8006fea:	f89a 3000 	ldrb.w	r3, [sl]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f000 809f 	beq.w	8007132 <_svfiprintf_r+0x1c6>
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8006ffa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ffe:	f10a 0a01 	add.w	sl, sl, #1
 8007002:	9304      	str	r3, [sp, #16]
 8007004:	9307      	str	r3, [sp, #28]
 8007006:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800700a:	931a      	str	r3, [sp, #104]	@ 0x68
 800700c:	4654      	mov	r4, sl
 800700e:	2205      	movs	r2, #5
 8007010:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007014:	484e      	ldr	r0, [pc, #312]	@ (8007150 <_svfiprintf_r+0x1e4>)
 8007016:	f7f9 f8db 	bl	80001d0 <memchr>
 800701a:	9a04      	ldr	r2, [sp, #16]
 800701c:	b9d8      	cbnz	r0, 8007056 <_svfiprintf_r+0xea>
 800701e:	06d0      	lsls	r0, r2, #27
 8007020:	bf44      	itt	mi
 8007022:	2320      	movmi	r3, #32
 8007024:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007028:	0711      	lsls	r1, r2, #28
 800702a:	bf44      	itt	mi
 800702c:	232b      	movmi	r3, #43	@ 0x2b
 800702e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007032:	f89a 3000 	ldrb.w	r3, [sl]
 8007036:	2b2a      	cmp	r3, #42	@ 0x2a
 8007038:	d015      	beq.n	8007066 <_svfiprintf_r+0xfa>
 800703a:	9a07      	ldr	r2, [sp, #28]
 800703c:	4654      	mov	r4, sl
 800703e:	2000      	movs	r0, #0
 8007040:	f04f 0c0a 	mov.w	ip, #10
 8007044:	4621      	mov	r1, r4
 8007046:	f811 3b01 	ldrb.w	r3, [r1], #1
 800704a:	3b30      	subs	r3, #48	@ 0x30
 800704c:	2b09      	cmp	r3, #9
 800704e:	d94b      	bls.n	80070e8 <_svfiprintf_r+0x17c>
 8007050:	b1b0      	cbz	r0, 8007080 <_svfiprintf_r+0x114>
 8007052:	9207      	str	r2, [sp, #28]
 8007054:	e014      	b.n	8007080 <_svfiprintf_r+0x114>
 8007056:	eba0 0308 	sub.w	r3, r0, r8
 800705a:	fa09 f303 	lsl.w	r3, r9, r3
 800705e:	4313      	orrs	r3, r2
 8007060:	9304      	str	r3, [sp, #16]
 8007062:	46a2      	mov	sl, r4
 8007064:	e7d2      	b.n	800700c <_svfiprintf_r+0xa0>
 8007066:	9b03      	ldr	r3, [sp, #12]
 8007068:	1d19      	adds	r1, r3, #4
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	9103      	str	r1, [sp, #12]
 800706e:	2b00      	cmp	r3, #0
 8007070:	bfbb      	ittet	lt
 8007072:	425b      	neglt	r3, r3
 8007074:	f042 0202 	orrlt.w	r2, r2, #2
 8007078:	9307      	strge	r3, [sp, #28]
 800707a:	9307      	strlt	r3, [sp, #28]
 800707c:	bfb8      	it	lt
 800707e:	9204      	strlt	r2, [sp, #16]
 8007080:	7823      	ldrb	r3, [r4, #0]
 8007082:	2b2e      	cmp	r3, #46	@ 0x2e
 8007084:	d10a      	bne.n	800709c <_svfiprintf_r+0x130>
 8007086:	7863      	ldrb	r3, [r4, #1]
 8007088:	2b2a      	cmp	r3, #42	@ 0x2a
 800708a:	d132      	bne.n	80070f2 <_svfiprintf_r+0x186>
 800708c:	9b03      	ldr	r3, [sp, #12]
 800708e:	1d1a      	adds	r2, r3, #4
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	9203      	str	r2, [sp, #12]
 8007094:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007098:	3402      	adds	r4, #2
 800709a:	9305      	str	r3, [sp, #20]
 800709c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007160 <_svfiprintf_r+0x1f4>
 80070a0:	7821      	ldrb	r1, [r4, #0]
 80070a2:	2203      	movs	r2, #3
 80070a4:	4650      	mov	r0, sl
 80070a6:	f7f9 f893 	bl	80001d0 <memchr>
 80070aa:	b138      	cbz	r0, 80070bc <_svfiprintf_r+0x150>
 80070ac:	9b04      	ldr	r3, [sp, #16]
 80070ae:	eba0 000a 	sub.w	r0, r0, sl
 80070b2:	2240      	movs	r2, #64	@ 0x40
 80070b4:	4082      	lsls	r2, r0
 80070b6:	4313      	orrs	r3, r2
 80070b8:	3401      	adds	r4, #1
 80070ba:	9304      	str	r3, [sp, #16]
 80070bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070c0:	4824      	ldr	r0, [pc, #144]	@ (8007154 <_svfiprintf_r+0x1e8>)
 80070c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80070c6:	2206      	movs	r2, #6
 80070c8:	f7f9 f882 	bl	80001d0 <memchr>
 80070cc:	2800      	cmp	r0, #0
 80070ce:	d036      	beq.n	800713e <_svfiprintf_r+0x1d2>
 80070d0:	4b21      	ldr	r3, [pc, #132]	@ (8007158 <_svfiprintf_r+0x1ec>)
 80070d2:	bb1b      	cbnz	r3, 800711c <_svfiprintf_r+0x1b0>
 80070d4:	9b03      	ldr	r3, [sp, #12]
 80070d6:	3307      	adds	r3, #7
 80070d8:	f023 0307 	bic.w	r3, r3, #7
 80070dc:	3308      	adds	r3, #8
 80070de:	9303      	str	r3, [sp, #12]
 80070e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070e2:	4433      	add	r3, r6
 80070e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80070e6:	e76a      	b.n	8006fbe <_svfiprintf_r+0x52>
 80070e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80070ec:	460c      	mov	r4, r1
 80070ee:	2001      	movs	r0, #1
 80070f0:	e7a8      	b.n	8007044 <_svfiprintf_r+0xd8>
 80070f2:	2300      	movs	r3, #0
 80070f4:	3401      	adds	r4, #1
 80070f6:	9305      	str	r3, [sp, #20]
 80070f8:	4619      	mov	r1, r3
 80070fa:	f04f 0c0a 	mov.w	ip, #10
 80070fe:	4620      	mov	r0, r4
 8007100:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007104:	3a30      	subs	r2, #48	@ 0x30
 8007106:	2a09      	cmp	r2, #9
 8007108:	d903      	bls.n	8007112 <_svfiprintf_r+0x1a6>
 800710a:	2b00      	cmp	r3, #0
 800710c:	d0c6      	beq.n	800709c <_svfiprintf_r+0x130>
 800710e:	9105      	str	r1, [sp, #20]
 8007110:	e7c4      	b.n	800709c <_svfiprintf_r+0x130>
 8007112:	fb0c 2101 	mla	r1, ip, r1, r2
 8007116:	4604      	mov	r4, r0
 8007118:	2301      	movs	r3, #1
 800711a:	e7f0      	b.n	80070fe <_svfiprintf_r+0x192>
 800711c:	ab03      	add	r3, sp, #12
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	462a      	mov	r2, r5
 8007122:	4b0e      	ldr	r3, [pc, #56]	@ (800715c <_svfiprintf_r+0x1f0>)
 8007124:	a904      	add	r1, sp, #16
 8007126:	4638      	mov	r0, r7
 8007128:	f7fd fe94 	bl	8004e54 <_printf_float>
 800712c:	1c42      	adds	r2, r0, #1
 800712e:	4606      	mov	r6, r0
 8007130:	d1d6      	bne.n	80070e0 <_svfiprintf_r+0x174>
 8007132:	89ab      	ldrh	r3, [r5, #12]
 8007134:	065b      	lsls	r3, r3, #25
 8007136:	f53f af2d 	bmi.w	8006f94 <_svfiprintf_r+0x28>
 800713a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800713c:	e72c      	b.n	8006f98 <_svfiprintf_r+0x2c>
 800713e:	ab03      	add	r3, sp, #12
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	462a      	mov	r2, r5
 8007144:	4b05      	ldr	r3, [pc, #20]	@ (800715c <_svfiprintf_r+0x1f0>)
 8007146:	a904      	add	r1, sp, #16
 8007148:	4638      	mov	r0, r7
 800714a:	f7fe f91b 	bl	8005384 <_printf_i>
 800714e:	e7ed      	b.n	800712c <_svfiprintf_r+0x1c0>
 8007150:	08007ca6 	.word	0x08007ca6
 8007154:	08007cb0 	.word	0x08007cb0
 8007158:	08004e55 	.word	0x08004e55
 800715c:	08006eb5 	.word	0x08006eb5
 8007160:	08007cac 	.word	0x08007cac

08007164 <__sflush_r>:
 8007164:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800716c:	0716      	lsls	r6, r2, #28
 800716e:	4605      	mov	r5, r0
 8007170:	460c      	mov	r4, r1
 8007172:	d454      	bmi.n	800721e <__sflush_r+0xba>
 8007174:	684b      	ldr	r3, [r1, #4]
 8007176:	2b00      	cmp	r3, #0
 8007178:	dc02      	bgt.n	8007180 <__sflush_r+0x1c>
 800717a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800717c:	2b00      	cmp	r3, #0
 800717e:	dd48      	ble.n	8007212 <__sflush_r+0xae>
 8007180:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007182:	2e00      	cmp	r6, #0
 8007184:	d045      	beq.n	8007212 <__sflush_r+0xae>
 8007186:	2300      	movs	r3, #0
 8007188:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800718c:	682f      	ldr	r7, [r5, #0]
 800718e:	6a21      	ldr	r1, [r4, #32]
 8007190:	602b      	str	r3, [r5, #0]
 8007192:	d030      	beq.n	80071f6 <__sflush_r+0x92>
 8007194:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007196:	89a3      	ldrh	r3, [r4, #12]
 8007198:	0759      	lsls	r1, r3, #29
 800719a:	d505      	bpl.n	80071a8 <__sflush_r+0x44>
 800719c:	6863      	ldr	r3, [r4, #4]
 800719e:	1ad2      	subs	r2, r2, r3
 80071a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80071a2:	b10b      	cbz	r3, 80071a8 <__sflush_r+0x44>
 80071a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80071a6:	1ad2      	subs	r2, r2, r3
 80071a8:	2300      	movs	r3, #0
 80071aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80071ac:	6a21      	ldr	r1, [r4, #32]
 80071ae:	4628      	mov	r0, r5
 80071b0:	47b0      	blx	r6
 80071b2:	1c43      	adds	r3, r0, #1
 80071b4:	89a3      	ldrh	r3, [r4, #12]
 80071b6:	d106      	bne.n	80071c6 <__sflush_r+0x62>
 80071b8:	6829      	ldr	r1, [r5, #0]
 80071ba:	291d      	cmp	r1, #29
 80071bc:	d82b      	bhi.n	8007216 <__sflush_r+0xb2>
 80071be:	4a2a      	ldr	r2, [pc, #168]	@ (8007268 <__sflush_r+0x104>)
 80071c0:	40ca      	lsrs	r2, r1
 80071c2:	07d6      	lsls	r6, r2, #31
 80071c4:	d527      	bpl.n	8007216 <__sflush_r+0xb2>
 80071c6:	2200      	movs	r2, #0
 80071c8:	6062      	str	r2, [r4, #4]
 80071ca:	04d9      	lsls	r1, r3, #19
 80071cc:	6922      	ldr	r2, [r4, #16]
 80071ce:	6022      	str	r2, [r4, #0]
 80071d0:	d504      	bpl.n	80071dc <__sflush_r+0x78>
 80071d2:	1c42      	adds	r2, r0, #1
 80071d4:	d101      	bne.n	80071da <__sflush_r+0x76>
 80071d6:	682b      	ldr	r3, [r5, #0]
 80071d8:	b903      	cbnz	r3, 80071dc <__sflush_r+0x78>
 80071da:	6560      	str	r0, [r4, #84]	@ 0x54
 80071dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071de:	602f      	str	r7, [r5, #0]
 80071e0:	b1b9      	cbz	r1, 8007212 <__sflush_r+0xae>
 80071e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80071e6:	4299      	cmp	r1, r3
 80071e8:	d002      	beq.n	80071f0 <__sflush_r+0x8c>
 80071ea:	4628      	mov	r0, r5
 80071ec:	f7ff f9e8 	bl	80065c0 <_free_r>
 80071f0:	2300      	movs	r3, #0
 80071f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80071f4:	e00d      	b.n	8007212 <__sflush_r+0xae>
 80071f6:	2301      	movs	r3, #1
 80071f8:	4628      	mov	r0, r5
 80071fa:	47b0      	blx	r6
 80071fc:	4602      	mov	r2, r0
 80071fe:	1c50      	adds	r0, r2, #1
 8007200:	d1c9      	bne.n	8007196 <__sflush_r+0x32>
 8007202:	682b      	ldr	r3, [r5, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d0c6      	beq.n	8007196 <__sflush_r+0x32>
 8007208:	2b1d      	cmp	r3, #29
 800720a:	d001      	beq.n	8007210 <__sflush_r+0xac>
 800720c:	2b16      	cmp	r3, #22
 800720e:	d11e      	bne.n	800724e <__sflush_r+0xea>
 8007210:	602f      	str	r7, [r5, #0]
 8007212:	2000      	movs	r0, #0
 8007214:	e022      	b.n	800725c <__sflush_r+0xf8>
 8007216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800721a:	b21b      	sxth	r3, r3
 800721c:	e01b      	b.n	8007256 <__sflush_r+0xf2>
 800721e:	690f      	ldr	r7, [r1, #16]
 8007220:	2f00      	cmp	r7, #0
 8007222:	d0f6      	beq.n	8007212 <__sflush_r+0xae>
 8007224:	0793      	lsls	r3, r2, #30
 8007226:	680e      	ldr	r6, [r1, #0]
 8007228:	bf08      	it	eq
 800722a:	694b      	ldreq	r3, [r1, #20]
 800722c:	600f      	str	r7, [r1, #0]
 800722e:	bf18      	it	ne
 8007230:	2300      	movne	r3, #0
 8007232:	eba6 0807 	sub.w	r8, r6, r7
 8007236:	608b      	str	r3, [r1, #8]
 8007238:	f1b8 0f00 	cmp.w	r8, #0
 800723c:	dde9      	ble.n	8007212 <__sflush_r+0xae>
 800723e:	6a21      	ldr	r1, [r4, #32]
 8007240:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007242:	4643      	mov	r3, r8
 8007244:	463a      	mov	r2, r7
 8007246:	4628      	mov	r0, r5
 8007248:	47b0      	blx	r6
 800724a:	2800      	cmp	r0, #0
 800724c:	dc08      	bgt.n	8007260 <__sflush_r+0xfc>
 800724e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007252:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007256:	81a3      	strh	r3, [r4, #12]
 8007258:	f04f 30ff 	mov.w	r0, #4294967295
 800725c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007260:	4407      	add	r7, r0
 8007262:	eba8 0800 	sub.w	r8, r8, r0
 8007266:	e7e7      	b.n	8007238 <__sflush_r+0xd4>
 8007268:	20400001 	.word	0x20400001

0800726c <_fflush_r>:
 800726c:	b538      	push	{r3, r4, r5, lr}
 800726e:	690b      	ldr	r3, [r1, #16]
 8007270:	4605      	mov	r5, r0
 8007272:	460c      	mov	r4, r1
 8007274:	b913      	cbnz	r3, 800727c <_fflush_r+0x10>
 8007276:	2500      	movs	r5, #0
 8007278:	4628      	mov	r0, r5
 800727a:	bd38      	pop	{r3, r4, r5, pc}
 800727c:	b118      	cbz	r0, 8007286 <_fflush_r+0x1a>
 800727e:	6a03      	ldr	r3, [r0, #32]
 8007280:	b90b      	cbnz	r3, 8007286 <_fflush_r+0x1a>
 8007282:	f7fe fa29 	bl	80056d8 <__sinit>
 8007286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d0f3      	beq.n	8007276 <_fflush_r+0xa>
 800728e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007290:	07d0      	lsls	r0, r2, #31
 8007292:	d404      	bmi.n	800729e <_fflush_r+0x32>
 8007294:	0599      	lsls	r1, r3, #22
 8007296:	d402      	bmi.n	800729e <_fflush_r+0x32>
 8007298:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800729a:	f7fe fb36 	bl	800590a <__retarget_lock_acquire_recursive>
 800729e:	4628      	mov	r0, r5
 80072a0:	4621      	mov	r1, r4
 80072a2:	f7ff ff5f 	bl	8007164 <__sflush_r>
 80072a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80072a8:	07da      	lsls	r2, r3, #31
 80072aa:	4605      	mov	r5, r0
 80072ac:	d4e4      	bmi.n	8007278 <_fflush_r+0xc>
 80072ae:	89a3      	ldrh	r3, [r4, #12]
 80072b0:	059b      	lsls	r3, r3, #22
 80072b2:	d4e1      	bmi.n	8007278 <_fflush_r+0xc>
 80072b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072b6:	f7fe fb29 	bl	800590c <__retarget_lock_release_recursive>
 80072ba:	e7dd      	b.n	8007278 <_fflush_r+0xc>

080072bc <memmove>:
 80072bc:	4288      	cmp	r0, r1
 80072be:	b510      	push	{r4, lr}
 80072c0:	eb01 0402 	add.w	r4, r1, r2
 80072c4:	d902      	bls.n	80072cc <memmove+0x10>
 80072c6:	4284      	cmp	r4, r0
 80072c8:	4623      	mov	r3, r4
 80072ca:	d807      	bhi.n	80072dc <memmove+0x20>
 80072cc:	1e43      	subs	r3, r0, #1
 80072ce:	42a1      	cmp	r1, r4
 80072d0:	d008      	beq.n	80072e4 <memmove+0x28>
 80072d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80072da:	e7f8      	b.n	80072ce <memmove+0x12>
 80072dc:	4402      	add	r2, r0
 80072de:	4601      	mov	r1, r0
 80072e0:	428a      	cmp	r2, r1
 80072e2:	d100      	bne.n	80072e6 <memmove+0x2a>
 80072e4:	bd10      	pop	{r4, pc}
 80072e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80072ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80072ee:	e7f7      	b.n	80072e0 <memmove+0x24>

080072f0 <_sbrk_r>:
 80072f0:	b538      	push	{r3, r4, r5, lr}
 80072f2:	4d06      	ldr	r5, [pc, #24]	@ (800730c <_sbrk_r+0x1c>)
 80072f4:	2300      	movs	r3, #0
 80072f6:	4604      	mov	r4, r0
 80072f8:	4608      	mov	r0, r1
 80072fa:	602b      	str	r3, [r5, #0]
 80072fc:	f7fa fcd2 	bl	8001ca4 <_sbrk>
 8007300:	1c43      	adds	r3, r0, #1
 8007302:	d102      	bne.n	800730a <_sbrk_r+0x1a>
 8007304:	682b      	ldr	r3, [r5, #0]
 8007306:	b103      	cbz	r3, 800730a <_sbrk_r+0x1a>
 8007308:	6023      	str	r3, [r4, #0]
 800730a:	bd38      	pop	{r3, r4, r5, pc}
 800730c:	2000045c 	.word	0x2000045c

08007310 <memcpy>:
 8007310:	440a      	add	r2, r1
 8007312:	4291      	cmp	r1, r2
 8007314:	f100 33ff 	add.w	r3, r0, #4294967295
 8007318:	d100      	bne.n	800731c <memcpy+0xc>
 800731a:	4770      	bx	lr
 800731c:	b510      	push	{r4, lr}
 800731e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007322:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007326:	4291      	cmp	r1, r2
 8007328:	d1f9      	bne.n	800731e <memcpy+0xe>
 800732a:	bd10      	pop	{r4, pc}

0800732c <__assert_func>:
 800732c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800732e:	4614      	mov	r4, r2
 8007330:	461a      	mov	r2, r3
 8007332:	4b09      	ldr	r3, [pc, #36]	@ (8007358 <__assert_func+0x2c>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4605      	mov	r5, r0
 8007338:	68d8      	ldr	r0, [r3, #12]
 800733a:	b14c      	cbz	r4, 8007350 <__assert_func+0x24>
 800733c:	4b07      	ldr	r3, [pc, #28]	@ (800735c <__assert_func+0x30>)
 800733e:	9100      	str	r1, [sp, #0]
 8007340:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007344:	4906      	ldr	r1, [pc, #24]	@ (8007360 <__assert_func+0x34>)
 8007346:	462b      	mov	r3, r5
 8007348:	f000 f870 	bl	800742c <fiprintf>
 800734c:	f000 f880 	bl	8007450 <abort>
 8007350:	4b04      	ldr	r3, [pc, #16]	@ (8007364 <__assert_func+0x38>)
 8007352:	461c      	mov	r4, r3
 8007354:	e7f3      	b.n	800733e <__assert_func+0x12>
 8007356:	bf00      	nop
 8007358:	20000024 	.word	0x20000024
 800735c:	08007cc1 	.word	0x08007cc1
 8007360:	08007cce 	.word	0x08007cce
 8007364:	08007cfc 	.word	0x08007cfc

08007368 <_calloc_r>:
 8007368:	b570      	push	{r4, r5, r6, lr}
 800736a:	fba1 5402 	umull	r5, r4, r1, r2
 800736e:	b934      	cbnz	r4, 800737e <_calloc_r+0x16>
 8007370:	4629      	mov	r1, r5
 8007372:	f7ff f999 	bl	80066a8 <_malloc_r>
 8007376:	4606      	mov	r6, r0
 8007378:	b928      	cbnz	r0, 8007386 <_calloc_r+0x1e>
 800737a:	4630      	mov	r0, r6
 800737c:	bd70      	pop	{r4, r5, r6, pc}
 800737e:	220c      	movs	r2, #12
 8007380:	6002      	str	r2, [r0, #0]
 8007382:	2600      	movs	r6, #0
 8007384:	e7f9      	b.n	800737a <_calloc_r+0x12>
 8007386:	462a      	mov	r2, r5
 8007388:	4621      	mov	r1, r4
 800738a:	f7fe fa40 	bl	800580e <memset>
 800738e:	e7f4      	b.n	800737a <_calloc_r+0x12>

08007390 <__ascii_mbtowc>:
 8007390:	b082      	sub	sp, #8
 8007392:	b901      	cbnz	r1, 8007396 <__ascii_mbtowc+0x6>
 8007394:	a901      	add	r1, sp, #4
 8007396:	b142      	cbz	r2, 80073aa <__ascii_mbtowc+0x1a>
 8007398:	b14b      	cbz	r3, 80073ae <__ascii_mbtowc+0x1e>
 800739a:	7813      	ldrb	r3, [r2, #0]
 800739c:	600b      	str	r3, [r1, #0]
 800739e:	7812      	ldrb	r2, [r2, #0]
 80073a0:	1e10      	subs	r0, r2, #0
 80073a2:	bf18      	it	ne
 80073a4:	2001      	movne	r0, #1
 80073a6:	b002      	add	sp, #8
 80073a8:	4770      	bx	lr
 80073aa:	4610      	mov	r0, r2
 80073ac:	e7fb      	b.n	80073a6 <__ascii_mbtowc+0x16>
 80073ae:	f06f 0001 	mvn.w	r0, #1
 80073b2:	e7f8      	b.n	80073a6 <__ascii_mbtowc+0x16>

080073b4 <_realloc_r>:
 80073b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073b8:	4607      	mov	r7, r0
 80073ba:	4614      	mov	r4, r2
 80073bc:	460d      	mov	r5, r1
 80073be:	b921      	cbnz	r1, 80073ca <_realloc_r+0x16>
 80073c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073c4:	4611      	mov	r1, r2
 80073c6:	f7ff b96f 	b.w	80066a8 <_malloc_r>
 80073ca:	b92a      	cbnz	r2, 80073d8 <_realloc_r+0x24>
 80073cc:	f7ff f8f8 	bl	80065c0 <_free_r>
 80073d0:	4625      	mov	r5, r4
 80073d2:	4628      	mov	r0, r5
 80073d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073d8:	f000 f841 	bl	800745e <_malloc_usable_size_r>
 80073dc:	4284      	cmp	r4, r0
 80073de:	4606      	mov	r6, r0
 80073e0:	d802      	bhi.n	80073e8 <_realloc_r+0x34>
 80073e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80073e6:	d8f4      	bhi.n	80073d2 <_realloc_r+0x1e>
 80073e8:	4621      	mov	r1, r4
 80073ea:	4638      	mov	r0, r7
 80073ec:	f7ff f95c 	bl	80066a8 <_malloc_r>
 80073f0:	4680      	mov	r8, r0
 80073f2:	b908      	cbnz	r0, 80073f8 <_realloc_r+0x44>
 80073f4:	4645      	mov	r5, r8
 80073f6:	e7ec      	b.n	80073d2 <_realloc_r+0x1e>
 80073f8:	42b4      	cmp	r4, r6
 80073fa:	4622      	mov	r2, r4
 80073fc:	4629      	mov	r1, r5
 80073fe:	bf28      	it	cs
 8007400:	4632      	movcs	r2, r6
 8007402:	f7ff ff85 	bl	8007310 <memcpy>
 8007406:	4629      	mov	r1, r5
 8007408:	4638      	mov	r0, r7
 800740a:	f7ff f8d9 	bl	80065c0 <_free_r>
 800740e:	e7f1      	b.n	80073f4 <_realloc_r+0x40>

08007410 <__ascii_wctomb>:
 8007410:	4603      	mov	r3, r0
 8007412:	4608      	mov	r0, r1
 8007414:	b141      	cbz	r1, 8007428 <__ascii_wctomb+0x18>
 8007416:	2aff      	cmp	r2, #255	@ 0xff
 8007418:	d904      	bls.n	8007424 <__ascii_wctomb+0x14>
 800741a:	228a      	movs	r2, #138	@ 0x8a
 800741c:	601a      	str	r2, [r3, #0]
 800741e:	f04f 30ff 	mov.w	r0, #4294967295
 8007422:	4770      	bx	lr
 8007424:	700a      	strb	r2, [r1, #0]
 8007426:	2001      	movs	r0, #1
 8007428:	4770      	bx	lr
	...

0800742c <fiprintf>:
 800742c:	b40e      	push	{r1, r2, r3}
 800742e:	b503      	push	{r0, r1, lr}
 8007430:	4601      	mov	r1, r0
 8007432:	ab03      	add	r3, sp, #12
 8007434:	4805      	ldr	r0, [pc, #20]	@ (800744c <fiprintf+0x20>)
 8007436:	f853 2b04 	ldr.w	r2, [r3], #4
 800743a:	6800      	ldr	r0, [r0, #0]
 800743c:	9301      	str	r3, [sp, #4]
 800743e:	f000 f83f 	bl	80074c0 <_vfiprintf_r>
 8007442:	b002      	add	sp, #8
 8007444:	f85d eb04 	ldr.w	lr, [sp], #4
 8007448:	b003      	add	sp, #12
 800744a:	4770      	bx	lr
 800744c:	20000024 	.word	0x20000024

08007450 <abort>:
 8007450:	b508      	push	{r3, lr}
 8007452:	2006      	movs	r0, #6
 8007454:	f000 fa08 	bl	8007868 <raise>
 8007458:	2001      	movs	r0, #1
 800745a:	f7fa fbaa 	bl	8001bb2 <_exit>

0800745e <_malloc_usable_size_r>:
 800745e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007462:	1f18      	subs	r0, r3, #4
 8007464:	2b00      	cmp	r3, #0
 8007466:	bfbc      	itt	lt
 8007468:	580b      	ldrlt	r3, [r1, r0]
 800746a:	18c0      	addlt	r0, r0, r3
 800746c:	4770      	bx	lr

0800746e <__sfputc_r>:
 800746e:	6893      	ldr	r3, [r2, #8]
 8007470:	3b01      	subs	r3, #1
 8007472:	2b00      	cmp	r3, #0
 8007474:	b410      	push	{r4}
 8007476:	6093      	str	r3, [r2, #8]
 8007478:	da08      	bge.n	800748c <__sfputc_r+0x1e>
 800747a:	6994      	ldr	r4, [r2, #24]
 800747c:	42a3      	cmp	r3, r4
 800747e:	db01      	blt.n	8007484 <__sfputc_r+0x16>
 8007480:	290a      	cmp	r1, #10
 8007482:	d103      	bne.n	800748c <__sfputc_r+0x1e>
 8007484:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007488:	f000 b932 	b.w	80076f0 <__swbuf_r>
 800748c:	6813      	ldr	r3, [r2, #0]
 800748e:	1c58      	adds	r0, r3, #1
 8007490:	6010      	str	r0, [r2, #0]
 8007492:	7019      	strb	r1, [r3, #0]
 8007494:	4608      	mov	r0, r1
 8007496:	f85d 4b04 	ldr.w	r4, [sp], #4
 800749a:	4770      	bx	lr

0800749c <__sfputs_r>:
 800749c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800749e:	4606      	mov	r6, r0
 80074a0:	460f      	mov	r7, r1
 80074a2:	4614      	mov	r4, r2
 80074a4:	18d5      	adds	r5, r2, r3
 80074a6:	42ac      	cmp	r4, r5
 80074a8:	d101      	bne.n	80074ae <__sfputs_r+0x12>
 80074aa:	2000      	movs	r0, #0
 80074ac:	e007      	b.n	80074be <__sfputs_r+0x22>
 80074ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074b2:	463a      	mov	r2, r7
 80074b4:	4630      	mov	r0, r6
 80074b6:	f7ff ffda 	bl	800746e <__sfputc_r>
 80074ba:	1c43      	adds	r3, r0, #1
 80074bc:	d1f3      	bne.n	80074a6 <__sfputs_r+0xa>
 80074be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080074c0 <_vfiprintf_r>:
 80074c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074c4:	460d      	mov	r5, r1
 80074c6:	b09d      	sub	sp, #116	@ 0x74
 80074c8:	4614      	mov	r4, r2
 80074ca:	4698      	mov	r8, r3
 80074cc:	4606      	mov	r6, r0
 80074ce:	b118      	cbz	r0, 80074d8 <_vfiprintf_r+0x18>
 80074d0:	6a03      	ldr	r3, [r0, #32]
 80074d2:	b90b      	cbnz	r3, 80074d8 <_vfiprintf_r+0x18>
 80074d4:	f7fe f900 	bl	80056d8 <__sinit>
 80074d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074da:	07d9      	lsls	r1, r3, #31
 80074dc:	d405      	bmi.n	80074ea <_vfiprintf_r+0x2a>
 80074de:	89ab      	ldrh	r3, [r5, #12]
 80074e0:	059a      	lsls	r2, r3, #22
 80074e2:	d402      	bmi.n	80074ea <_vfiprintf_r+0x2a>
 80074e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074e6:	f7fe fa10 	bl	800590a <__retarget_lock_acquire_recursive>
 80074ea:	89ab      	ldrh	r3, [r5, #12]
 80074ec:	071b      	lsls	r3, r3, #28
 80074ee:	d501      	bpl.n	80074f4 <_vfiprintf_r+0x34>
 80074f0:	692b      	ldr	r3, [r5, #16]
 80074f2:	b99b      	cbnz	r3, 800751c <_vfiprintf_r+0x5c>
 80074f4:	4629      	mov	r1, r5
 80074f6:	4630      	mov	r0, r6
 80074f8:	f000 f938 	bl	800776c <__swsetup_r>
 80074fc:	b170      	cbz	r0, 800751c <_vfiprintf_r+0x5c>
 80074fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007500:	07dc      	lsls	r4, r3, #31
 8007502:	d504      	bpl.n	800750e <_vfiprintf_r+0x4e>
 8007504:	f04f 30ff 	mov.w	r0, #4294967295
 8007508:	b01d      	add	sp, #116	@ 0x74
 800750a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800750e:	89ab      	ldrh	r3, [r5, #12]
 8007510:	0598      	lsls	r0, r3, #22
 8007512:	d4f7      	bmi.n	8007504 <_vfiprintf_r+0x44>
 8007514:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007516:	f7fe f9f9 	bl	800590c <__retarget_lock_release_recursive>
 800751a:	e7f3      	b.n	8007504 <_vfiprintf_r+0x44>
 800751c:	2300      	movs	r3, #0
 800751e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007520:	2320      	movs	r3, #32
 8007522:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007526:	f8cd 800c 	str.w	r8, [sp, #12]
 800752a:	2330      	movs	r3, #48	@ 0x30
 800752c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80076dc <_vfiprintf_r+0x21c>
 8007530:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007534:	f04f 0901 	mov.w	r9, #1
 8007538:	4623      	mov	r3, r4
 800753a:	469a      	mov	sl, r3
 800753c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007540:	b10a      	cbz	r2, 8007546 <_vfiprintf_r+0x86>
 8007542:	2a25      	cmp	r2, #37	@ 0x25
 8007544:	d1f9      	bne.n	800753a <_vfiprintf_r+0x7a>
 8007546:	ebba 0b04 	subs.w	fp, sl, r4
 800754a:	d00b      	beq.n	8007564 <_vfiprintf_r+0xa4>
 800754c:	465b      	mov	r3, fp
 800754e:	4622      	mov	r2, r4
 8007550:	4629      	mov	r1, r5
 8007552:	4630      	mov	r0, r6
 8007554:	f7ff ffa2 	bl	800749c <__sfputs_r>
 8007558:	3001      	adds	r0, #1
 800755a:	f000 80a7 	beq.w	80076ac <_vfiprintf_r+0x1ec>
 800755e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007560:	445a      	add	r2, fp
 8007562:	9209      	str	r2, [sp, #36]	@ 0x24
 8007564:	f89a 3000 	ldrb.w	r3, [sl]
 8007568:	2b00      	cmp	r3, #0
 800756a:	f000 809f 	beq.w	80076ac <_vfiprintf_r+0x1ec>
 800756e:	2300      	movs	r3, #0
 8007570:	f04f 32ff 	mov.w	r2, #4294967295
 8007574:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007578:	f10a 0a01 	add.w	sl, sl, #1
 800757c:	9304      	str	r3, [sp, #16]
 800757e:	9307      	str	r3, [sp, #28]
 8007580:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007584:	931a      	str	r3, [sp, #104]	@ 0x68
 8007586:	4654      	mov	r4, sl
 8007588:	2205      	movs	r2, #5
 800758a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800758e:	4853      	ldr	r0, [pc, #332]	@ (80076dc <_vfiprintf_r+0x21c>)
 8007590:	f7f8 fe1e 	bl	80001d0 <memchr>
 8007594:	9a04      	ldr	r2, [sp, #16]
 8007596:	b9d8      	cbnz	r0, 80075d0 <_vfiprintf_r+0x110>
 8007598:	06d1      	lsls	r1, r2, #27
 800759a:	bf44      	itt	mi
 800759c:	2320      	movmi	r3, #32
 800759e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075a2:	0713      	lsls	r3, r2, #28
 80075a4:	bf44      	itt	mi
 80075a6:	232b      	movmi	r3, #43	@ 0x2b
 80075a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075ac:	f89a 3000 	ldrb.w	r3, [sl]
 80075b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80075b2:	d015      	beq.n	80075e0 <_vfiprintf_r+0x120>
 80075b4:	9a07      	ldr	r2, [sp, #28]
 80075b6:	4654      	mov	r4, sl
 80075b8:	2000      	movs	r0, #0
 80075ba:	f04f 0c0a 	mov.w	ip, #10
 80075be:	4621      	mov	r1, r4
 80075c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075c4:	3b30      	subs	r3, #48	@ 0x30
 80075c6:	2b09      	cmp	r3, #9
 80075c8:	d94b      	bls.n	8007662 <_vfiprintf_r+0x1a2>
 80075ca:	b1b0      	cbz	r0, 80075fa <_vfiprintf_r+0x13a>
 80075cc:	9207      	str	r2, [sp, #28]
 80075ce:	e014      	b.n	80075fa <_vfiprintf_r+0x13a>
 80075d0:	eba0 0308 	sub.w	r3, r0, r8
 80075d4:	fa09 f303 	lsl.w	r3, r9, r3
 80075d8:	4313      	orrs	r3, r2
 80075da:	9304      	str	r3, [sp, #16]
 80075dc:	46a2      	mov	sl, r4
 80075de:	e7d2      	b.n	8007586 <_vfiprintf_r+0xc6>
 80075e0:	9b03      	ldr	r3, [sp, #12]
 80075e2:	1d19      	adds	r1, r3, #4
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	9103      	str	r1, [sp, #12]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	bfbb      	ittet	lt
 80075ec:	425b      	neglt	r3, r3
 80075ee:	f042 0202 	orrlt.w	r2, r2, #2
 80075f2:	9307      	strge	r3, [sp, #28]
 80075f4:	9307      	strlt	r3, [sp, #28]
 80075f6:	bfb8      	it	lt
 80075f8:	9204      	strlt	r2, [sp, #16]
 80075fa:	7823      	ldrb	r3, [r4, #0]
 80075fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80075fe:	d10a      	bne.n	8007616 <_vfiprintf_r+0x156>
 8007600:	7863      	ldrb	r3, [r4, #1]
 8007602:	2b2a      	cmp	r3, #42	@ 0x2a
 8007604:	d132      	bne.n	800766c <_vfiprintf_r+0x1ac>
 8007606:	9b03      	ldr	r3, [sp, #12]
 8007608:	1d1a      	adds	r2, r3, #4
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	9203      	str	r2, [sp, #12]
 800760e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007612:	3402      	adds	r4, #2
 8007614:	9305      	str	r3, [sp, #20]
 8007616:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80076ec <_vfiprintf_r+0x22c>
 800761a:	7821      	ldrb	r1, [r4, #0]
 800761c:	2203      	movs	r2, #3
 800761e:	4650      	mov	r0, sl
 8007620:	f7f8 fdd6 	bl	80001d0 <memchr>
 8007624:	b138      	cbz	r0, 8007636 <_vfiprintf_r+0x176>
 8007626:	9b04      	ldr	r3, [sp, #16]
 8007628:	eba0 000a 	sub.w	r0, r0, sl
 800762c:	2240      	movs	r2, #64	@ 0x40
 800762e:	4082      	lsls	r2, r0
 8007630:	4313      	orrs	r3, r2
 8007632:	3401      	adds	r4, #1
 8007634:	9304      	str	r3, [sp, #16]
 8007636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800763a:	4829      	ldr	r0, [pc, #164]	@ (80076e0 <_vfiprintf_r+0x220>)
 800763c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007640:	2206      	movs	r2, #6
 8007642:	f7f8 fdc5 	bl	80001d0 <memchr>
 8007646:	2800      	cmp	r0, #0
 8007648:	d03f      	beq.n	80076ca <_vfiprintf_r+0x20a>
 800764a:	4b26      	ldr	r3, [pc, #152]	@ (80076e4 <_vfiprintf_r+0x224>)
 800764c:	bb1b      	cbnz	r3, 8007696 <_vfiprintf_r+0x1d6>
 800764e:	9b03      	ldr	r3, [sp, #12]
 8007650:	3307      	adds	r3, #7
 8007652:	f023 0307 	bic.w	r3, r3, #7
 8007656:	3308      	adds	r3, #8
 8007658:	9303      	str	r3, [sp, #12]
 800765a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800765c:	443b      	add	r3, r7
 800765e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007660:	e76a      	b.n	8007538 <_vfiprintf_r+0x78>
 8007662:	fb0c 3202 	mla	r2, ip, r2, r3
 8007666:	460c      	mov	r4, r1
 8007668:	2001      	movs	r0, #1
 800766a:	e7a8      	b.n	80075be <_vfiprintf_r+0xfe>
 800766c:	2300      	movs	r3, #0
 800766e:	3401      	adds	r4, #1
 8007670:	9305      	str	r3, [sp, #20]
 8007672:	4619      	mov	r1, r3
 8007674:	f04f 0c0a 	mov.w	ip, #10
 8007678:	4620      	mov	r0, r4
 800767a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800767e:	3a30      	subs	r2, #48	@ 0x30
 8007680:	2a09      	cmp	r2, #9
 8007682:	d903      	bls.n	800768c <_vfiprintf_r+0x1cc>
 8007684:	2b00      	cmp	r3, #0
 8007686:	d0c6      	beq.n	8007616 <_vfiprintf_r+0x156>
 8007688:	9105      	str	r1, [sp, #20]
 800768a:	e7c4      	b.n	8007616 <_vfiprintf_r+0x156>
 800768c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007690:	4604      	mov	r4, r0
 8007692:	2301      	movs	r3, #1
 8007694:	e7f0      	b.n	8007678 <_vfiprintf_r+0x1b8>
 8007696:	ab03      	add	r3, sp, #12
 8007698:	9300      	str	r3, [sp, #0]
 800769a:	462a      	mov	r2, r5
 800769c:	4b12      	ldr	r3, [pc, #72]	@ (80076e8 <_vfiprintf_r+0x228>)
 800769e:	a904      	add	r1, sp, #16
 80076a0:	4630      	mov	r0, r6
 80076a2:	f7fd fbd7 	bl	8004e54 <_printf_float>
 80076a6:	4607      	mov	r7, r0
 80076a8:	1c78      	adds	r0, r7, #1
 80076aa:	d1d6      	bne.n	800765a <_vfiprintf_r+0x19a>
 80076ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076ae:	07d9      	lsls	r1, r3, #31
 80076b0:	d405      	bmi.n	80076be <_vfiprintf_r+0x1fe>
 80076b2:	89ab      	ldrh	r3, [r5, #12]
 80076b4:	059a      	lsls	r2, r3, #22
 80076b6:	d402      	bmi.n	80076be <_vfiprintf_r+0x1fe>
 80076b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076ba:	f7fe f927 	bl	800590c <__retarget_lock_release_recursive>
 80076be:	89ab      	ldrh	r3, [r5, #12]
 80076c0:	065b      	lsls	r3, r3, #25
 80076c2:	f53f af1f 	bmi.w	8007504 <_vfiprintf_r+0x44>
 80076c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076c8:	e71e      	b.n	8007508 <_vfiprintf_r+0x48>
 80076ca:	ab03      	add	r3, sp, #12
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	462a      	mov	r2, r5
 80076d0:	4b05      	ldr	r3, [pc, #20]	@ (80076e8 <_vfiprintf_r+0x228>)
 80076d2:	a904      	add	r1, sp, #16
 80076d4:	4630      	mov	r0, r6
 80076d6:	f7fd fe55 	bl	8005384 <_printf_i>
 80076da:	e7e4      	b.n	80076a6 <_vfiprintf_r+0x1e6>
 80076dc:	08007ca6 	.word	0x08007ca6
 80076e0:	08007cb0 	.word	0x08007cb0
 80076e4:	08004e55 	.word	0x08004e55
 80076e8:	0800749d 	.word	0x0800749d
 80076ec:	08007cac 	.word	0x08007cac

080076f0 <__swbuf_r>:
 80076f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076f2:	460e      	mov	r6, r1
 80076f4:	4614      	mov	r4, r2
 80076f6:	4605      	mov	r5, r0
 80076f8:	b118      	cbz	r0, 8007702 <__swbuf_r+0x12>
 80076fa:	6a03      	ldr	r3, [r0, #32]
 80076fc:	b90b      	cbnz	r3, 8007702 <__swbuf_r+0x12>
 80076fe:	f7fd ffeb 	bl	80056d8 <__sinit>
 8007702:	69a3      	ldr	r3, [r4, #24]
 8007704:	60a3      	str	r3, [r4, #8]
 8007706:	89a3      	ldrh	r3, [r4, #12]
 8007708:	071a      	lsls	r2, r3, #28
 800770a:	d501      	bpl.n	8007710 <__swbuf_r+0x20>
 800770c:	6923      	ldr	r3, [r4, #16]
 800770e:	b943      	cbnz	r3, 8007722 <__swbuf_r+0x32>
 8007710:	4621      	mov	r1, r4
 8007712:	4628      	mov	r0, r5
 8007714:	f000 f82a 	bl	800776c <__swsetup_r>
 8007718:	b118      	cbz	r0, 8007722 <__swbuf_r+0x32>
 800771a:	f04f 37ff 	mov.w	r7, #4294967295
 800771e:	4638      	mov	r0, r7
 8007720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007722:	6823      	ldr	r3, [r4, #0]
 8007724:	6922      	ldr	r2, [r4, #16]
 8007726:	1a98      	subs	r0, r3, r2
 8007728:	6963      	ldr	r3, [r4, #20]
 800772a:	b2f6      	uxtb	r6, r6
 800772c:	4283      	cmp	r3, r0
 800772e:	4637      	mov	r7, r6
 8007730:	dc05      	bgt.n	800773e <__swbuf_r+0x4e>
 8007732:	4621      	mov	r1, r4
 8007734:	4628      	mov	r0, r5
 8007736:	f7ff fd99 	bl	800726c <_fflush_r>
 800773a:	2800      	cmp	r0, #0
 800773c:	d1ed      	bne.n	800771a <__swbuf_r+0x2a>
 800773e:	68a3      	ldr	r3, [r4, #8]
 8007740:	3b01      	subs	r3, #1
 8007742:	60a3      	str	r3, [r4, #8]
 8007744:	6823      	ldr	r3, [r4, #0]
 8007746:	1c5a      	adds	r2, r3, #1
 8007748:	6022      	str	r2, [r4, #0]
 800774a:	701e      	strb	r6, [r3, #0]
 800774c:	6962      	ldr	r2, [r4, #20]
 800774e:	1c43      	adds	r3, r0, #1
 8007750:	429a      	cmp	r2, r3
 8007752:	d004      	beq.n	800775e <__swbuf_r+0x6e>
 8007754:	89a3      	ldrh	r3, [r4, #12]
 8007756:	07db      	lsls	r3, r3, #31
 8007758:	d5e1      	bpl.n	800771e <__swbuf_r+0x2e>
 800775a:	2e0a      	cmp	r6, #10
 800775c:	d1df      	bne.n	800771e <__swbuf_r+0x2e>
 800775e:	4621      	mov	r1, r4
 8007760:	4628      	mov	r0, r5
 8007762:	f7ff fd83 	bl	800726c <_fflush_r>
 8007766:	2800      	cmp	r0, #0
 8007768:	d0d9      	beq.n	800771e <__swbuf_r+0x2e>
 800776a:	e7d6      	b.n	800771a <__swbuf_r+0x2a>

0800776c <__swsetup_r>:
 800776c:	b538      	push	{r3, r4, r5, lr}
 800776e:	4b29      	ldr	r3, [pc, #164]	@ (8007814 <__swsetup_r+0xa8>)
 8007770:	4605      	mov	r5, r0
 8007772:	6818      	ldr	r0, [r3, #0]
 8007774:	460c      	mov	r4, r1
 8007776:	b118      	cbz	r0, 8007780 <__swsetup_r+0x14>
 8007778:	6a03      	ldr	r3, [r0, #32]
 800777a:	b90b      	cbnz	r3, 8007780 <__swsetup_r+0x14>
 800777c:	f7fd ffac 	bl	80056d8 <__sinit>
 8007780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007784:	0719      	lsls	r1, r3, #28
 8007786:	d422      	bmi.n	80077ce <__swsetup_r+0x62>
 8007788:	06da      	lsls	r2, r3, #27
 800778a:	d407      	bmi.n	800779c <__swsetup_r+0x30>
 800778c:	2209      	movs	r2, #9
 800778e:	602a      	str	r2, [r5, #0]
 8007790:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007794:	81a3      	strh	r3, [r4, #12]
 8007796:	f04f 30ff 	mov.w	r0, #4294967295
 800779a:	e033      	b.n	8007804 <__swsetup_r+0x98>
 800779c:	0758      	lsls	r0, r3, #29
 800779e:	d512      	bpl.n	80077c6 <__swsetup_r+0x5a>
 80077a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077a2:	b141      	cbz	r1, 80077b6 <__swsetup_r+0x4a>
 80077a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80077a8:	4299      	cmp	r1, r3
 80077aa:	d002      	beq.n	80077b2 <__swsetup_r+0x46>
 80077ac:	4628      	mov	r0, r5
 80077ae:	f7fe ff07 	bl	80065c0 <_free_r>
 80077b2:	2300      	movs	r3, #0
 80077b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80077b6:	89a3      	ldrh	r3, [r4, #12]
 80077b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80077bc:	81a3      	strh	r3, [r4, #12]
 80077be:	2300      	movs	r3, #0
 80077c0:	6063      	str	r3, [r4, #4]
 80077c2:	6923      	ldr	r3, [r4, #16]
 80077c4:	6023      	str	r3, [r4, #0]
 80077c6:	89a3      	ldrh	r3, [r4, #12]
 80077c8:	f043 0308 	orr.w	r3, r3, #8
 80077cc:	81a3      	strh	r3, [r4, #12]
 80077ce:	6923      	ldr	r3, [r4, #16]
 80077d0:	b94b      	cbnz	r3, 80077e6 <__swsetup_r+0x7a>
 80077d2:	89a3      	ldrh	r3, [r4, #12]
 80077d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80077d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077dc:	d003      	beq.n	80077e6 <__swsetup_r+0x7a>
 80077de:	4621      	mov	r1, r4
 80077e0:	4628      	mov	r0, r5
 80077e2:	f000 f883 	bl	80078ec <__smakebuf_r>
 80077e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077ea:	f013 0201 	ands.w	r2, r3, #1
 80077ee:	d00a      	beq.n	8007806 <__swsetup_r+0x9a>
 80077f0:	2200      	movs	r2, #0
 80077f2:	60a2      	str	r2, [r4, #8]
 80077f4:	6962      	ldr	r2, [r4, #20]
 80077f6:	4252      	negs	r2, r2
 80077f8:	61a2      	str	r2, [r4, #24]
 80077fa:	6922      	ldr	r2, [r4, #16]
 80077fc:	b942      	cbnz	r2, 8007810 <__swsetup_r+0xa4>
 80077fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007802:	d1c5      	bne.n	8007790 <__swsetup_r+0x24>
 8007804:	bd38      	pop	{r3, r4, r5, pc}
 8007806:	0799      	lsls	r1, r3, #30
 8007808:	bf58      	it	pl
 800780a:	6962      	ldrpl	r2, [r4, #20]
 800780c:	60a2      	str	r2, [r4, #8]
 800780e:	e7f4      	b.n	80077fa <__swsetup_r+0x8e>
 8007810:	2000      	movs	r0, #0
 8007812:	e7f7      	b.n	8007804 <__swsetup_r+0x98>
 8007814:	20000024 	.word	0x20000024

08007818 <_raise_r>:
 8007818:	291f      	cmp	r1, #31
 800781a:	b538      	push	{r3, r4, r5, lr}
 800781c:	4605      	mov	r5, r0
 800781e:	460c      	mov	r4, r1
 8007820:	d904      	bls.n	800782c <_raise_r+0x14>
 8007822:	2316      	movs	r3, #22
 8007824:	6003      	str	r3, [r0, #0]
 8007826:	f04f 30ff 	mov.w	r0, #4294967295
 800782a:	bd38      	pop	{r3, r4, r5, pc}
 800782c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800782e:	b112      	cbz	r2, 8007836 <_raise_r+0x1e>
 8007830:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007834:	b94b      	cbnz	r3, 800784a <_raise_r+0x32>
 8007836:	4628      	mov	r0, r5
 8007838:	f000 f830 	bl	800789c <_getpid_r>
 800783c:	4622      	mov	r2, r4
 800783e:	4601      	mov	r1, r0
 8007840:	4628      	mov	r0, r5
 8007842:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007846:	f000 b817 	b.w	8007878 <_kill_r>
 800784a:	2b01      	cmp	r3, #1
 800784c:	d00a      	beq.n	8007864 <_raise_r+0x4c>
 800784e:	1c59      	adds	r1, r3, #1
 8007850:	d103      	bne.n	800785a <_raise_r+0x42>
 8007852:	2316      	movs	r3, #22
 8007854:	6003      	str	r3, [r0, #0]
 8007856:	2001      	movs	r0, #1
 8007858:	e7e7      	b.n	800782a <_raise_r+0x12>
 800785a:	2100      	movs	r1, #0
 800785c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007860:	4620      	mov	r0, r4
 8007862:	4798      	blx	r3
 8007864:	2000      	movs	r0, #0
 8007866:	e7e0      	b.n	800782a <_raise_r+0x12>

08007868 <raise>:
 8007868:	4b02      	ldr	r3, [pc, #8]	@ (8007874 <raise+0xc>)
 800786a:	4601      	mov	r1, r0
 800786c:	6818      	ldr	r0, [r3, #0]
 800786e:	f7ff bfd3 	b.w	8007818 <_raise_r>
 8007872:	bf00      	nop
 8007874:	20000024 	.word	0x20000024

08007878 <_kill_r>:
 8007878:	b538      	push	{r3, r4, r5, lr}
 800787a:	4d07      	ldr	r5, [pc, #28]	@ (8007898 <_kill_r+0x20>)
 800787c:	2300      	movs	r3, #0
 800787e:	4604      	mov	r4, r0
 8007880:	4608      	mov	r0, r1
 8007882:	4611      	mov	r1, r2
 8007884:	602b      	str	r3, [r5, #0]
 8007886:	f7fa f984 	bl	8001b92 <_kill>
 800788a:	1c43      	adds	r3, r0, #1
 800788c:	d102      	bne.n	8007894 <_kill_r+0x1c>
 800788e:	682b      	ldr	r3, [r5, #0]
 8007890:	b103      	cbz	r3, 8007894 <_kill_r+0x1c>
 8007892:	6023      	str	r3, [r4, #0]
 8007894:	bd38      	pop	{r3, r4, r5, pc}
 8007896:	bf00      	nop
 8007898:	2000045c 	.word	0x2000045c

0800789c <_getpid_r>:
 800789c:	f7fa b971 	b.w	8001b82 <_getpid>

080078a0 <__swhatbuf_r>:
 80078a0:	b570      	push	{r4, r5, r6, lr}
 80078a2:	460c      	mov	r4, r1
 80078a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078a8:	2900      	cmp	r1, #0
 80078aa:	b096      	sub	sp, #88	@ 0x58
 80078ac:	4615      	mov	r5, r2
 80078ae:	461e      	mov	r6, r3
 80078b0:	da0d      	bge.n	80078ce <__swhatbuf_r+0x2e>
 80078b2:	89a3      	ldrh	r3, [r4, #12]
 80078b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80078b8:	f04f 0100 	mov.w	r1, #0
 80078bc:	bf14      	ite	ne
 80078be:	2340      	movne	r3, #64	@ 0x40
 80078c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80078c4:	2000      	movs	r0, #0
 80078c6:	6031      	str	r1, [r6, #0]
 80078c8:	602b      	str	r3, [r5, #0]
 80078ca:	b016      	add	sp, #88	@ 0x58
 80078cc:	bd70      	pop	{r4, r5, r6, pc}
 80078ce:	466a      	mov	r2, sp
 80078d0:	f000 f848 	bl	8007964 <_fstat_r>
 80078d4:	2800      	cmp	r0, #0
 80078d6:	dbec      	blt.n	80078b2 <__swhatbuf_r+0x12>
 80078d8:	9901      	ldr	r1, [sp, #4]
 80078da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80078de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80078e2:	4259      	negs	r1, r3
 80078e4:	4159      	adcs	r1, r3
 80078e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80078ea:	e7eb      	b.n	80078c4 <__swhatbuf_r+0x24>

080078ec <__smakebuf_r>:
 80078ec:	898b      	ldrh	r3, [r1, #12]
 80078ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078f0:	079d      	lsls	r5, r3, #30
 80078f2:	4606      	mov	r6, r0
 80078f4:	460c      	mov	r4, r1
 80078f6:	d507      	bpl.n	8007908 <__smakebuf_r+0x1c>
 80078f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80078fc:	6023      	str	r3, [r4, #0]
 80078fe:	6123      	str	r3, [r4, #16]
 8007900:	2301      	movs	r3, #1
 8007902:	6163      	str	r3, [r4, #20]
 8007904:	b003      	add	sp, #12
 8007906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007908:	ab01      	add	r3, sp, #4
 800790a:	466a      	mov	r2, sp
 800790c:	f7ff ffc8 	bl	80078a0 <__swhatbuf_r>
 8007910:	9f00      	ldr	r7, [sp, #0]
 8007912:	4605      	mov	r5, r0
 8007914:	4639      	mov	r1, r7
 8007916:	4630      	mov	r0, r6
 8007918:	f7fe fec6 	bl	80066a8 <_malloc_r>
 800791c:	b948      	cbnz	r0, 8007932 <__smakebuf_r+0x46>
 800791e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007922:	059a      	lsls	r2, r3, #22
 8007924:	d4ee      	bmi.n	8007904 <__smakebuf_r+0x18>
 8007926:	f023 0303 	bic.w	r3, r3, #3
 800792a:	f043 0302 	orr.w	r3, r3, #2
 800792e:	81a3      	strh	r3, [r4, #12]
 8007930:	e7e2      	b.n	80078f8 <__smakebuf_r+0xc>
 8007932:	89a3      	ldrh	r3, [r4, #12]
 8007934:	6020      	str	r0, [r4, #0]
 8007936:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800793a:	81a3      	strh	r3, [r4, #12]
 800793c:	9b01      	ldr	r3, [sp, #4]
 800793e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007942:	b15b      	cbz	r3, 800795c <__smakebuf_r+0x70>
 8007944:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007948:	4630      	mov	r0, r6
 800794a:	f000 f81d 	bl	8007988 <_isatty_r>
 800794e:	b128      	cbz	r0, 800795c <__smakebuf_r+0x70>
 8007950:	89a3      	ldrh	r3, [r4, #12]
 8007952:	f023 0303 	bic.w	r3, r3, #3
 8007956:	f043 0301 	orr.w	r3, r3, #1
 800795a:	81a3      	strh	r3, [r4, #12]
 800795c:	89a3      	ldrh	r3, [r4, #12]
 800795e:	431d      	orrs	r5, r3
 8007960:	81a5      	strh	r5, [r4, #12]
 8007962:	e7cf      	b.n	8007904 <__smakebuf_r+0x18>

08007964 <_fstat_r>:
 8007964:	b538      	push	{r3, r4, r5, lr}
 8007966:	4d07      	ldr	r5, [pc, #28]	@ (8007984 <_fstat_r+0x20>)
 8007968:	2300      	movs	r3, #0
 800796a:	4604      	mov	r4, r0
 800796c:	4608      	mov	r0, r1
 800796e:	4611      	mov	r1, r2
 8007970:	602b      	str	r3, [r5, #0]
 8007972:	f7fa f96e 	bl	8001c52 <_fstat>
 8007976:	1c43      	adds	r3, r0, #1
 8007978:	d102      	bne.n	8007980 <_fstat_r+0x1c>
 800797a:	682b      	ldr	r3, [r5, #0]
 800797c:	b103      	cbz	r3, 8007980 <_fstat_r+0x1c>
 800797e:	6023      	str	r3, [r4, #0]
 8007980:	bd38      	pop	{r3, r4, r5, pc}
 8007982:	bf00      	nop
 8007984:	2000045c 	.word	0x2000045c

08007988 <_isatty_r>:
 8007988:	b538      	push	{r3, r4, r5, lr}
 800798a:	4d06      	ldr	r5, [pc, #24]	@ (80079a4 <_isatty_r+0x1c>)
 800798c:	2300      	movs	r3, #0
 800798e:	4604      	mov	r4, r0
 8007990:	4608      	mov	r0, r1
 8007992:	602b      	str	r3, [r5, #0]
 8007994:	f7fa f96d 	bl	8001c72 <_isatty>
 8007998:	1c43      	adds	r3, r0, #1
 800799a:	d102      	bne.n	80079a2 <_isatty_r+0x1a>
 800799c:	682b      	ldr	r3, [r5, #0]
 800799e:	b103      	cbz	r3, 80079a2 <_isatty_r+0x1a>
 80079a0:	6023      	str	r3, [r4, #0]
 80079a2:	bd38      	pop	{r3, r4, r5, pc}
 80079a4:	2000045c 	.word	0x2000045c

080079a8 <_init>:
 80079a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079aa:	bf00      	nop
 80079ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ae:	bc08      	pop	{r3}
 80079b0:	469e      	mov	lr, r3
 80079b2:	4770      	bx	lr

080079b4 <_fini>:
 80079b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b6:	bf00      	nop
 80079b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ba:	bc08      	pop	{r3}
 80079bc:	469e      	mov	lr, r3
 80079be:	4770      	bx	lr
